/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./Samples/Sample_02/ts/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Framework/cubismframeworkconfig.ts":
/*!********************************************!*\
  !*** ./Framework/cubismframeworkconfig.ts ***!
  \********************************************/
/*! exports provided: CSM_LOG_LEVEL_VERBOSE, CSM_LOG_LEVEL_DEBUG, CSM_LOG_LEVEL_INFO, CSM_LOG_LEVEL_WARNING, CSM_LOG_LEVEL_ERROR, CSM_LOG_LEVEL_OFF, CSM_LOG_LEVEL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSM_LOG_LEVEL_VERBOSE", function() { return CSM_LOG_LEVEL_VERBOSE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSM_LOG_LEVEL_DEBUG", function() { return CSM_LOG_LEVEL_DEBUG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSM_LOG_LEVEL_INFO", function() { return CSM_LOG_LEVEL_INFO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSM_LOG_LEVEL_WARNING", function() { return CSM_LOG_LEVEL_WARNING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSM_LOG_LEVEL_ERROR", function() { return CSM_LOG_LEVEL_ERROR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSM_LOG_LEVEL_OFF", function() { return CSM_LOG_LEVEL_OFF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSM_LOG_LEVEL", function() { return CSM_LOG_LEVEL; });
/*
* Copyright(c) Live2D Inc. All rights reserved.
*
* Use of this source code is governed by the Live2D Open Software license
* that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
*/
//========================================================
//  ログ出力関数の設定
//========================================================
//---------- ログ出力レベル 選択項目 定義 ----------
/// 詳細ログ出力設定
var CSM_LOG_LEVEL_VERBOSE = 0;
/// デバッグログ出力設定
var CSM_LOG_LEVEL_DEBUG = 1;
/// Infoログ出力設定
var CSM_LOG_LEVEL_INFO = 2;
/// 警告ログ出力設定
var CSM_LOG_LEVEL_WARNING = 3;
/// エラーログ出力設定
var CSM_LOG_LEVEL_ERROR = 4;
/// ログ出力オフ設定
var CSM_LOG_LEVEL_OFF = 5;
/**
* ログ出力レベル設定。
*
* 強制的にログ出力レベルを変える時に定義を有効にする。
* CSM_LOG_LEVEL_VERBOSE ～ CSM_LOG_LEVEL_OFF を選択する。
*/
var CSM_LOG_LEVEL = CSM_LOG_LEVEL_VERBOSE;


/***/ }),

/***/ "./Framework/cubismmodelsettingjson.ts":
/*!*********************************************!*\
  !*** ./Framework/cubismmodelsettingjson.ts ***!
  \*********************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/* harmony import */ var _icubismmodelsetting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icubismmodelsetting */ "./Framework/icubismmodelsetting.ts");
/* harmony import */ var _utils_cubismjson__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/cubismjson */ "./Framework/utils/cubismjson.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var CubismFramework = _live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismFramework;
var CubismJson = _utils_cubismjson__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].CubismJson;
var ICubismModelSetting = _icubismmodelsetting__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].ICubismModelSetting;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * Model3Jsonのキー文字列
     */
    // JSON Keys
    var Version = "Version";
    var FileReferences = "FileReferences";
    var Groups = "Groups";
    var Layout = "Layout";
    var HitAreas = "HitAreas";
    var Moc = "Moc";
    var Textures = "Textures";
    var Physics = "Physics";
    var Pose = "Pose";
    var Expressions = "Expressions";
    var Motions = "Motions";
    var UserData = "UserData";
    var Name = "Name";
    var FilePath = "File";
    var Id = "Id";
    var Ids = "Ids";
    var Target = "Target";
    // Motions
    var Idle = "Idle";
    var TapBody = "TapBody";
    var PinchIn = "PinchIn";
    var PinchOut = "PinchOut";
    var Shake = "Shake";
    var FlickHead = "FlickHead";
    var Parameter = "Parameter";
    var SoundPath = "Sound";
    var FadeInTime = "FadeInTime";
    var FadeOutTime = "FadeOutTime";
    // Layout
    var CenterX = "CenterX";
    var CenterY = "CenterY";
    var X = "X";
    var Y = "Y";
    var Width = "Width";
    var Height = "Height";
    var LipSync = "LipSync";
    var EyeBlink = "EyeBlink";
    var InitParameter = "init_param";
    var InitPartsVisible = "init_parts_visible";
    var Val = "val";
    /**
     * Model3Jsonパーサー
     *
     * model3.jsonファイルをパースして値を取得する
     */
    var CubismModelSettingJson = /** @class */ (function (_super) {
        __extends(CubismModelSettingJson, _super);
        /**
         * 引数付きコンストラクタ
         *
         * @param buffer    Model3Jsonをバイト配列として読み込んだデータバッファ
         * @param size      Model3Jsonのデータサイズ
         */
        function CubismModelSettingJson(buffer, size) {
            var _this = _super.call(this) || this;
            _this._json = CubismJson.create(buffer, size);
            return _this;
        }
        /**
         * デストラクタ相当の処理
         */
        CubismModelSettingJson.prototype.release = function () {
            CubismJson.delete(this._json);
        };
        /**
         * CubismJsonオブジェクトを取得する
         *
         * @return CubismJson
         */
        CubismModelSettingJson.prototype.GetJson = function () {
            return this._json;
        };
        /**
         * Mocファイルの名前を取得する
         * @return Mocファイルの名前
         */
        CubismModelSettingJson.prototype.getModelFileName = function () {
            if (!this.isExistModelFile()) {
                return "";
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Moc).getRawString();
        };
        /**
         * モデルが使用するテクスチャの数を取得する
         * テクスチャの数
         */
        CubismModelSettingJson.prototype.getTextureCount = function () {
            if (!this.isExistTextureFiles()) {
                return 0;
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Textures).getSize();
        };
        /**
         * テクスチャが配置されたディレクトリの名前を取得する
         * @return テクスチャが配置されたディレクトリの名前
         */
        CubismModelSettingJson.prototype.getTextureDirectory = function () {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Textures).getRawString();
        };
        /**
         * モデルが使用するテクスチャの名前を取得する
         * @param index 配列のインデックス値
         * @return テクスチャの名前
         */
        CubismModelSettingJson.prototype.getTextureFileName = function (index) {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Textures).getVector().at(index).getRawString();
        };
        /**
         * モデルに設定された当たり判定の数を取得する
         * @return モデルに設定された当たり判定の数
         */
        CubismModelSettingJson.prototype.getHitAreasCount = function () {
            if (!this.isExistHitAreas()) {
                return 0;
            }
            return this._json.getRoot().getMap().getValue(HitAreas).getSize();
        };
        /**
         * 当たり判定に設定されたIDを取得する
         *
         * @param index 配列のindex
         * @return 当たり判定に設定されたID
         */
        CubismModelSettingJson.prototype.getHitAreaId = function (index) {
            return CubismFramework.getIdManager().getId(this._json.getRoot().getMap().getValue(HitAreas).getVector().at(index).getMap().getValue(Id).getRawString());
        };
        /**
         * 当たり判定に設定された名前を取得する
         * @param index 配列のインデックス値
         * @return 当たり判定に設定された名前
         */
        CubismModelSettingJson.prototype.getHitAreaName = function (index) {
            return this._json.getRoot().getMap().getValue(HitAreas).getVector().at(index).getMap().getValue(Name).getRawString();
        };
        /**
         * 物理演算設定ファイルの名前を取得する
         * @return 物理演算設定ファイルの名前
         */
        CubismModelSettingJson.prototype.getPhysicsFileName = function () {
            if (!this.isExistPhysicsFile()) {
                return "";
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Physics).getRawString();
        };
        /**
         * パーツ切り替え設定ファイルの名前を取得する
         * @return パーツ切り替え設定ファイルの名前
         */
        CubismModelSettingJson.prototype.getPoseFileName = function () {
            if (!this.isExistPoseFile()) {
                return "";
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Pose).getRawString();
        };
        /**
         * 表情設定ファイルの数を取得する
         * @return 表情設定ファイルの数
         */
        CubismModelSettingJson.prototype.getExpressionCount = function () {
            if (!this.isExistExpressionFile()) {
                return 0;
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Expressions).getSize();
        };
        /**
         * 表情設定ファイルを識別する名前（別名）を取得する
         * @param index 配列のインデックス値
         * @return 表情の名前
         */
        CubismModelSettingJson.prototype.getExpressionName = function (index) {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Expressions).getVector().at(index).getMap().getValue(Name).getRawString();
        };
        /**
         * 表情設定ファイルの名前を取得する
         * @param index 配列のインデックス値
         * @return 表情設定ファイルの名前
         */
        CubismModelSettingJson.prototype.getExpressionFileName = function (index) {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Expressions).getVector().at(index).getMap().getValue(FilePath).getRawString();
        };
        /**
         * モーショングループの数を取得する
         * @return モーショングループの数
         */
        CubismModelSettingJson.prototype.getMotionGroupCount = function () {
            if (!this.isExistMotionGroups()) {
                return 0;
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Motions).getMap().getSize();
        };
        /**
         * モーショングループの名前を取得する
         * @param index 配列のインデックス値
         * @return モーショングループの名前
         */
        CubismModelSettingJson.prototype.getMotionGroupName = function (index) {
            if (!this.isExistMotionGroups()) {
                return null;
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Motions).getKeys().at(index);
        };
        /**
         * モーショングループに含まれるモーションの数を取得する
         * @param groupName モーショングループの名前
         * @return モーショングループの数
         */
        CubismModelSettingJson.prototype.getMotionCount = function (groupName) {
            if (!this.isExistMotionGroupName(groupName)) {
                return 0;
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Motions).getMap().getValue(groupName).getSize();
        };
        /**
         * グループ名とインデックス値からモーションファイル名を取得する
         * @param groupName モーショングループの名前
         * @param index     配列のインデックス値
         * @return モーションファイルの名前
         */
        CubismModelSettingJson.prototype.getMotionFileName = function (groupName, index) {
            if (!this.isExistMotionGroupName(groupName)) {
                return "";
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Motions).getMap().getValue(groupName).getVector().at(index).getMap().getValue(FilePath).getRawString();
        };
        /**
         * モーションに対応するサウンドファイルの名前を取得する
         * @param groupName モーショングループの名前
         * @param index 配列のインデックス値
         * @return サウンドファイルの名前
         */
        CubismModelSettingJson.prototype.getMotionSoundFileName = function (groupName, index) {
            if (!this.isExistMotionSoundFile(groupName, index)) {
                return "";
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Motions).getMap().getValue(groupName).getVector().at(index).getMap().getValue(SoundPath).getRawString();
        };
        /**
         * モーション開始時のフェードイン処理時間を取得する
         * @param groupName モーショングループの名前
         * @param index 配列のインデックス値
         * @return フェードイン処理時間[秒]
         */
        CubismModelSettingJson.prototype.getMotionFadeInTimeValue = function (groupName, index) {
            if (!this.isExistMotionFadeIn(groupName, index)) {
                return -1.0;
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Motions).getMap().getValue(groupName).getVector().at(index).getMap().getValue(FadeInTime).toFloat();
        };
        /**
         * モーション終了時のフェードアウト処理時間を取得する
         * @param groupName モーショングループの名前
         * @param index 配列のインデックス値
         * @return フェードアウト処理時間[秒]
         */
        CubismModelSettingJson.prototype.getMotionFadeOutTimeValue = function (groupName, index) {
            if (!this.isExistMotionFadeOut(groupName, index)) {
                return -1.0;
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Motions).getMap().getValue(groupName).getVector().at(index).getMap().getValue(FadeOutTime).toFloat();
        };
        /**
         * ユーザーデータのファイル名を取得する
         * @return ユーザーデータのファイル名
         */
        CubismModelSettingJson.prototype.getUserDataFile = function () {
            if (!this.isExistUserDataFile()) {
                return "";
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(UserData).getRawString();
        };
        /**
         * レイアウト情報を取得する
         * @param outLayoutMap csmMapクラスのインスタンス
         * @return true レイアウト情報が存在する
         * @return false レイアウト情報が存在しない
         */
        CubismModelSettingJson.prototype.getLayoutMap = function (outLayoutMap) {
            // 存在しない要素にアクセスするとエラーになるためValueがnullの場合はnullを代入する
            var map = (this._json.getRoot().getMap().isExist(Layout))
                ? this._json.getRoot().getMap().getValue(Layout).getMap()
                : null;
            if (map == null) {
                return false;
            }
            var ret = false;
            for (var ite = map.begin(); ite.notEqual(map.end()); ite.preIncrement()) {
                outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());
                ret = true;
            }
            return ret;
        };
        /**
         * 目パチに関連付けられたパラメータの数を取得する
         * @return 目パチに関連付けられたパラメータの数
         */
        CubismModelSettingJson.prototype.getEyeBlinkParameterCount = function () {
            if (!this.isExistEyeBlinkParameters()) {
                return 0;
            }
            var num = 0;
            for (var i = 0; i < this._json.getRoot().getMap().getValue(Groups).getSize(); i++) {
                if (this._json.getRoot().getMap().getValue(Groups).getVector().at(i).getMap().getValue(Name).getRawString() == EyeBlink) {
                    num = this._json.getRoot().getMap().getValue(Groups).getVector().at(i).getMap().getValue(Ids).getVector().getSize();
                    break;
                }
            }
            return num;
        };
        /**
         * 目パチに関連付けられたパラメータのIDを取得する
         * @param index 配列のインデックス値
         * @return パラメータID
         */
        CubismModelSettingJson.prototype.getEyeBlinkParameterId = function (index) {
            if (!this.isExistEyeBlinkParameters()) {
                return null;
            }
            for (var i = 0; i < this._json.getRoot().getMap().getValue(Groups).getSize(); i++) {
                if (this._json.getRoot().getMap().getValue(Groups).getVector().at(i).getMap().getValue(Name).getRawString() == EyeBlink) {
                    return CubismFramework.getIdManager().getId(this._json.getRoot().getMap().getValue(Groups).getVector().at(i).getMap().getValue(Ids).getVector().at(index).getRawString());
                }
            }
            return null;
        };
        /**
         * リップシンクに関連付けられたパラメータの数を取得する
         * @return リップシンクに関連付けられたパラメータの数
         */
        CubismModelSettingJson.prototype.getLipSyncParameterCount = function () {
            if (!this.isExistLipSyncParameters()) {
                return 0;
            }
            var num = 0;
            for (var i = 0; i < this._json.getRoot().getMap().getValue(Groups).getSize(); i++) {
                if (this._json.getRoot().getMap().getValue(Groups).getVector().at(i).getMap().getValue(Name).getRawString() == LipSync) {
                    num = this._json.getRoot().getMap().getValue(Groups).getVector().at(i).getMap().getValue(Ids).getVector().getSize();
                    break;
                }
            }
            return num;
        };
        /**
         * リップシンクに関連付けられたパラメータの数を取得する
         * @param index 配列のインデックス値
         * @return パラメータID
         */
        CubismModelSettingJson.prototype.getLipSyncParameterId = function (index) {
            if (!this.isExistLipSyncParameters()) {
                return null;
            }
            for (var i = 0; i < this._json.getRoot().getMap().getValue(Groups).getSize(); i++) {
                if (this._json.getRoot().getMap().getValue(Groups).getVector().at(i).getMap().getValue(Name).getRawString() == LipSync) {
                    return CubismFramework.getIdManager().getId(this._json.getRoot().getMap().getValue(Groups).getVector().at(i).getMap().getValue(Ids).getVector().at(index).getRawString());
                }
            }
            return null;
        };
        /**
         * モデルファイルのキーが存在するかどうかを確認する
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistModelFile = function () {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().isExist(Moc);
        };
        /**
         * テクスチャファイルのキーが存在するかどうかを確認する
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistTextureFiles = function () {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().isExist(Textures);
        };
        /**
         * 当たり判定のキーが存在するかどうかを確認する
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistHitAreas = function () {
            return this._json.getRoot().getMap().isExist(HitAreas);
        };
        /**
         * 物理演算ファイルのキーが存在するかどうかを確認する
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistPhysicsFile = function () {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().isExist(Physics);
        };
        /**
         * ポーズ設定ファイルのキーが存在するかどうかを確認する
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistPoseFile = function () {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().isExist(Pose);
        };
        /**
         * 表情設定ファイルのキーが存在するかどうかを確認する
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistExpressionFile = function () {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().isExist(Expressions);
        };
        /**
         * モーショングループのキーが存在するかどうかを確認する
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistMotionGroups = function () {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().isExist(Motions);
        };
        /**
         * 引数で指定したモーショングループのキーが存在するかどうかを確認する
         * @param groupName  グループ名
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistMotionGroupName = function (groupName) {
            if (!this._json.getRoot().getMap().getValue(FileReferences).getMap().isExist(Motions)) {
                return false;
            }
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Motions).getMap().isExist(groupName);
        };
        /**
         * 引数で指定したモーションに対応するサウンドファイルのキーが存在するかどうかを確認する
         * @param groupName  グループ名
         * @param index 配列のインデックス値
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistMotionSoundFile = function (groupName, index) {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Motions).getMap().getValue(groupName).getVector().at(index).getMap().isExist(SoundPath);
        };
        /**
         * 引数で指定したモーションに対応するフェードイン時間のキーが存在するかどうかを確認する
         * @param groupName  グループ名
         * @param index 配列のインデックス値
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistMotionFadeIn = function (groupName, index) {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Motions).getMap().getValue(groupName).getVector().at(index).getMap().isExist(FadeInTime);
        };
        /**
         * 引数で指定したモーションに対応するフェードアウト時間のキーが存在するかどうかを確認する
         * @param groupName  グループ名
         * @param index 配列のインデックス値
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistMotionFadeOut = function (groupName, index) {
            return this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(Motions).getMap().getValue(groupName).getVector().at(index).getMap().isExist(FadeOutTime);
        };
        /**
         * UserDataのファイル名が存在するかどうかを確認する
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistUserDataFile = function () {
            if (!this._json.getRoot().getMap().getValue(FileReferences).getMap().isExist(UserData)) {
                return false;
            }
            return !this._json.getRoot().getMap().getValue(FileReferences).getMap().getValue(UserData).isNull();
        };
        /**
         * 目ぱちに対応付けられたパラメータが存在するかどうかを確認する
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistEyeBlinkParameters = function () {
            if (!this._json.getRoot().getMap().isExist(Groups)) {
                return false;
            }
            for (var i = 0; i < this._json.getRoot().getMap().getValue(Groups).getSize(); ++i) {
                if (this._json.getRoot().getMap().getValue(Groups).getVector().at(i).getMap().getValue(Name).getRawString() == EyeBlink) {
                    return true;
                }
            }
            return false;
        };
        /**
         * リップシンクに対応付けられたパラメータが存在するかどうかを確認する
         * @return true キーが存在する
         * @return false キーが存在しない
         */
        CubismModelSettingJson.prototype.isExistLipSyncParameters = function () {
            if (!this._json.getRoot().getMap().isExist(Groups)) {
                return false;
            }
            for (var i = 0; i < this._json.getRoot().getMap().getValue(Groups).getSize(); ++i) {
                if (this._json.getRoot().getMap().getValue(Groups).getVector().at(i).getMap().getValue(Name).getRawString() == LipSync) {
                    return true;
                }
            }
            return false;
        };
        return CubismModelSettingJson;
    }(ICubismModelSetting));
    Live2DCubismFramework.CubismModelSettingJson = CubismModelSettingJson;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/effect/cubismbreath.ts":
/*!******************************************!*\
  !*** ./Framework/effect/cubismbreath.ts ***!
  \******************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/*
* Copyright(c) Live2D Inc. All rights reserved.
*
* Use of this source code is governed by the Live2D Open Software license
* that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
*/
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * 呼吸機能
     *
     * 呼吸機能を提供する。
     */
    var CubismBreath = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismBreath() {
            this._currentTime = 0.0;
        }
        /**
         * インスタンスの作成
         */
        CubismBreath.create = function () {
            return new CubismBreath();
        };
        /**
         * インスタンスの破棄
         * @param instance 対象のCubismBreath
         */
        CubismBreath.delete = function (instance) {
            if (instance != null) {
                instance = null;
            }
        };
        /**
         * 呼吸のパラメータの紐づけ
         * @param breathParameters 呼吸を紐づけたいパラメータのリスト
         */
        CubismBreath.prototype.setParameters = function (breathParameters) {
            this._breathParameters = breathParameters;
        };
        /**
         * 呼吸に紐づいているパラメータの取得
         * @return 呼吸に紐づいているパラメータのリスト
         */
        CubismBreath.prototype.getParameters = function () {
            return this._breathParameters;
        };
        /**
         * モデルのパラメータの更新
         * @param model 対象のモデル
         * @param deltaTimeSeconds デルタ時間[秒]
         */
        CubismBreath.prototype.updateParameters = function (model, deltaTimeSeconds) {
            this._currentTime += deltaTimeSeconds;
            var t = this._currentTime * 2.0 * 3.14159;
            for (var i = 0; i < this._breathParameters.getSize(); ++i) {
                var data = this._breathParameters.at(i);
                model.addParameterValueById(data.parameterId, data.offset + (data.peak * Math.sin(t / data.cycle)), data.weight);
            }
        };
        return CubismBreath;
    }());
    Live2DCubismFramework.CubismBreath = CubismBreath;
    /**
     * 呼吸のパラメータ情報
     */
    var BreathParameterData = /** @class */ (function () {
        /**
         * コンストラクタ
         * @param parameterId   呼吸をひもづけるパラメータID
         * @param offset        呼吸を正弦波としたときの、波のオフセット
         * @param peak          呼吸を正弦波としたときの、波の高さ
         * @param cycle         呼吸を正弦波としたときの、波の周期
         * @param weight        パラメータへの重み
         */
        function BreathParameterData(parameterId, offset, peak, cycle, weight) {
            this.parameterId = (parameterId == undefined)
                ? null
                : parameterId;
            this.offset = (offset == undefined)
                ? 0.0
                : offset;
            this.peak = (peak == undefined)
                ? 0.0
                : peak;
            this.cycle = (cycle == undefined)
                ? 0.0
                : cycle;
            this.weight = (weight == undefined)
                ? 0.0
                : weight;
        }
        return BreathParameterData;
    }());
    Live2DCubismFramework.BreathParameterData = BreathParameterData;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/effect/cubismeyeblink.ts":
/*!********************************************!*\
  !*** ./Framework/effect/cubismeyeblink.ts ***!
  \********************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _type_csmvector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../type/csmvector */ "./Framework/type/csmvector.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */

var csmVector = _type_csmvector__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].csmVector;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * 自動まばたき機能
     *
     * 自動まばたき機能を提供する。
     */
    var CubismEyeBlink = /** @class */ (function () {
        /**
         * コンストラクタ
         * @param modelSetting モデルの設定情報
         */
        function CubismEyeBlink(modelSetting) {
            this._blinkingState = EyeState.EyeState_First;
            this._nextBlinkingTime = 0.0;
            this._stateStartTimeSeconds = 0.0;
            this._blinkingIntervalSeconds = 4.0;
            this._closingSeconds = 0.1;
            this._closedSeconds = 0.05;
            this._openingSeconds = 0.15;
            this._userTimeSeconds = 0.0;
            this._parameterIds = new csmVector();
            if (modelSetting == null) {
                return;
            }
            for (var i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {
                this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));
            }
        }
        /**
         * インスタンスを作成する
         * @param modelSetting モデルの設定情報
         * @return 作成されたインスタンス
         * @note 引数がNULLの場合、パラメータIDが設定されていない空のインスタンスを作成する。
         */
        CubismEyeBlink.create = function (modelSetting) {
            if (modelSetting === void 0) { modelSetting = null; }
            return new CubismEyeBlink(modelSetting);
        };
        /**
         * インスタンスの破棄
         * @param eyeBlink 対象のCubismEyeBlink
         */
        CubismEyeBlink.delete = function (eyeBlink) {
            if (eyeBlink != null) {
                eyeBlink = null;
            }
        };
        /**
         * まばたきの間隔の設定
         * @param blinkingInterval まばたきの間隔の時間[秒]
         */
        CubismEyeBlink.prototype.setBlinkingInterval = function (blinkingInterval) {
            this._blinkingIntervalSeconds = blinkingInterval;
        };
        /**
         * まばたきのモーションの詳細設定
         * @param closing   まぶたを閉じる動作の所要時間[秒]
         * @param closed    まぶたを閉じている動作の所要時間[秒]
         * @param opening   まぶたを開く動作の所要時間[秒]
         */
        CubismEyeBlink.prototype.setBlinkingSetting = function (closing, closed, opening) {
            this._closingSeconds = closing;
            this._closedSeconds = closed;
            this._openingSeconds = opening;
        };
        /**
         * まばたきさせるパラメータIDのリストの設定
         * @param parameterIds パラメータのIDのリスト
         */
        CubismEyeBlink.prototype.setParameterIds = function (parameterIds) {
            this._parameterIds = parameterIds;
        };
        /**
         * まばたきさせるパラメータIDのリストの取得
         * @return パラメータIDのリスト
         */
        CubismEyeBlink.prototype.getParameterIds = function () {
            return this._parameterIds;
        };
        /**
         * モデルのパラメータの更新
         * @param model 対象のモデル
         * @param deltaTimeSeconds デルタ時間[秒]
         */
        CubismEyeBlink.prototype.updateParameters = function (model, deltaTimeSeconds) {
            this._userTimeSeconds += deltaTimeSeconds;
            var parameterValue;
            var t = 0.0;
            switch (this._blinkingState) {
                case EyeState.EyeState_Closing:
                    t = ((this._userTimeSeconds - this._stateStartTimeSeconds) / this._closingSeconds);
                    if (t >= 1.0) {
                        t = 1.0;
                        this._blinkingState = EyeState.EyeState_Closed;
                        this._stateStartTimeSeconds = this._userTimeSeconds;
                    }
                    parameterValue = 1.0 - t;
                    break;
                case EyeState.EyeState_Closed:
                    t = ((this._userTimeSeconds - this._stateStartTimeSeconds) / this._closedSeconds);
                    if (t >= 1.0) {
                        this._blinkingState = EyeState.EyeState_Opening;
                        this._stateStartTimeSeconds = this._userTimeSeconds;
                    }
                    parameterValue = 0.0;
                    break;
                case EyeState.EyeState_Opening:
                    t = ((this._userTimeSeconds - this._stateStartTimeSeconds) / this._openingSeconds);
                    if (t >= 1.0) {
                        t = 1.0;
                        this._blinkingState = EyeState.EyeState_Interval;
                        this._nextBlinkingTime = this.determinNextBlinkingTiming();
                    }
                    parameterValue = t;
                    break;
                case EyeState.EyeState_Interval:
                    if (this._nextBlinkingTime < this._userTimeSeconds) {
                        this._blinkingState = EyeState.EyeState_Closing;
                        this._stateStartTimeSeconds = this._userTimeSeconds;
                    }
                    parameterValue = 1.0;
                    break;
                case EyeState.EyeState_First:
                default:
                    this._blinkingState = EyeState.EyeState_Interval;
                    this._nextBlinkingTime = this.determinNextBlinkingTiming();
                    parameterValue = 1.0;
                    break;
            }
            if (!CubismEyeBlink.CloseIfZero) {
                parameterValue = -parameterValue;
            }
            for (var i = 0; i < this._parameterIds.getSize(); ++i) {
                model.setParameterValueById(this._parameterIds.at(i), parameterValue);
            }
        };
        /**
         * 次の瞬きのタイミングの決定
         *
         * @return 次のまばたきを行う時刻[秒]
         */
        CubismEyeBlink.prototype.determinNextBlinkingTiming = function () {
            var r = Math.random();
            return this._userTimeSeconds + (r * (2.0 * this._blinkingIntervalSeconds - 1.0));
        };
        /**
         * IDで指定された目のパラメータが、0のときに閉じるなら true 、1の時に閉じるなら false 。
         */
        CubismEyeBlink.CloseIfZero = true;
        return CubismEyeBlink;
    }());
    Live2DCubismFramework.CubismEyeBlink = CubismEyeBlink;
    /**
     * まばたきの状態
     *
     * まばたきの状態を表す列挙型
     */
    var EyeState;
    (function (EyeState) {
        EyeState[EyeState["EyeState_First"] = 0] = "EyeState_First";
        EyeState[EyeState["EyeState_Interval"] = 1] = "EyeState_Interval";
        EyeState[EyeState["EyeState_Closing"] = 2] = "EyeState_Closing";
        EyeState[EyeState["EyeState_Closed"] = 3] = "EyeState_Closed";
        EyeState[EyeState["EyeState_Opening"] = 4] = "EyeState_Opening"; // まぶたが開いていく途中の状態
    })(EyeState = Live2DCubismFramework.EyeState || (Live2DCubismFramework.EyeState = {}));
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/effect/cubismpose.ts":
/*!****************************************!*\
  !*** ./Framework/effect/cubismpose.ts ***!
  \****************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _type_csmvector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../type/csmvector */ "./Framework/type/csmvector.ts");
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/* harmony import */ var _utils_cubismjson__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cubismjson */ "./Framework/utils/cubismjson.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */



var csmVector = _type_csmvector__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].csmVector;
var CubismFramework = _live2dcubismframework__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismFramework;
var CubismJson = _utils_cubismjson__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].CubismJson;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var Epsilon = 0.001;
    var DefaultFadeInSeconds = 0.5;
    // Pose.jsonのタグ
    var FadeIn = "FadeInTime";
    var Link = "Link";
    var Groups = "Groups";
    var Id = "Id";
    /**
     * パーツの不透明度の設定
     *
     * パーツの不透明度の管理と設定を行う。
     */
    var CubismPose = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismPose() {
            this._fadeTimeSeconds = DefaultFadeInSeconds;
            this._lastModel = null;
            this._partGroups = new csmVector();
            this._partGroupCounts = new csmVector();
        }
        /**
         * インスタンスの作成
         * @param pose3json pose3.jsonのデータ
         * @param size pose3.jsonのデータのサイズ[byte]
         * @return 作成されたインスタンス
         */
        CubismPose.create = function (pose3json, size) {
            var ret = new CubismPose();
            var json = CubismJson.create(pose3json, size);
            var root = json.getRoot();
            // フェード時間の指定
            if (root.getMap().isExist(FadeIn)) {
                ret._fadeTimeSeconds = root.getMap().getValue(FadeIn).toFloat(DefaultFadeInSeconds);
                if (ret._fadeTimeSeconds <= 0.0) {
                    ret._fadeTimeSeconds = DefaultFadeInSeconds;
                }
            }
            // パーツグループ
            var poseListInfo = root.getMap().getValue(Groups);
            var poseCount = poseListInfo.getSize();
            for (var poseIndex = 0; poseIndex < poseCount; ++poseIndex) {
                var idListInfo = poseListInfo.getVector().at(poseIndex);
                var idCount = idListInfo.getSize();
                var groupCount = 0;
                for (var groupIndex = 0; groupIndex < idCount; ++groupIndex) {
                    var partInfo = idListInfo.getVector().at(groupIndex);
                    var partData = new PartData();
                    var parameterId = CubismFramework.getIdManager().getId(partInfo.getMap().getValue(Id).getRawString());
                    partData.partId = parameterId;
                    // リンクするパーツの設定
                    if (partInfo.getMap().isExist(Link)) {
                        var linkListInfo = partInfo.getMap().getValue(Link);
                        var linkCount = linkListInfo.getSize();
                        for (var linkIndex = 0; linkIndex < linkCount; ++linkIndex) {
                            var linkPart = new PartData();
                            var linkId = CubismFramework.getIdManager().getId(linkListInfo.getVector().at(linkIndex).getString());
                            linkPart.partId = linkId;
                            partData.link.pushBack(linkPart);
                        }
                    }
                    ret._partGroups.pushBack(partData.clone());
                    ++groupCount;
                }
                ret._partGroupCounts.pushBack(groupCount);
            }
            CubismJson.delete(json);
            return ret;
        };
        /**
         * インスタンスを破棄する
         * @param pose 対象のCubismPose
         */
        CubismPose.delete = function (pose) {
            if (pose != null) {
                pose = null;
            }
        };
        /**
         * モデルのパラメータの更新
         * @param model 対象のモデル
         * @param deltaTimeSeconds デルタ時間[秒]
         */
        CubismPose.prototype.updateParameters = function (model, deltaTimeSeconds) {
            // 前回のモデルと同じでない場合は初期化が必要
            if (model != this._lastModel) {
                // パラメータインデックスの初期化
                this.reset(model);
            }
            this._lastModel = model;
            // 設定から時間を変更すると、経過時間がマイナスになる事があるので、経過時間0として対応
            if (deltaTimeSeconds < 0.0) {
                deltaTimeSeconds = 0.0;
            }
            var beginIndex = 0;
            for (var i = 0; i < this._partGroupCounts.getSize(); i++) {
                var partGroupCount = this._partGroupCounts.at(i);
                this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);
                beginIndex += partGroupCount;
            }
            this.copyPartOpacities(model);
        };
        /**
         * 表示を初期化
         * @param model 対象のモデル
         * @note 不透明度の初期値が0でないパラメータは、不透明度を１に設定する
         */
        CubismPose.prototype.reset = function (model) {
            var beginIndex = 0;
            for (var i = 0; i < this._partGroupCounts.getSize(); ++i) {
                var groupCount = this._partGroupCounts.at(i);
                for (var j = beginIndex; j < beginIndex + groupCount; ++j) {
                    this._partGroups.at(j).initialize(model);
                    var partsIndex = this._partGroups.at(j).partIndex;
                    var paramIndex = this._partGroups.at(j).parameterIndex;
                    if (partsIndex < 0) {
                        continue;
                    }
                    model.setPartOpacityByIndex(partsIndex, (j == beginIndex ? 1.0 : 0.0));
                    model.setParameterValueByIndex(paramIndex, (j == beginIndex ? 1.0 : 0.0));
                    for (var k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {
                        this._partGroups.at(j).link.at(k).initialize(model);
                    }
                }
                beginIndex += groupCount;
            }
        };
        /**
         * パーツの不透明度をコピー
         *
         * @param model 対象のモデル
         */
        CubismPose.prototype.copyPartOpacities = function (model) {
            for (var groupIndex = 0; groupIndex < this._partGroups.getSize(); ++groupIndex) {
                var partData = this._partGroups.at(groupIndex);
                if (partData.link.getSize() == 0) {
                    continue; // 連動するパラメータはない
                }
                var partIndex = this._partGroups.at(groupIndex).partIndex;
                var opacity = model.getPartOpacityByIndex(partIndex);
                for (var linkIndex = 0; linkIndex < partData.link.getSize(); ++linkIndex) {
                    var linkPart = partData.link.at(linkIndex);
                    var linkPartIndex = linkPart.partIndex;
                    if (linkPartIndex < 0) {
                        continue;
                    }
                    model.setPartOpacityByIndex(linkPartIndex, opacity);
                }
            }
        };
        /**
         * パーツのフェード操作を行う。
         * @param model 対象のモデル
         * @param deltaTimeSeconds デルタ時間[秒]
         * @param beginIndex フェード操作を行うパーツグループの先頭インデックス
         * @param partGroupCount フェード操作を行うパーツグループの個数
         */
        CubismPose.prototype.doFade = function (model, deltaTimeSeconds, beginIndex, partGroupCount) {
            var visiblePartIndex = -1;
            var newOpacity = 1.0;
            var phi = 0.5;
            var backOpacityThreshold = 0.15;
            // 現在、表示状態になっているパーツを取得
            for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {
                var partIndex = this._partGroups.at(i).partIndex;
                var paramIndex = this._partGroups.at(i).parameterIndex;
                if (model.getParameterValueByIndex(paramIndex) > Epsilon) {
                    if (visiblePartIndex >= 0) {
                        break;
                    }
                    visiblePartIndex = i;
                    newOpacity = model.getPartOpacityByIndex(partIndex);
                    // 新しい不透明度を計算
                    newOpacity += (deltaTimeSeconds / this._fadeTimeSeconds);
                    if (newOpacity > 1.0) {
                        newOpacity = 1.0;
                    }
                }
            }
            if (visiblePartIndex < 0) {
                visiblePartIndex = 0;
                newOpacity = 1.0;
            }
            // 表示パーツ、非表示パーツの不透明度を設定する
            for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {
                var partsIndex = this._partGroups.at(i).partIndex;
                // 表示パーツの設定
                if (visiblePartIndex == i) {
                    model.setPartOpacityByIndex(partsIndex, newOpacity); // 先に設定
                }
                // 非表示パーツの設定
                else {
                    var opacity = model.getPartOpacityByIndex(partsIndex);
                    var a1 = void 0; // 計算によって求められる不透明度
                    if (newOpacity < phi) {
                        a1 = newOpacity * (phi - 1) / phi + 1.0; // (0,1),(phi,phi)を通る直線式
                    }
                    else {
                        a1 = (1 - newOpacity) * phi / (1.0 - phi); // (1,0),(phi,phi)を通る直線式
                    }
                    // 背景の見える割合を制限する場合
                    var backOpacity = (1.0 - a1) * (1.0 - newOpacity);
                    if (backOpacity > backOpacityThreshold) {
                        a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);
                    }
                    if (opacity > a1) {
                        opacity = a1; // 計算の不透明度よりも大きければ（濃ければ）不透明度を上げる
                    }
                    model.setPartOpacityByIndex(partsIndex, opacity);
                }
            }
        };
        return CubismPose;
    }());
    Live2DCubismFramework.CubismPose = CubismPose;
    /**
     * パーツにまつわるデータを管理
     */
    var PartData = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function PartData(v) {
            this.parameterIndex = 0;
            this.partIndex = 0;
            this.link = new csmVector();
            if (v != undefined) {
                this.partId = v.partId;
                for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {
                    this.link.pushBack(ite.ptr().clone());
                }
            }
        }
        /**
         * =演算子のオーバーロード
         */
        PartData.prototype.assignment = function (v) {
            this.partId = v.partId;
            for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {
                this.link.pushBack(ite.ptr().clone());
            }
            return this;
        };
        /**
         * 初期化
         * @param model 初期化に使用するモデル
         */
        PartData.prototype.initialize = function (model) {
            this.parameterIndex = model.getParameterIndex(this.partId);
            this.partIndex = model.getPartIndex(this.partId);
            model.setParameterValueByIndex(this.parameterIndex, 1);
        };
        /**
         * オブジェクトのコピーを生成する
         */
        PartData.prototype.clone = function () {
            var clonePartData = new PartData();
            clonePartData.partId = this.partId;
            clonePartData.parameterIndex = this.parameterIndex;
            clonePartData.partIndex = this.partIndex;
            clonePartData.link = new csmVector();
            for (var ite = this.link.begin(); ite.notEqual(this.link.end()); ite.increment()) {
                clonePartData.link.pushBack(ite.ptr().clone());
            }
            return clonePartData;
        };
        return PartData;
    }());
    Live2DCubismFramework.PartData = PartData;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/icubismmodelsetting.ts":
/*!******************************************!*\
  !*** ./Framework/icubismmodelsetting.ts ***!
  \******************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * モデル設定情報を取り扱う関数を宣言した純粋仮想クラス。
     *
     * このクラスを継承することで、モデル設定情報を取り扱うクラスになる。
     */
    var ICubismModelSetting = /** @class */ (function () {
        function ICubismModelSetting() {
        }
        return ICubismModelSetting;
    }());
    Live2DCubismFramework.ICubismModelSetting = ICubismModelSetting;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/id/cubismid.ts":
/*!**********************************!*\
  !*** ./Framework/id/cubismid.ts ***!
  \**********************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _type_csmstring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../type/csmstring */ "./Framework/type/csmstring.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */

var csmString = _type_csmstring__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].csmString;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * パラメータ名・パーツ名・Drawable名を保持
     *
     * パラメータ名・パーツ名・Drawable名を保持するクラス。
     */
    var CubismId = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismId(id) {
            if (typeof (id) === 'string') {
                this._id = new csmString(id);
                return;
            }
            this._id = id;
        }
        /**
         * ID名を取得する
         */
        CubismId.prototype.getString = function () {
            return this._id;
        };
        /**
         * idを比較
         * @param c 比較するid
         * @return 同じならばtrue,異なっていればfalseを返す
         */
        CubismId.prototype.isEqual = function (c) {
            if (typeof (c) === 'string') {
                return this._id.isEqual(c);
            }
            else if (c instanceof csmString) {
                return this._id.isEqual(c.s);
            }
            else if (c instanceof CubismId) {
                return this._id.isEqual(c._id.s);
            }
            return false;
        };
        /**
         * idを比較
         * @param c 比較するid
         * @return 同じならばtrue,異なっていればfalseを返す
         */
        CubismId.prototype.isNotEqual = function (c) {
            if (typeof (c) == 'string') {
                return !this._id.isEqual(c);
            }
            else if (c instanceof csmString) {
                return !this._id.isEqual(c.s);
            }
            else if (c instanceof CubismId) {
                return !this._id.isEqual(c._id.s);
            }
            return false;
        };
        return CubismId;
    }());
    Live2DCubismFramework.CubismId = CubismId;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/id/cubismidmanager.ts":
/*!*****************************************!*\
  !*** ./Framework/id/cubismidmanager.ts ***!
  \*****************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _type_csmvector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../type/csmvector */ "./Framework/type/csmvector.ts");
/* harmony import */ var _cubismid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cubismid */ "./Framework/id/cubismid.ts");
/*
* Copyright(c) Live2D Inc. All rights reserved.
*
* Use of this source code is governed by the Live2D Open Software license
* that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
*/


var CubismId = _cubismid__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismId;
var csmVector = _type_csmvector__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].csmVector;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * ID名の管理
     *
     * ID名を管理する。
     */
    var CubismIdManager = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismIdManager() {
            this._ids = new csmVector();
        }
        /**
         * デストラクタ相当の処理
         */
        CubismIdManager.prototype.release = function () {
            for (var i = 0; i < this._ids.getSize(); ++i) {
                this._ids.set(i, void 0);
            }
            this._ids = null;
        };
        /**
         * ID名をリストから登録
         *
         * @param ids ID名リスト
         * @param count IDの個数
         */
        CubismIdManager.prototype.registerIds = function (ids) {
            for (var i = 0; i < ids.length; i++) {
                this.registerId(ids[i]);
            }
        };
        /**
         * ID名を登録
         *
         * @param id ID名
         */
        CubismIdManager.prototype.registerId = function (id) {
            var result = null;
            if ('string' == typeof (id)) {
                if ((result = this.findId(id)) != null) {
                    return result;
                }
                result = new CubismId(id);
                this._ids.pushBack(result);
            }
            else {
                return this.registerId(id.s);
            }
            return result;
        };
        /**
         * ID名からIDを取得する
         *
         * @param id ID名
         */
        CubismIdManager.prototype.getId = function (id) {
            return this.registerId(id);
        };
        /**
         * ID名からIDの確認
         *
         * @return true 存在する
         * @return false 存在しない
         */
        CubismIdManager.prototype.isExist = function (id) {
            if ('string' == typeof (id)) {
                return (this.findId(id) != null);
            }
            return this.isExist(id.s);
        };
        /**
         * ID名からIDを検索する。
         *
         * @param id ID名
         * @return 登録されているID。なければNULL。
         */
        CubismIdManager.prototype.findId = function (id) {
            for (var i = 0; i < this._ids.getSize(); ++i) {
                if (this._ids.at(i).getString().isEqual(id)) {
                    return this._ids.at(i);
                }
            }
            return null;
        };
        return CubismIdManager;
    }());
    Live2DCubismFramework.CubismIdManager = CubismIdManager;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/live2dcubismframework.ts":
/*!********************************************!*\
  !*** ./Framework/live2dcubismframework.ts ***!
  \********************************************/
/*! exports provided: strtod, Live2DCubismFramework, Option, LogLevel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strtod", function() { return strtod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Option", function() { return Option; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogLevel", function() { return LogLevel; });
/* harmony import */ var _utils_cubismjson__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/cubismjson */ "./Framework/utils/cubismjson.ts");
/* harmony import */ var _id_cubismidmanager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./id/cubismidmanager */ "./Framework/id/cubismidmanager.ts");
/* harmony import */ var _rendering_cubismrenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rendering/cubismrenderer */ "./Framework/rendering/cubismrenderer.ts");
/* harmony import */ var _utils_cubismdebug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/cubismdebug */ "./Framework/utils/cubismdebug.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */




var Value = _utils_cubismjson__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].Value;
var CubismIdManager = _id_cubismidmanager__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismIdManager;
var CubismRenderer = _rendering_cubismrenderer__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].CubismRenderer;
function strtod(s, endPtr) {
    var index = 0;
    for (var i = 1;; i++) {
        var testC = s.slice(i - 1, i);
        // 指数・マイナスの可能性があるのでスキップする
        if (testC == 'e' || testC == '-' || testC == 'E') {
            continue;
        }
        // 文字列の範囲を広げていく
        var test = s.substring(0, i);
        var number = Number(test);
        if (isNaN(number)) {
            // 数値として認識できなくなったので終了
            break;
        }
        // 最後に数値としてできたindexを格納しておく
        index = i;
    }
    var d = parseFloat(s); // パースした数値
    if (isNaN(d)) {
        // 数値として認識できなくなったので終了
        d = NaN;
    }
    endPtr[0] = s.slice(index); // 後続の文字列
    return d;
}
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    // ファイルスコープの変数を初期化
    var s_isStarted = false;
    var s_isInitialized = false;
    var s_option = null;
    var s_cubismIdManager = null;
    /**
     * Framework内で使う定数の宣言
     */
    var Constant;
    (function (Constant) {
        Constant.vertexOffset = 0; // メッシュ頂点のオフセット値
        Constant.vertexStep = 2; // メッシュ頂点のステップ値
    })(Constant = Live2DCubismFramework.Constant || (Live2DCubismFramework.Constant = {}));
    function csmDelete(address) {
        if (!address) {
            return;
        }
        address = void 0;
    }
    Live2DCubismFramework.csmDelete = csmDelete;
    /**
     * Live2D Cubism3 Original Workflow SDKのエントリポイント
     * 利用開始時はCubismFramework.initialize()を呼び、CubismFramework.dispose()で終了する。
     */
    var CubismFramework = /** @class */ (function () {
        /**
         * 静的クラスとして使用する
         * インスタンス化させない
         */
        function CubismFramework() {
        }
        /**
         * @brief    Cubism FrameworkのAPIを使用可能にする。<br>
         *            APIを実行する前に必ずこの関数を実行すること。<br>
         *            引数に必ずメモリアロケータを渡してください。<br>
         *            一度準備が完了して以降は、再び実行しても内部処理がスキップされます。
         *
         * @param    allocator   ICubismAllocatorクラスのインスタンス
         * @param    option      Optionクラスのインスタンス
         *
         * @return   準備処理が完了したらtrueが返ります。
         */
        CubismFramework.startUp = function (option) {
            if (option === void 0) { option = null; }
            if (s_isStarted) {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_3__["CubismLogInfo"])("CubismFramework::StartUp() is already done.");
                return s_isStarted;
            }
            s_option = option;
            if (s_option != null) {
                // TODO Core::csmSetLogFunction(s_option->LogFunction);
            }
            s_isStarted = true;
            // Live2D Cubism Coreバージョン情報を表示
            if (s_isStarted) {
                var version = 1; // TODO Core::csmGetVersion()
                var major = ((version & 0xFF000000) >> 24);
                var minor = ((version & 0x00FF0000) >> 16);
                var patch = ((version & 0x0000FFFF));
                var versionNumber = version;
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_3__["CubismLogInfo"])("Live2D Cubism Core version: %02d.%02d.%04d (%d)", major, minor, patch, versionNumber);
            }
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_3__["CubismLogInfo"])("CubismFramework::StartUp() is complete.");
            return s_isStarted;
        };
        /**
         * StartUp()で初期化したCubismFrameworkの各パラメータをクリアします。
         * Dispose()したCubismFrameworkを再利用する際に利用してください。
         */
        CubismFramework.cleanUp = function () {
            s_isStarted = false;
            s_isInitialized = false;
            s_option = null;
            s_cubismIdManager = null;
        };
        /**
         * Cubism Framework内のリソースを初期化してモデルを表示可能な状態にします。<br>
         *     再度Initialize()するには先にDispose()を実行する必要があります。
         */
        CubismFramework.initialize = function () {
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_3__["CSM_ASSERT"])(s_isStarted);
            if (!s_isStarted) {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_3__["CubismLogWarning"])("CubismFramework is not started.");
                return;
            }
            // --- s_isInitializedによる連続初期化ガード ---
            // 連続してリソース確保が行われないようにする。
            // 再度Initialize()するには先にDispose()を実行する必要がある。
            if (s_isInitialized) {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_3__["CubismLogWarning"])("CubismFramework::Initialize() skipped, already initialized.");
                return;
            }
            //---- static 初期化 ----
            Value.staticInitializeNotForClientCall();
            s_cubismIdManager = new CubismIdManager();
            s_isInitialized = true;
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_3__["CubismLogInfo"])("CubismFramework::Initialize() is complete.");
        };
        /**
         * Cubism Framework内の全てのリソースを解放します。
         *      ただし、外部で確保されたリソースについては解放しません。
         *      外部で適切に破棄する必要があります。
         */
        CubismFramework.dispose = function () {
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_3__["CSM_ASSERT"])(s_isStarted);
            if (!s_isStarted) {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_3__["CubismLogWarning"])("CubismFramework is not started.");
                return;
            }
            // --- s_isInitializedによる未初期化解放ガード ---
            // dispose()するには先にinitialize()を実行する必要がある。
            if (!s_isInitialized) // false...リソース未確保の場合
             {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_3__["CubismLogWarning"])("CubismFramework::Dispose() skipped, not initialized.");
                return;
            }
            Value.staticReleaseNotForClientCall();
            s_cubismIdManager.release();
            s_cubismIdManager = void 0;
            // レンダラの静的リソース（シェーダプログラム他）を解放する
            CubismRenderer.StaticRelease();
            s_isInitialized = false;
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_3__["CubismLogInfo"])("CubismFramework::Dispose() is complete.");
        };
        /**
         * 現在のログ出力レベル設定の値を返す。
         *
         * @return  現在のログ出力レベル設定の値
         */
        CubismFramework.getLoggingLevel = function () {
            if (s_option != null) {
                return s_option.loggingLevel;
            }
            return LogLevel.LogLevel_Off;
        };
        /**
         * Cubism FrameworkのAPIを使用する準備が完了したかどうか
         * @return APIを使用する準備が完了していればtrueが返ります。
         */
        CubismFramework.isStarted = function () {
            return s_isStarted;
        };
        /**
         * Cubism Frameworkのリソース初期化がすでに行われているかどうか
         * @return リソース確保が完了していればtrueが返ります
         */
        CubismFramework.isInitialized = function () {
            return s_isInitialized;
        };
        /**
         * IDマネージャのインスタンスを取得する
         * @return CubismManagerクラスのインスタンス
         */
        CubismFramework.getIdManager = function () {
            return s_cubismIdManager;
        };
        return CubismFramework;
    }());
    Live2DCubismFramework.CubismFramework = CubismFramework;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));
var Option = /** @class */ (function () {
    function Option() {
    }
    return Option;
}());

/**
 * ログ出力のレベル
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["LogLevel_Verbose"] = 0] = "LogLevel_Verbose";
    LogLevel[LogLevel["LogLevel_Debug"] = 1] = "LogLevel_Debug";
    LogLevel[LogLevel["LogLevel_Info"] = 2] = "LogLevel_Info";
    LogLevel[LogLevel["LogLevel_Warning"] = 3] = "LogLevel_Warning";
    LogLevel[LogLevel["LogLevel_Error"] = 4] = "LogLevel_Error";
    LogLevel[LogLevel["LogLevel_Off"] = 5] = "LogLevel_Off"; // ログ出力無効
})(LogLevel || (LogLevel = {}));


/***/ }),

/***/ "./Framework/math/cubismmath.ts":
/*!**************************************!*\
  !*** ./Framework/math/cubismmath.ts ***!
  \**************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _cubismvector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cubismvector2 */ "./Framework/math/cubismvector2.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */

var CubismVector2 = _cubismvector2__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismVector2;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * 数値計算などに使用するユーティリティクラス
     */
    var CubismMath = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismMath() {
        }
        /**
         * 第一引数の値を最小値と最大値の範囲に収めた値を返す
         *
         * @param value 収められる値
         * @param min   範囲の最小値
         * @param max   範囲の最大値
         * @return 最小値と最大値の範囲に収めた値
         */
        CubismMath.range = function (value, min, max) {
            if (value < min) {
                value = min;
            }
            else if (value > max) {
                value = max;
            }
            return value;
        };
        /**
         * サイン関数の値を求める
         *
         * @param x 角度値（ラジアン）
         * @return サイン関数sin(x)の値
         */
        CubismMath.sin = function (x) {
            return Math.sin(x);
        };
        /**
         * コサイン関数の値を求める
         *
         * @param x 角度値(ラジアン)
         * @return コサイン関数cos(x)の値
         */
        CubismMath.cos = function (x) {
            return Math.cos(x);
        };
        /**
         * 値の絶対値を求める
         *
         * @param x 絶対値を求める値
         * @return 値の絶対値
         */
        CubismMath.abs = function (x) {
            return Math.abs(x);
        };
        /**
         * 平方根(ルート)を求める
         * @param x -> 平方根を求める値
         * @return 値の平方根
         */
        CubismMath.sqrt = function (x) {
            return Math.sqrt(x);
        };
        /**
         * イージング処理されたサインを求める
         * フェードイン・アウト時のイージングに利用できる
         *
         * @param value イージングを行う値
         * @return イージング処理されたサイン値
         */
        CubismMath.getEasingSine = function (value) {
            if (value < 0.0) {
                return 0.0;
            }
            else if (value > 1.0) {
                return 1.0;
            }
            return 0.5 - 0.5 * this.cos(value * Math.PI);
        };
        /**
         * 大きい方の値を返す
         *
         * @param left 左辺の値
         * @param right 右辺の値
         * @return 大きい方の値
         */
        CubismMath.max = function (left, right) {
            return (left > right)
                ? left
                : right;
        };
        /**
         * 小さい方の値を返す
         *
         * @param left  左辺の値
         * @param right 右辺の値
         * @return 小さい方の値
         */
        CubismMath.min = function (left, right) {
            return (left > right)
                ? right
                : left;
        };
        /**
         * 角度値をラジアン値に変換する
         *
         * @param degrees   角度値
         * @return 角度値から変換したラジアン値
         */
        CubismMath.degreesToRadian = function (degrees) {
            return (degrees / 180.0) * Math.PI;
        };
        /**
         * ラジアン値を角度値に変換する
         *
         * @param radian    ラジアン値
         * @return ラジアン値から変換した角度値
         */
        CubismMath.radianToDegrees = function (radian) {
            return (radian * 180.0) / Math.PI;
        };
        /**
         * ２つのベクトルからラジアン値を求める
         *
         * @param from  始点ベクトル
         * @param to    終点ベクトル
         * @return ラジアン値から求めた方向ベクトル
         */
        CubismMath.directionToRadian = function (from, to) {
            var q1 = Math.atan2(to.y, to.x);
            var q2 = Math.atan2(from.y, from.x);
            var ret = q1 - q2;
            while (ret < -Math.PI) {
                ret += Math.PI * 2.0;
            }
            while (ret > Math.PI) {
                ret -= Math.PI * 2.0;
            }
            return ret;
        };
        /**
         * ２つのベクトルから角度値を求める
         *
         * @param from  始点ベクトル
         * @param to    終点ベクトル
         * @return 角度値から求めた方向ベクトル
         */
        CubismMath.directionToDegrees = function (from, to) {
            var radian = this.directionToRadian(from, to);
            var degree = this.radianToDegrees(radian);
            if ((to.x - from.x) > 0.0) {
                degree = -degree;
            }
            return degree;
        };
        /**
         * ラジアン値を方向ベクトルに変換する。
         *
         * @param totalAngle    ラジアン値
         * @return ラジアン値から変換した方向ベクトル
         */
        CubismMath.radianToDirection = function (totalAngle) {
            var ret = new CubismVector2();
            ret.x = this.sin(totalAngle);
            ret.y = this.cos(totalAngle);
            return ret;
        };
        return CubismMath;
    }());
    Live2DCubismFramework.CubismMath = CubismMath;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/math/cubismmatrix44.ts":
/*!******************************************!*\
  !*** ./Framework/math/cubismmatrix44.ts ***!
  \******************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * 4x4の行列
     *
     * 4x4行列の便利クラス。
     */
    var CubismMatrix44 = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismMatrix44() {
            this._tr = new Float32Array(16); // 4 * 4のサイズ
            this.loadIdentity();
        }
        /**
         * 受け取った２つの行列の乗算を行う。
         *
         * @param a 行列a
         * @param b 行列b
         * @return 乗算結果の行列
         */
        CubismMatrix44.multiply = function (a, b, dst) {
            var c = new Float32Array([
                0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0
            ]);
            var n = 4;
            for (var i = 0; i < n; ++i) {
                for (var j = 0; j < n; ++j) {
                    for (var k = 0; k < n; ++k) {
                        c[j + i * 4] += a[k + i * 4] * b[j + k * 4];
                    }
                }
            }
            for (var i = 0; i < 16; ++i) {
                dst[i] = c[i];
            }
        };
        /**
         * 単位行列に初期化する
         */
        CubismMatrix44.prototype.loadIdentity = function () {
            var c = new Float32Array([
                1.0, 0.0, 0.0, 0.0,
                0.0, 1.0, 0.0, 0.0,
                0.0, 0.0, 1.0, 0.0,
                0.0, 0.0, 0.0, 1.0
            ]);
            this.setMatrix(c);
        };
        /**
         * 行列を設定
         *
         * @param tr 16個の浮動小数点数で表される4x4の行列
         */
        CubismMatrix44.prototype.setMatrix = function (tr) {
            for (var i = 0; i < 16; ++i) {
                this._tr[i] = tr[i];
            }
        };
        /**
         * 行列を浮動小数点数の配列で取得
         *
         * @return 16個の浮動小数点数で表される4x4の行列
         */
        CubismMatrix44.prototype.getArray = function () {
            return this._tr;
        };
        /**
         * X軸の拡大率を取得
         * @return X軸の拡大率
         */
        CubismMatrix44.prototype.getScaleX = function () {
            return this._tr[0];
        };
        /**
         * Y軸の拡大率を取得する
         *
         * @return Y軸の拡大率
         */
        CubismMatrix44.prototype.getScaleY = function () {
            return this._tr[5];
        };
        /**
         * X軸の移動量を取得
         * @return X軸の移動量
         */
        CubismMatrix44.prototype.getTranslateX = function () {
            return this._tr[12];
        };
        /**
         * Y軸の移動量を取得
         * @return Y軸の移動量
         */
        CubismMatrix44.prototype.getTranslateY = function () {
            return this._tr[13];
        };
        /**
         * X軸の値を現在の行列で計算
         *
         * @param src X軸の値
         * @return 現在の行列で計算されたX軸の値
         */
        CubismMatrix44.prototype.transformX = function (src) {
            return this._tr[0] * src + this._tr[12];
        };
        /**
         * Y軸の値を現在の行列で計算
         *
         * @param src Y軸の値
         * @return　現在の行列で計算されたY軸の値
         */
        CubismMatrix44.prototype.transformY = function (src) {
            return this._tr[5] * src + this._tr[13];
        };
        /**
         * X軸の値を現在の行列で逆計算
         */
        CubismMatrix44.prototype.invertTransformX = function (src) {
            return (src - this._tr[12]) / this._tr[0];
        };
        /**
         * Y軸の値を現在の行列で逆計算
         */
        CubismMatrix44.prototype.invertTransformY = function (src) {
            return (src - this._tr[13]) / this._tr[5];
        };
        /**
         * 現在の行列の位置を起点にして移動
         *
         * 現在の行列の位置を起点にして相対的に移動する。
         *
         * @param x X軸の移動量
         * @param y Y軸の移動量
         */
        CubismMatrix44.prototype.translateRelative = function (x, y) {
            var tr1 = new Float32Array([
                1.0, 0.0, 0.0, 0.0,
                0.0, 1.0, 0.0, 0.0,
                0.0, 0.0, 1.0, 0.0,
                x, y, 0.0, 1.0
            ]);
            CubismMatrix44.multiply(tr1, this._tr, this._tr);
        };
        /**
         * 現在の行列の位置を移動
         *
         * 現在の行列の位置を指定した位置へ移動する
         *
         * @param x X軸の移動量
         * @param y y軸の移動量
         */
        CubismMatrix44.prototype.translate = function (x, y) {
            this._tr[12] = x;
            this._tr[13] = y;
        };
        /**
         * 現在の行列のX軸の位置を指定した位置へ移動する
         *
         * @param x X軸の移動量
         */
        CubismMatrix44.prototype.translateX = function (x) {
            this._tr[12] = x;
        };
        /**
         * 現在の行列のY軸の位置を指定した位置へ移動する
         *
         * @param y Y軸の移動量
         */
        CubismMatrix44.prototype.translateY = function (y) {
            this._tr[13] = y;
        };
        /**
         * 現在の行列の拡大率を相対的に設定する
         *
         * @param x X軸の拡大率
         * @param y Y軸の拡大率
         */
        CubismMatrix44.prototype.scaleRelative = function (x, y) {
            var tr1 = new Float32Array([
                x, 0.0, 0.0, 0.0,
                0.0, y, 0.0, 0.0,
                0.0, 0.0, 1.0, 0.0,
                0.0, 0.0, 0.0, 1.0
            ]);
            CubismMatrix44.multiply(tr1, this._tr, this._tr);
        };
        /**
         * 現在の行列の拡大率を指定した倍率に設定する
         *
         * @param x X軸の拡大率
         * @param y Y軸の拡大率
         */
        CubismMatrix44.prototype.scale = function (x, y) {
            this._tr[0] = x;
            this._tr[5] = y;
        };
        /**
         * 現在の行列に行列を乗算
         *
         * @param m 行列
         */
        CubismMatrix44.prototype.multiplyByMatrix = function (m) {
            CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);
        };
        /**
         * オブジェクトのコピーを生成する
         */
        CubismMatrix44.prototype.clone = function () {
            var cloneMatrix = new CubismMatrix44();
            for (var i = 0; i < this._tr.length; i++) {
                cloneMatrix._tr[i] = this._tr[i];
            }
            return cloneMatrix;
        };
        return CubismMatrix44;
    }());
    Live2DCubismFramework.CubismMatrix44 = CubismMatrix44;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/math/cubismmodelmatrix.ts":
/*!*********************************************!*\
  !*** ./Framework/math/cubismmodelmatrix.ts ***!
  \*********************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _cubismmatrix44__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cubismmatrix44 */ "./Framework/math/cubismmatrix44.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var CubismMatrix44 = _cubismmatrix44__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismMatrix44;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * モデル座標設定用の4x4行列
     *
     * モデル座標設定用の4x4行列クラス
     */
    var CubismModelMatrix = /** @class */ (function (_super) {
        __extends(CubismModelMatrix, _super);
        /**
         * コンストラクタ
         *
         * @param w 横幅
         * @param h 縦幅
         */
        function CubismModelMatrix(w, h) {
            var _this = _super.call(this) || this;
            _this._width = (w !== undefined)
                ? w
                : 0.0;
            _this._height = (h !== undefined)
                ? h
                : 0.0;
            // 原点(0, 0)を中心にして、画面に納まるような大きさで初期化
            if (_this._width > _this._height) {
                _this.setWidth(_this._height / _this._width);
            }
            else {
                _this.setHeight(1.0);
            }
            return _this;
        }
        /**
         * 横幅を設定
         *
         * @param w 横幅
         */
        CubismModelMatrix.prototype.setWidth = function (w) {
            var scaleX = w / this._width;
            var scaleY = scaleX;
            this.scale(scaleX, scaleY);
        };
        /**
         * 縦幅を設定
         * @param h 縦幅
         */
        CubismModelMatrix.prototype.setHeight = function (h) {
            var scaleX = h / this._height;
            var scaleY = scaleX;
            this.scale(scaleX, scaleY);
        };
        /**
         * 位置を設定
         *
         * @param x X軸の位置
         * @param y Y軸の位置
         */
        CubismModelMatrix.prototype.setPosition = function (x, y) {
            this.translate(x, y);
        };
        /**
         * 中心位置を設定
         *
         * @param x X軸の中心位置
         * @param y Y軸の中心位置
         *
         * @note widthかheightを設定したあとでないと、拡大率が正しく取得できないためずれる。
         */
        CubismModelMatrix.prototype.setCenterPosition = function (x, y) {
            this.centerX(x);
            this.centerY(y);
        };
        /**
         * 上辺の位置を設定する
         *
         * @param y 上辺のY軸位置
         */
        CubismModelMatrix.prototype.top = function (y) {
            this.setY(y);
        };
        /**
         * 下辺の位置を設定する
         *
         * @param y 下辺のY軸位置
         */
        CubismModelMatrix.prototype.bottom = function (y) {
            var h = this._height * this.getScaleY();
            this.translateY(y - h);
        };
        /**
         * 左辺の位置を設定
         *
         * @param x 左辺のX軸位置
         */
        CubismModelMatrix.prototype.left = function (x) {
            this.setX(x);
        };
        /**
         * 右辺の位置を設定
         *
         * @param x 右辺のX軸位置
         */
        CubismModelMatrix.prototype.right = function (x) {
            var w = this._width * this.getScaleX();
            this.translateX(x - w);
        };
        /**
         * X軸の中心位置を設定
         *
         * @param x X軸の中心位置
         */
        CubismModelMatrix.prototype.centerX = function (x) {
            var w = this._width * this.getScaleX();
            this.translateX(x - (w / 2.0));
        };
        /**
         * X軸の位置を設定
         *
         * @param x X軸の位置
         */
        CubismModelMatrix.prototype.setX = function (x) {
            this.translateX(x);
        };
        /**
         * Y軸の中心位置を設定
         *
         * @param y Y軸の中心位置
         */
        CubismModelMatrix.prototype.centerY = function (y) {
            var h = this._height * this.getScaleY();
            this.translateY(y - (h / 2.0));
        };
        /**
         * Y軸の位置を設定する
         *
         * @param y Y軸の位置
         */
        CubismModelMatrix.prototype.setY = function (y) {
            this.translateY(y);
        };
        /**
         * レイアウト情報から位置を設定
         *
         * @param layout レイアウト情報
         */
        CubismModelMatrix.prototype.setupFromLayout = function (layout) {
            var keyWidth = "width";
            var keyHeight = "height";
            var keyX = "x";
            var keyY = "y";
            var keyCenterX = "center_x";
            var keyCenterY = "center_y";
            var keyTop = "top";
            var keyBottom = "bottom";
            var keyLeft = "left";
            var keyRight = "right";
            for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {
                var key = ite.ptr().first;
                var value = ite.ptr().second;
                if (key == keyWidth) {
                    this.setWidth(value);
                }
                else if (key == keyHeight) {
                    this.setHeight(value);
                }
            }
            for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {
                var key = ite.ptr().first;
                var value = ite.ptr().second;
                if (key == keyX) {
                    this.setX(value);
                }
                else if (key == keyY) {
                    this.setY(value);
                }
                else if (key == keyCenterX) {
                    this.centerX(value);
                }
                else if (key == keyCenterY) {
                    this.centerY(value);
                }
                else if (key == keyTop) {
                    this.top(value);
                }
                else if (key == keyBottom) {
                    this.bottom(value);
                }
                else if (key == keyLeft) {
                    this.left(value);
                }
                else if (key == keyRight) {
                    this.right(value);
                }
            }
        };
        return CubismModelMatrix;
    }(CubismMatrix44));
    Live2DCubismFramework.CubismModelMatrix = CubismModelMatrix;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/math/cubismtargetpoint.ts":
/*!*********************************************!*\
  !*** ./Framework/math/cubismtargetpoint.ts ***!
  \*********************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _cubismmath__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cubismmath */ "./Framework/math/cubismmath.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */

var CubismMath = _cubismmath__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismMath;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var FrameRate = 30;
    var Epsilon = 0.01;
    /**
     * 顔の向きの制御機能
     *
     * 顔の向きの制御機能を提供するクラス。
     */
    var CubismTargetPoint = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismTargetPoint() {
            this._faceTargetX = 0.0;
            this._faceTargetY = 0.0;
            this._faceX = 0.0;
            this._faceY = 0.0;
            this._faceVX = 0.0;
            this._faceVY = 0.0;
            this._lastTimeSeconds = 0.0;
            this._userTimeSeconds = 0.0;
        }
        /**
         * 更新処理
         */
        CubismTargetPoint.prototype.update = function (deltaTimeSeconds) {
            // デルタ時間を加算する
            this._userTimeSeconds += deltaTimeSeconds;
            // 首を中央から左右に振るときの平均的な速さは　秒速度。加速・減速を考慮して、その２倍を最高速度とする
            // 顔の振り具合を、中央（0.0）から、左右は（+-1.0）とする
            var faceParamMaxV = 40.0 / 10.0; // 7.5秒間に40分移動(5.3/sc)
            var maxV = faceParamMaxV * 1.0 / FrameRate; // 1frameあたりに変化できる速度の上限
            if (this._lastTimeSeconds == 0.0) {
                this._lastTimeSeconds = this._userTimeSeconds;
                return;
            }
            var deltaTimeWeight = (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;
            this._lastTimeSeconds = this._userTimeSeconds;
            // 最高速度になるまでの時間を
            var timeToMaxSpeed = 0.15;
            var frameToMaxSpeed = timeToMaxSpeed * FrameRate; // sec * frame/sec
            var maxA = deltaTimeWeight * maxV / frameToMaxSpeed; // 1frameあたりの加速度
            // 目指す向きは、（dx, dy）方向のベクトルとなる
            var dx = this._faceTargetX - this._faceX;
            var dy = this._faceTargetY - this._faceY;
            if (CubismMath.abs(dx) <= Epsilon && CubismMath.abs(dy) <= Epsilon) {
                return; // 変化なし
            }
            // 速度の最大よりも大きい場合は、速度を落とす
            var d = CubismMath.sqrt((dx * dx) + (dy * dy));
            // 進行方向の最大速度ベクトル
            var vx = maxV * dx / d;
            var vy = maxV * dy / d;
            // 現在の速度から、新規速度への変化（加速度）を求める
            var ax = vx - this._faceVX;
            var ay = vy - this._faceVY;
            var a = CubismMath.sqrt((ax * ax) + (ay * ay));
            // 加速のとき
            if (a < -maxA || a > maxA) {
                ax *= maxA / a;
                ay *= maxA / a;
            }
            // 加速度を元の速度に足して、新速度とする
            this._faceVX += ax;
            this._faceVY += ay;
            // 目的の方向に近づいたとき、滑らかに減速するための処理
            // 設定された加速度で止まる事の出来る距離と速度の関係から
            // 現在とりうる最高速度を計算し、それ以上の時は速度を落とす
            // ※本来、人間は筋力で力（加速度）を調整できるため、より自由度が高いが、簡単な処理で済ませている
            {
                // 加速度、速度、距離の関係式。
                //            2  6           2               3
                //      sqrt(a  t  + 16 a h t  - 8 a h) - a t
                // v = --------------------------------------
                //                    2
                //                 4 t  - 2
                // (t=1)
                // 	時刻tは、あらかじめ加速度、速度を1/60(フレームレート、単位なし)で
                // 	考えているので、t＝１として消してよい（※未検証）
                var maxV_1 = 0.5 * (CubismMath.sqrt((maxA * maxA) + 16.0 * maxA * d - 8.0 * maxA * d) - maxA);
                var curV = CubismMath.sqrt((this._faceVX * this._faceVX) + (this._faceVY * this._faceVY));
                if (curV > maxV_1) {
                    // 現在の速度 > 最高速度のとき、最高速度まで減速
                    this._faceVX *= maxV_1 / curV;
                    this._faceVY *= maxV_1 / curV;
                }
            }
            this._faceX += this._faceVX;
            this._faceY += this._faceVY;
        };
        /**
         * X軸の顔の向きの値を取得
         *
         * @return X軸の顔の向きの値（-1.0 ~ 1.0）
         */
        CubismTargetPoint.prototype.getX = function () {
            return this._faceX;
        };
        /**
         * Y軸の顔の向きの値を取得
         *
         * @return Y軸の顔の向きの値（-1.0 ~ 1.0）
         */
        CubismTargetPoint.prototype.getY = function () {
            return this._faceY;
        };
        /**
         * 顔の向きの目標値を設定
         *
         * @param x X軸の顔の向きの値（-1.0 ~ 1.0）
         * @param y Y軸の顔の向きの値（-1.0 ~ 1.0）
         */
        CubismTargetPoint.prototype.set = function (x, y) {
            this._faceTargetX = x;
            this._faceTargetY = y;
        };
        return CubismTargetPoint;
    }());
    Live2DCubismFramework.CubismTargetPoint = CubismTargetPoint;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/math/cubismvector2.ts":
/*!*****************************************!*\
  !*** ./Framework/math/cubismvector2.ts ***!
  \*****************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * 2次元ベクトル型
     *
     * 2次元ベクトル型の機能を提供する。
     */
    var CubismVector2 = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismVector2(x, y) {
            this.x = x;
            this.y = y;
            this.x = (x == undefined)
                ? 0.0
                : x;
            this.y = (y == undefined)
                ? 0.0
                : y;
        }
        /**
         * ベクトルの加算
         *
         * @param vector2 加算するベクトル値
         * @return 加算結果 ベクトル値
         */
        CubismVector2.prototype.add = function (vector2) {
            var ret = new CubismVector2(0.0, 0.0);
            ret.x = this.x + vector2.x;
            ret.y = this.y + vector2.y;
            return ret;
        };
        /**
         * ベクトルの減算
         *
         * @param vector2 減算するベクトル値
         * @return 減算結果 ベクトル値
         */
        CubismVector2.prototype.substract = function (vector2) {
            var ret = new CubismVector2(0.0, 0.0);
            ret.x = this.x - vector2.x;
            ret.y = this.y - vector2.y;
            return ret;
        };
        /**
         * ベクトルの乗算
         *
         * @param vector2 乗算するベクトル値
         * @return 乗算結果　ベクトル値
         */
        CubismVector2.prototype.multiply = function (vector2) {
            var ret = new CubismVector2(0.0, 0.0);
            ret.x = this.x * vector2.x;
            ret.y = this.y * vector2.y;
            return ret;
        };
        /**
         * ベクトルの乗算(スカラー)
         *
         * @param scalar 乗算するスカラー値
         * @return 乗算結果　ベクトル値
         */
        CubismVector2.prototype.multiplyByScaler = function (scalar) {
            return this.multiply(new CubismVector2(scalar, scalar));
        };
        /**
         * ベクトルの除算
         *
         * @param vector2 除算するベクトル値
         * @return 除算結果　ベクトル値
         */
        CubismVector2.prototype.division = function (vector2) {
            var ret = new CubismVector2(0.0, 0.0);
            ret.x = this.x / vector2.x;
            ret.y = this.y / vector2.y;
            return ret;
        };
        /**
         * ベクトルの除算(スカラー)
         *
         * @param scalar 除算するスカラー値
         * @return 除算結果　ベクトル値
         */
        CubismVector2.prototype.divisionByScalar = function (scalar) {
            return this.division(new CubismVector2(scalar, scalar));
        };
        /**
         * ベクトルの長さを取得する
         *
         * @return ベクトルの長さ
         */
        CubismVector2.prototype.getLength = function () {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        };
        /**
         * ベクトルの距離の取得
         *
         * @param a 点
         * @return ベクトルの距離
         */
        CubismVector2.prototype.getDistanceWith = function (a) {
            return Math.sqrt(((this.x - a.x) * (this.x - a.x)) + ((this.y - a.y) * (this.y - a.y)));
        };
        /**
         * ドット積の計算
         *
         * @param a 値
         * @return 結果
         */
        CubismVector2.prototype.dot = function (a) {
            return (this.x * a.x) + (this.y * a.y);
        };
        /**
         * 正規化の適用
         */
        CubismVector2.prototype.normalize = function () {
            var length = Math.pow((this.x * this.x) + (this.y * this.y), 0.5);
            this.x = this.x / length;
            this.y = this.y / length;
        };
        /**
         * 等しさの確認（等しいか？）
         *
         * 値が等しいか？
         *
         * @param rhs 確認する値
         * @return true 値は等しい
         * @return false 値は等しくない
         */
        CubismVector2.prototype.isEqual = function (rhs) {
            return (this.x == rhs.x) && (this.y == rhs.y);
        };
        /**
         * 等しさの確認（等しくないか？）
         *
         * 値が等しくないか？
         *
         * @param rhs 確認する値
         * @return true 値は等しくない
         * @return false 値は等しい
         */
        CubismVector2.prototype.isNotEqual = function (rhs) {
            return !(this.isEqual(rhs));
        };
        return CubismVector2;
    }());
    Live2DCubismFramework.CubismVector2 = CubismVector2;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/model/cubismmoc.ts":
/*!**************************************!*\
  !*** ./Framework/model/cubismmoc.ts ***!
  \**************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _cubismmodel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cubismmodel */ "./Framework/model/cubismmodel.ts");
/* harmony import */ var _utils_cubismdebug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cubismdebug */ "./Framework/utils/cubismdebug.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */

var CubismModel = _cubismmodel__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismModel;

var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * Mocデータの管理
     *
     * Mocデータの管理を行うクラス。
     */
    var CubismMoc = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismMoc(moc) {
            this._moc = moc;
            this._modelCount = 0;
        }
        /**
         * Mocデータの作成
         */
        CubismMoc.create = function (mocBytes) {
            var cubismMoc = null;
            var moc = Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);
            if (moc) {
                cubismMoc = new CubismMoc(moc);
            }
            return cubismMoc;
        };
        /**
         * Mocデータを削除
         *
         * Mocデータを削除する
         */
        CubismMoc.delete = function (moc) {
            moc._moc._release();
            moc._moc = null;
            moc = null;
        };
        /**
         * モデルを作成する
         *
         * @return Mocデータから作成されたモデル
         */
        CubismMoc.prototype.createModel = function () {
            var cubismModel = null;
            var model = Live2DCubismCore.Model.fromMoc(this._moc);
            if (model) {
                cubismModel = new CubismModel(model);
                cubismModel.initialize();
                ++this._modelCount;
            }
            return cubismModel;
        };
        /**
         * モデルを削除する
         */
        CubismMoc.prototype.deleteModel = function (model) {
            if (model != null) {
                model.release();
                model = null;
                --this._modelCount;
            }
        };
        /**
         * デストラクタ相当の処理
         */
        CubismMoc.prototype.release = function () {
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_1__["CSM_ASSERT"])(this._modelCount == 0);
            this._moc._release();
            this._moc = null;
        };
        return CubismMoc;
    }());
    Live2DCubismFramework.CubismMoc = CubismMoc;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/model/cubismmodel.ts":
/*!****************************************!*\
  !*** ./Framework/model/cubismmodel.ts ***!
  \****************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _rendering_cubismrenderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../rendering/cubismrenderer */ "./Framework/rendering/cubismrenderer.ts");
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/* harmony import */ var _type_csmmap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../type/csmmap */ "./Framework/type/csmmap.ts");
/* harmony import */ var _type_csmvector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../type/csmvector */ "./Framework/type/csmvector.ts");
/* harmony import */ var _utils_cubismdebug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/cubismdebug */ "./Framework/utils/cubismdebug.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
/// <reference path="../../Core/live2dcubismcore" />





var CubismFramework = _live2dcubismframework__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismFramework;
var CubismBlendMode = _rendering_cubismrenderer__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismBlendMode;
var csmVector = _type_csmvector__WEBPACK_IMPORTED_MODULE_3__["Live2DCubismFramework"].csmVector;
var csmMap = _type_csmmap__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].csmMap;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * モデル
     *
     * Mocデータから生成されるモデルのクラス。
     */
    var CubismModel = /** @class */ (function () {
        /**
         * コンストラクタ
         * @param model モデル
         */
        function CubismModel(model) {
            this._model = model;
            this._parameterValues = null;
            this._parameterMaximumValues = null;
            this._parameterMinimumValues = null;
            this._partOpacities = null;
            this._savedParameters = new csmVector();
            this._parameterIds = new csmVector();
            this._drawableIds = new csmVector();
            this._partIds = new csmVector();
            this._notExistPartId = new csmMap();
            this._notExistParameterId = new csmMap();
            this._notExistParameterValues = new csmMap();
            this._notExistPartOpacities = new csmMap();
        }
        /**
         * モデルのパラメータの更新
         */
        CubismModel.prototype.update = function () {
            // Update model
            this._model.update();
            this._model.drawables.resetDynamicFlags();
        };
        /**
         * キャンバスの幅を取得する
         */
        CubismModel.prototype.getCanvasWidth = function () {
            if (this._model == null) {
                return 0.0;
            }
            return this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit;
        };
        /**
         * キャンバスの高さを取得する
         */
        CubismModel.prototype.getCanvasHeight = function () {
            if (this._model == null) {
                return 0.0;
            }
            return this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit;
        };
        /**
         * パラメータを保存する
         */
        CubismModel.prototype.saveParameters = function () {
            var parameterCount = this._model.parameters.count;
            var savedParameterCount = this._savedParameters.getSize();
            for (var i = 0; i < parameterCount; ++i) {
                if (i < savedParameterCount) {
                    this._savedParameters.set(i, this._parameterValues[i]);
                }
                else {
                    this._savedParameters.pushBack(this._parameterValues[i]);
                }
            }
        };
        /**
         * モデルを取得
         */
        CubismModel.prototype.getModel = function () {
            return this._model;
        };
        /**
         * パーツのインデックスを取得
         * @param partId パーツのID
         * @return パーツのインデックス
         */
        CubismModel.prototype.getPartIndex = function (partId) {
            var partIndex;
            var partCount = this._model.parts.count;
            for (partIndex = 0; partIndex < partCount; ++partIndex) {
                if (partId == this._partIds.at(partIndex)) {
                    return partIndex;
                }
            }
            // モデルに存在していない場合、非存在パーツIDリスト内にあるかを検索し、そのインデックスを返す
            if (this._notExistPartId.isExist(partId)) {
                return this._notExistPartId.getValue(partId);
            }
            // 非存在パーツIDリストにない場合、新しく要素を追加する
            partIndex = partCount + this._notExistPartId.getSize();
            this._notExistPartId.setValue(partId, partIndex);
            this._notExistPartOpacities.appendKey(partIndex);
            return partIndex;
        };
        /**
         * パーツの個数の取得
         * @return パーツの個数
         */
        CubismModel.prototype.getPartCount = function () {
            var partCount = this._model.parts.count;
            return partCount;
        };
        /**
         * パーツの不透明度の設定(Index)
         * @param partIndex パーツのインデックス
         * @param opacity 不透明度
         */
        CubismModel.prototype.setPartOpacityByIndex = function (partIndex, opacity) {
            if (this._notExistPartOpacities.isExist(partIndex)) {
                this._notExistPartOpacities.setValue(partIndex, opacity);
                return;
            }
            // インデックスの範囲内検知
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_4__["CSM_ASSERT"])(0 <= partIndex && partIndex < this.getPartCount());
            this._partOpacities[partIndex] = opacity;
        };
        /**
         * パーツの不透明度の設定(Id)
         * @param partId パーツのID
         * @param opacity パーツの不透明度
         */
        CubismModel.prototype.setPartOpacityById = function (partId, opacity) {
            // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要
            var index = this.getPartIndex(partId);
            if (index < 0) {
                return; // パーツがないのでスキップ
            }
            this.setPartOpacityByIndex(index, opacity);
        };
        /**
         * パーツの不透明度の取得(index)
         * @param partIndex パーツのインデックス
         * @return パーツの不透明度
         */
        CubismModel.prototype.getPartOpacityByIndex = function (partIndex) {
            if (this._notExistPartOpacities.isExist(partIndex)) {
                // モデルに存在しないパーツIDの場合、非存在パーツリストから不透明度を返す。
                return this._notExistPartOpacities.getValue(partIndex);
            }
            // インデックスの範囲内検知
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_4__["CSM_ASSERT"])(0 <= partIndex && partIndex < this.getPartCount());
            return this._partOpacities[partIndex];
        };
        /**
         * パーツの不透明度の取得(id)
         * @param partId パーツのＩｄ
         * @return パーツの不透明度
         */
        CubismModel.prototype.getPartOpacityById = function (partId) {
            // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要
            var index = this.getPartIndex(partId);
            if (index < 0) {
                return 0; // パーツが無いのでスキップ
            }
            return this.getPartOpacityByIndex(index);
        };
        /**
         * パラメータのインデックスの取得
         * @param パラメータID
         * @return パラメータのインデックス
         */
        CubismModel.prototype.getParameterIndex = function (parameterId) {
            var parameterIndex;
            var idCount = this._model.parameters.count;
            for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {
                if (parameterId != this._parameterIds.at(parameterIndex)) {
                    continue;
                }
                return parameterIndex;
            }
            // モデルに存在していない場合、非存在パラメータIDリスト内を検索し、そのインデックスを返す
            if (this._notExistParameterId.isExist(parameterId)) {
                return this._notExistParameterId.getValue(parameterId);
            }
            // 非存在パラメータIDリストにない場合新しく要素を追加する
            parameterIndex = this._model.parameters.count + this._notExistParameterId.getSize();
            this._notExistParameterId.setValue(parameterId, parameterIndex);
            this._notExistParameterValues.appendKey(parameterIndex);
            return parameterIndex;
        };
        /**
         * パラメータの個数の取得
         * @return パラメータの個数
         */
        CubismModel.prototype.getParameterCount = function () {
            return this._model.parameters.count;
        };
        /**
         * パラメータの最大値の取得
         * @param parameterIndex パラメータのインデックス
         * @return パラメータの最大値
         */
        CubismModel.prototype.getParameterMaximumValue = function (parameterIndex) {
            return this._model.parameters.maximumValues[parameterIndex];
        };
        /**
         * パラメータの最小値の取得
         * @param parameterIndex パラメータのインデックス
         * @return パラメータの最小値
         */
        CubismModel.prototype.getParameterMinimumValue = function (parameterIndex) {
            return this._model.parameters.minimumValues[parameterIndex];
        };
        /**
         * パラメータのデフォルト値の取得
         * @param parameterIndex パラメータのインデックス
         * @return パラメータのデフォルト値
         */
        CubismModel.prototype.getParameterDefaultValue = function (parameterIndex) {
            return this._model.parameters.defaultValues[parameterIndex];
        };
        /**
         * パラメータの値の取得
         * @param parameterIndex    パラメータのインデックス
         * @return パラメータの値
         */
        CubismModel.prototype.getParameterValueByIndex = function (parameterIndex) {
            if (this._notExistParameterValues.isExist(parameterIndex)) {
                return this._notExistParameterValues.getValue(parameterIndex);
            }
            // インデックスの範囲内検知
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_4__["CSM_ASSERT"])(0 <= parameterIndex && parameterIndex < this.getParameterCount());
            return this._parameterValues[parameterIndex];
        };
        /**
         * パラメータの値の取得
         * @param parameterId    パラメータのID
         * @return パラメータの値
         */
        CubismModel.prototype.getParameterValueById = function (parameterId) {
            // 高速化のためにparameterIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要
            var parameterIndex = this.getParameterIndex(parameterId);
            return this.getParameterValueByIndex(parameterIndex);
        };
        /**
         * パラメータの値の設定
         * @param parameterIndex パラメータのインデックス
         * @param value パラメータの値
         * @param weight 重み
         */
        CubismModel.prototype.setParameterValueByIndex = function (parameterIndex, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            if (this._notExistParameterValues.isExist(parameterIndex)) {
                this._notExistParameterValues.setValue(parameterIndex, (weight == 1)
                    ? value
                    : (this._notExistParameterValues.getValue(parameterIndex) * (1 - weight)) + (value * weight));
                return;
            }
            // インデックスの範囲内検知
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_4__["CSM_ASSERT"])(0 <= parameterIndex && parameterIndex < this.getParameterCount());
            if (this._model.parameters.maximumValues[parameterIndex] < value) {
                value = this._model.parameters.maximumValues[parameterIndex];
            }
            if (this._model.parameters.minimumValues[parameterIndex] > value) {
                value = this._model.parameters.minimumValues[parameterIndex];
            }
            this._parameterValues[parameterIndex] = (weight == 1)
                ? value
                : this._parameterValues[parameterIndex] = (this._parameterValues[parameterIndex] * (1 - weight)) + (value * weight);
        };
        /**
         * パラメータの値の設定
         * @param parameterId パラメータのID
         * @param value パラメータの値
         * @param weight 重み
         */
        CubismModel.prototype.setParameterValueById = function (parameterId, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            var index = this.getParameterIndex(parameterId);
            this.setParameterValueByIndex(index, value, weight);
        };
        /**
         * パラメータの値の加算(index)
         * @param parameterIndex パラメータインデックス
         * @param value 加算する値
         * @param weight 重み
         */
        CubismModel.prototype.addParameterValueByIndex = function (parameterIndex, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            this.setParameterValueByIndex(parameterIndex, (this.getParameterValueByIndex(parameterIndex) + (value * weight)));
        };
        /**
         * パラメータの値の加算(id)
         * @param parameterId パラメータＩＤ
         * @param value 加算する値
         * @param weight 重み
         */
        CubismModel.prototype.addParameterValueById = function (parameterId, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            var index = this.getParameterIndex(parameterId);
            this.addParameterValueByIndex(index, value, weight);
        };
        /**
         * パラメータの値の乗算
         * @param parameterId パラメータのID
         * @param value 乗算する値
         * @param weight 重み
         */
        CubismModel.prototype.multiplyParameterValueById = function (parameterId, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            var index = this.getParameterIndex(parameterId);
            this.multiplyParameterValueByIndex(index, value, weight);
        };
        /**
         * パラメータの値の乗算
         * @param parameterIndex パラメータのインデックス
         * @param value　乗算する値
         * @param weight 重み
         */
        CubismModel.prototype.multiplyParameterValueByIndex = function (parameterIndex, value, weight) {
            if (weight === void 0) { weight = 1.0; }
            this.setParameterValueByIndex(parameterIndex, (this.getParameterValueByIndex(parameterIndex) * (1.0 + (value - 1.0) * weight)));
        };
        /**
         * Drawableのインデックスの取得
         * @param drawableId DrawableのID
         * @return Drawableのインデックス
         */
        CubismModel.prototype.getDrawableIndex = function (drawableId) {
            var drawableCount = this._model.drawables.count;
            for (var drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {
                if (this._drawableIds.at(drawableIndex) == drawableId) {
                    return drawableIndex;
                }
            }
            return -1;
        };
        /**
         * Drawableの個数の取得
         * @return drawableの個数
         */
        CubismModel.prototype.getDrawableCount = function () {
            var drawableCount = this._model.drawables.count;
            return drawableCount;
        };
        /**
         * DrawableのIDを取得する
         * @param drawableIndex Drawableのインデックス
         * @return drawableのID
         */
        CubismModel.prototype.getDrawableId = function (drawableIndex) {
            var parameterIds = this._model.drawables.ids;
            return CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);
        };
        /**
         * Drawableの描画順リストの取得
         * @return Drawableの描画順リスト
         */
        CubismModel.prototype.getDrawableRenderOrders = function () {
            var renderOrders = this._model.drawables.renderOrders;
            return renderOrders;
        };
        /**
         * Drawableのテクスチャインデックスリストの取得
         * @param drawableIndex Drawableのインデックス
         * @return drawableのテクスチャインデックスリスト
         */
        CubismModel.prototype.getDrawableTextureIndices = function (drawableIndex) {
            var textureIndices = this._model.drawables.textureIndices;
            return textureIndices[drawableIndex];
        };
        /**
         * DrawableのVertexPositionsの変化情報の取得
         *
         * 直近のCubismModel.update関数でDrawableの頂点情報が変化したかを取得する。
         *
         * @param   drawableIndex   Drawableのインデックス
         * @retval  true    Drawableの頂点情報が直近のCubismModel.update関数で変化した
         * @retval  false   Drawableの頂点情報が直近のCubismModel.update関数で変化していない
         */
        CubismModel.prototype.getDrawableDynamicFlagVertexPositionsDidChange = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(dynamicFlags[drawableIndex]);
        };
        /**
         * Drawableの頂点インデックスの個数の取得
         * @param drawableIndex Drawableのインデックス
         * @return drawableの頂点インデックスの個数
         */
        CubismModel.prototype.getDrawableVertexIndexCount = function (drawableIndex) {
            var indexCounts = this._model.drawables.indexCounts;
            return indexCounts[drawableIndex];
        };
        /**
         * Drawableの頂点の個数の取得
         * @param drawableIndex Drawableのインデックス
         * @return drawableの頂点の個数
         */
        CubismModel.prototype.getDrawableVertexCount = function (drawableIndex) {
            var vertexCounts = this._model.drawables.vertexCounts;
            return vertexCounts[drawableIndex];
        };
        /**
         * Drawableの頂点リストの取得
         * @param drawableIndex drawableのインデックス
         * @return drawableの頂点リスト
         */
        CubismModel.prototype.getDrawableVertices = function (drawableIndex) {
            return this.getDrawableVertexPositions(drawableIndex);
        };
        /**
         * Drawableの頂点インデックスリストの取得
         * @param drarableIndex Drawableのインデックス
         * @return drawableの頂点インデックスリスト
         */
        CubismModel.prototype.getDrawableVertexIndices = function (drawableIndex) {
            var indicesArray = this._model.drawables.indices;
            return indicesArray[drawableIndex];
        };
        /**
         * Drawableの頂点リストの取得
         * @param drawableIndex Drawableのインデックス
         * @return drawableの頂点リスト
         */
        CubismModel.prototype.getDrawableVertexPositions = function (drawableIndex) {
            var verticesArray = this._model.drawables.vertexPositions;
            return verticesArray[drawableIndex];
        };
        /**
         * Drawableの頂点のUVリストの取得
         * @param drawableIndex Drawableのインデックス
         * @return drawableの頂点UVリスト
         */
        CubismModel.prototype.getDrawableVertexUvs = function (drawableIndex) {
            var uvsArray = this._model.drawables.vertexUvs;
            return uvsArray[drawableIndex];
        };
        /**
         * Drawableの不透明度の取得
         * @param drawableIndex Drawableのインデックス
         * @return drawableの不透明度
         */
        CubismModel.prototype.getDrawableOpacity = function (drawableIndex) {
            var opacities = this._model.drawables.opacities;
            return opacities[drawableIndex];
        };
        /**
         * Drawableのカリング情報の取得
         * @param drawableIndex Drawableのインデックス
         * @return drawableのカリング情報
         */
        CubismModel.prototype.getDrawableCulling = function (drawableIndex) {
            var constantFlags = this._model.drawables.constantFlags;
            return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(constantFlags[drawableIndex]);
        };
        /**
         * Drawableのブレンドモードを取得
         * @param drawableIndex Drawableのインデックス
         * @return drawableのブレンドモード
         */
        CubismModel.prototype.getDrawableBlendMode = function (drawableIndex) {
            var constantFlags = this._model.drawables.constantFlags;
            return (Live2DCubismCore.Utils.hasBlendAdditiveBit(constantFlags[drawableIndex]))
                ? CubismBlendMode.CubismBlendMode_Additive
                : (Live2DCubismCore.Utils.hasBlendMultiplicativeBit(constantFlags[drawableIndex]))
                    ? CubismBlendMode.CubismBlendMode_Multiplicative
                    : CubismBlendMode.CubismBlendMode_Normal;
        };
        /**
         * Drawableのクリッピングマスクリストの取得
         * @return Drawableのクリッピングマスクリスト
         */
        CubismModel.prototype.getDrawableMasks = function () {
            var masks = this._model.drawables.masks;
            return masks;
        };
        /**
         * Drawableのクリッピングマスクの個数リストの取得
         * @return Drawableのクリッピングマスクの個数リスト
         */
        CubismModel.prototype.getDrawableMaskCounts = function () {
            var maskCounts = this._model.drawables.maskCounts;
            return maskCounts;
        };
        /**
         * クリッピングマスクの使用状態
         *
         * @return true クリッピングマスクを使用している
         * @return false クリッピングマスクを使用していない
         */
        CubismModel.prototype.isUsingMasking = function () {
            for (var d = 0; d < this._model.drawables.count; ++d) {
                if (this._model.drawables.maskCounts[d] <= 0) {
                    continue;
                }
                return true;
            }
            return false;
        };
        /**
         * Drawableの表示情報を取得する
         *
         * @param drawableIndex Drawableのインデックス
         * @return true Drawableが表示
         * @return false Drawableが非表示
         */
        CubismModel.prototype.getDrawableDynamicFlagIsVisible = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);
        };
        /**
         * DrawableのDrawOrderの変化情報の取得
         *
         * 直近のCubismModel.update関数でdrawableのdrawOrderが変化したかを取得する。
         * drawOrderはartMesh上で指定する0から1000の情報
         * @param drawableIndex drawableのインデックス
         * @return true drawableの不透明度が直近のCubismModel.update関数で変化した
         * @return false drawableの不透明度が直近のCubismModel.update関数で変化している
         */
        CubismModel.prototype.getDrawableDynamicFlagVisibilityDidChange = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(dynamicFlags[drawableIndex]);
        };
        /**
         * Drawableの不透明度の変化情報の取得
         *
         * 直近のCubismModel.update関数でdrawableの不透明度が変化したかを取得する。
         *
         * @param drawableIndex drawableのインデックス
         * @return true Drawableの不透明度が直近のCubismModel.update関数で変化した
         * @return false Drawableの不透明度が直近のCubismModel.update関数で変化してない
         */
        CubismModel.prototype.getDrawableDynamicFlagOpacityDidChange = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasOpacityDidChangeBit(dynamicFlags[drawableIndex]);
        };
        /**
         * Drawableの描画順序の変化情報の取得
         *
         * 直近のCubismModel.update関数でDrawableの描画の順序が変化したかを取得する。
         *
         * @param drawableIndex Drawableのインデックス
         * @return true Drawableの描画の順序が直近のCubismModel.update関数で変化した
         * @return false Drawableの描画の順序が直近のCubismModel.update関数で変化してない
         */
        CubismModel.prototype.getDrawableDynamicFlagRenderOrderDidChange = function (drawableIndex) {
            var dynamicFlags = this._model.drawables.dynamicFlags;
            return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(dynamicFlags[drawableIndex]);
        };
        /**
         * 保存されたパラメータの読み込み
         */
        CubismModel.prototype.loadParameters = function () {
            var parameterCount = this._model.parameters.count;
            var savedParameterCount = this._savedParameters.getSize();
            if (parameterCount > savedParameterCount) {
                parameterCount = savedParameterCount;
            }
            for (var i = 0; i < parameterCount; ++i) {
                this._parameterValues[i] = this._savedParameters.at(i);
            }
        };
        /**
         * 初期化する
         */
        CubismModel.prototype.initialize = function () {
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_4__["CSM_ASSERT"])(this._model);
            this._parameterValues = this._model.parameters.values;
            this._partOpacities = this._model.parts.opacities;
            this._parameterMaximumValues = this._model.parameters.maximumValues;
            this._parameterMinimumValues = this._model.parameters.minimumValues;
            {
                var parameterIds = this._model.parameters.ids;
                var parameterCount = this._model.parameters.count;
                for (var i = 0; i < parameterCount; ++i) {
                    this._parameterIds.pushBack(CubismFramework.getIdManager().getId(parameterIds[i]));
                }
            }
            {
                var partIds = this._model.parts.ids;
                var partCount = this._model.parts.count;
                for (var i = 0; i < partCount; ++i) {
                    this._partIds.pushBack(CubismFramework.getIdManager().getId(partIds[i]));
                }
            }
            {
                var drawableIds = this._model.drawables.ids;
                var drawableCount = this._model.drawables.count;
                for (var i = 0; i < drawableCount; ++i) {
                    this._drawableIds.pushBack(CubismFramework.getIdManager().getId(drawableIds[i]));
                }
            }
        };
        /**
         * デストラクタ相当の処理
         */
        CubismModel.prototype.release = function () {
            this._model.release();
            this._model = null;
        };
        return CubismModel;
    }());
    Live2DCubismFramework.CubismModel = CubismModel;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/model/cubismmodeluserdata.ts":
/*!************************************************!*\
  !*** ./Framework/model/cubismmodeluserdata.ts ***!
  \************************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _cubismmodeluserdatajson__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cubismmodeluserdatajson */ "./Framework/model/cubismmodeluserdatajson.ts");
/* harmony import */ var _type_csmstring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../type/csmstring */ "./Framework/type/csmstring.ts");
/* harmony import */ var _type_csmvector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../type/csmvector */ "./Framework/type/csmvector.ts");
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/*
* Copyright(c) Live2D Inc. All rights reserved.
*
* Use of this source code is governed by the Live2D Open Software license
* that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
*/




var CubismFramework = _live2dcubismframework__WEBPACK_IMPORTED_MODULE_3__["Live2DCubismFramework"].CubismFramework;
var csmVector = _type_csmvector__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].csmVector;
var csmString = _type_csmstring__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].csmString;
var CubismModelUserDataJson = _cubismmodeluserdatajson__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismModelUserDataJson;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var ArtMesh = "ArtMesh";
    /**
     * ユーザーデータインターフェース
     *
     * Jsonから読み込んだユーザーデータを記録しておくための構造体
     */
    var CubismModelUserDataNode = /** @class */ (function () {
        function CubismModelUserDataNode() {
        }
        return CubismModelUserDataNode;
    }());
    Live2DCubismFramework.CubismModelUserDataNode = CubismModelUserDataNode;
    /**
     * ユーザデータの管理クラス
     *
     * ユーザデータをロード、管理、検索インターフェイス、解放までを行う。
     */
    var CubismModelUserData = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismModelUserData() {
            this._userDataNodes = new csmVector();
            this._artMeshUserDataNode = new csmVector();
        }
        /**
         * インスタンスの作成
         *
         * @param buffer    userdata3.jsonが読み込まれているバッファ
         * @param size      バッファのサイズ
         * @return 作成されたインスタンス
         */
        CubismModelUserData.create = function (buffer, size) {
            var ret = new CubismModelUserData();
            ret.parseUserData(buffer, size);
            return ret;
        };
        /**
         * インスタンスを破棄する
         *
         * @param modelUserData 破棄するインスタンス
         */
        CubismModelUserData.delete = function (modelUserData) {
            if (modelUserData != null) {
                modelUserData.release();
                modelUserData = null;
            }
        };
        /**
         * ArtMeshのユーザーデータのリストの取得
         *
         * @return ユーザーデータリスト
         */
        CubismModelUserData.prototype.getArtMeshUserDatas = function () {
            return this._artMeshUserDataNode;
        };
        /**
         * userdata3.jsonのパース
         *
         * @param buffer    userdata3.jsonが読み込まれているバッファ
         * @param size      バッファのサイズ
         */
        CubismModelUserData.prototype.parseUserData = function (buffer, size) {
            var json = new CubismModelUserDataJson(buffer, size);
            var typeOfArtMesh = CubismFramework.getIdManager().getId(ArtMesh);
            var nodeCount = json.getUserDataCount();
            for (var i = 0; i < nodeCount; i++) {
                var addNode = new CubismModelUserDataNode();
                addNode.targetId = json.getUserDataId(i);
                addNode.targetType = CubismFramework.getIdManager().getId(json.getUserDataTargetType(i));
                addNode.value = new csmString(json.getUserDataValue(i));
                this._userDataNodes.pushBack(addNode);
                if (addNode.targetType == typeOfArtMesh) {
                    this._artMeshUserDataNode.pushBack(addNode);
                }
            }
            json.release();
            json = void 0;
        };
        /**
         * デストラクタ相当の処理
         *
         * ユーザーデータ構造体配列を解放する
         */
        CubismModelUserData.prototype.release = function () {
            for (var i = 0; i < this._userDataNodes.getSize(); ++i) {
                this._userDataNodes.set(i, null);
            }
            this._userDataNodes = null;
        };
        return CubismModelUserData;
    }());
    Live2DCubismFramework.CubismModelUserData = CubismModelUserData;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/model/cubismmodeluserdatajson.ts":
/*!****************************************************!*\
  !*** ./Framework/model/cubismmodeluserdatajson.ts ***!
  \****************************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _utils_cubismjson__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cubismjson */ "./Framework/utils/cubismjson.ts");
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */


var CubismFramework = _live2dcubismframework__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismFramework;
var CubismJson = _utils_cubismjson__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismJson;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var Meta = "Meta";
    var UserDataCount = "UserDataCount";
    var TotalUserDataSize = "TotalUserDataSize";
    var UserData = "UserData";
    var Target = "Target";
    var Id = "Id";
    var Value = "Value";
    var CubismModelUserDataJson = /** @class */ (function () {
        /**
         * コンストラクタ
         * @param buffer    userdata3.jsonが読み込まれているバッファ
         * @param size      バッファのサイズ
         */
        function CubismModelUserDataJson(buffer, size) {
            this._json = CubismJson.create(buffer, size);
        }
        /**
         * デストラクタ相当の処理
         */
        CubismModelUserDataJson.prototype.release = function () {
            CubismJson.delete(this._json);
        };
        /**
         * ユーザーデータ個数の取得
         * @return ユーザーデータの個数
         */
        CubismModelUserDataJson.prototype.getUserDataCount = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(UserDataCount).toInt();
        };
        /**
         * ユーザーデータ総文字列数の取得
         *
         * @return ユーザーデータ総文字列数
         */
        CubismModelUserDataJson.prototype.getTotalUserDataSize = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(TotalUserDataSize).toInt();
        };
        /**
         * ユーザーデータのタイプの取得
         *
         * @return ユーザーデータのタイプ
         */
        CubismModelUserDataJson.prototype.getUserDataTargetType = function (i) {
            return this._json.getRoot().getMap().getValue(UserData).getVector().at(i).getMap().getValue(Target).getRawString();
        };
        /**
         * ユーザーデータのターゲットIDの取得
         *
         * @param i インデックス
         * @return ユーザーデータターゲットID
         */
        CubismModelUserDataJson.prototype.getUserDataId = function (i) {
            return CubismFramework.getIdManager().getId(this._json.getRoot().getMap().getValue(UserData).getVector().at(i).getMap().getValue(Id).getRawString());
        };
        /**
         * ユーザーデータの文字列の取得
         *
         * @param i インデックス
         * @return ユーザーデータ
         */
        CubismModelUserDataJson.prototype.getUserDataValue = function (i) {
            return this._json.getRoot().getMap().getValue(UserData).getVector().at(i).getMap().getValue(Value).getRawString();
        };
        return CubismModelUserDataJson;
    }());
    Live2DCubismFramework.CubismModelUserDataJson = CubismModelUserDataJson;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/model/cubismusermodel.ts":
/*!********************************************!*\
  !*** ./Framework/model/cubismusermodel.ts ***!
  \********************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/* harmony import */ var _motion_cubismmotionmanager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../motion/cubismmotionmanager */ "./Framework/motion/cubismmotionmanager.ts");
/* harmony import */ var _math_cubismtargetpoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/cubismtargetpoint */ "./Framework/math/cubismtargetpoint.ts");
/* harmony import */ var _math_cubismmodelmatrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/cubismmodelmatrix */ "./Framework/math/cubismmodelmatrix.ts");
/* harmony import */ var _cubismmoc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cubismmoc */ "./Framework/model/cubismmoc.ts");
/* harmony import */ var _motion_cubismmotion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../motion/cubismmotion */ "./Framework/motion/cubismmotion.ts");
/* harmony import */ var _motion_cubismexpressionmotion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../motion/cubismexpressionmotion */ "./Framework/motion/cubismexpressionmotion.ts");
/* harmony import */ var _effect_cubismpose__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../effect/cubismpose */ "./Framework/effect/cubismpose.ts");
/* harmony import */ var _cubismmodeluserdata__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cubismmodeluserdata */ "./Framework/model/cubismmodeluserdata.ts");
/* harmony import */ var _physics_cubismphysics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../physics/cubismphysics */ "./Framework/physics/cubismphysics.ts");
/* harmony import */ var _effect_cubismbreath__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../effect/cubismbreath */ "./Framework/effect/cubismbreath.ts");
/* harmony import */ var _effect_cubismeyeblink__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../effect/cubismeyeblink */ "./Framework/effect/cubismeyeblink.ts");
/* harmony import */ var _rendering_cubismrenderer_WebGL__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../rendering/cubismrenderer_WebGL */ "./Framework/rendering/cubismrenderer_WebGL.ts");
/* harmony import */ var _utils_cubismdebug__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/cubismdebug */ "./Framework/utils/cubismdebug.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */














var CubismRenderer_WebGL = _rendering_cubismrenderer_WebGL__WEBPACK_IMPORTED_MODULE_12__["Live2DCubismFramework"].CubismRenderer_WebGL;
var CubismEyeBlink = _effect_cubismeyeblink__WEBPACK_IMPORTED_MODULE_11__["Live2DCubismFramework"].CubismEyeBlink;
var CubismBreath = _effect_cubismbreath__WEBPACK_IMPORTED_MODULE_10__["Live2DCubismFramework"].CubismBreath;
var Constant = _live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].Constant;
var CubismPhysics = _physics_cubismphysics__WEBPACK_IMPORTED_MODULE_9__["Live2DCubismFramework"].CubismPhysics;
var CubismModelUserData = _cubismmodeluserdata__WEBPACK_IMPORTED_MODULE_8__["Live2DCubismFramework"].CubismModelUserData;
var CubismPose = _effect_cubismpose__WEBPACK_IMPORTED_MODULE_7__["Live2DCubismFramework"].CubismPose;
var CubismExpressionMotion = _motion_cubismexpressionmotion__WEBPACK_IMPORTED_MODULE_6__["Live2DCubismFramework"].CubismExpressionMotion;
var CubismMotion = _motion_cubismmotion__WEBPACK_IMPORTED_MODULE_5__["Live2DCubismFramework"].CubismMotion;
var CubismMoc = _cubismmoc__WEBPACK_IMPORTED_MODULE_4__["Live2DCubismFramework"].CubismMoc;
var CubismModelMatrix = _math_cubismmodelmatrix__WEBPACK_IMPORTED_MODULE_3__["Live2DCubismFramework"].CubismModelMatrix;
var CubismTargetPoint = _math_cubismtargetpoint__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].CubismTargetPoint;
var CubismMotionManager = _motion_cubismmotionmanager__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismMotionManager;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * ユーザーが実際に使用するモデル
     *
     * ユーザーが実際に使用するモデルの基底クラス。これを継承してユーザーが実装する。
     */
    var CubismUserModel = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismUserModel() {
            // 各変数初期化
            this._moc = null;
            this._model = null;
            this._motionManager = null;
            this._expressionManager = null;
            this._eyeBlink = null;
            this._breath = null;
            this._modelMatrix = null;
            this._pose = null;
            this._dragManager = null;
            this._physics = null;
            this._modelUserData = null;
            this._initialized = false;
            this._updating = false;
            this._opacity = 1.0;
            this._lipsync = true;
            this._lastLipSyncValue = 0.0;
            this._dragX = 0.0;
            this._dragY = 0.0;
            this._accelerationX = 0.0;
            this._accelerationY = 0.0;
            this._accelerationZ = 0.0;
            this._debugMode = false;
            this._renderer = null;
            // モーションマネージャーを作成
            this._motionManager = new CubismMotionManager();
            this._motionManager.setEventCallback(CubismUserModel.cubismDefaultMotionEventCallback, this);
            // 表情マネージャーを作成
            this._expressionManager = new CubismMotionManager();
            // ドラッグによるアニメーション
            this._dragManager = new CubismTargetPoint();
        }
        /**
         * 初期化状態の取得
         *
         * 初期化されている状態か？
         *
         * @return true     初期化されている
         * @return false    初期化されていない
         */
        CubismUserModel.prototype.isInitialized = function () {
            return this._initialized;
        };
        /**
         * 初期化状態の設定
         *
         * 初期化状態を設定する。
         *
         * @param v 初期化状態
         */
        CubismUserModel.prototype.setInitialized = function (v) {
            this._initialized = v;
        };
        /**
         * 更新状態の取得
         *
         * 更新されている状態か？
         *
         * @return true     更新されている
         * @return false    更新されていない
         */
        CubismUserModel.prototype.isUpdating = function () {
            return this._updating;
        };
        /**
         * 更新状態の設定
         *
         * 更新状態を設定する
         *
         * @param v 更新状態
         */
        CubismUserModel.prototype.setUpdating = function (v) {
            this._updating = v;
        };
        /**
         * マウスドラッグ情報の設定
         * @param ドラッグしているカーソルのX位置
         * @param ドラッグしているカーソルのY位置
         */
        CubismUserModel.prototype.setDragging = function (x, y) {
            this._dragManager.set(x, y);
        };
        /**
         * 加速度の情報を設定する
         * @param x X軸方向の加速度
         * @param y Y軸方向の加速度
         * @param z Z軸方向の加速度
         */
        CubismUserModel.prototype.setAcceleration = function (x, y, z) {
            this._accelerationX = x;
            this._accelerationY = y;
            this._accelerationZ = z;
        };
        /**
         * モデル行列を取得する
         * @return モデル行列
         */
        CubismUserModel.prototype.getModelMatrix = function () {
            return this._modelMatrix;
        };
        /**
         * 不透明度の設定
         * @param a 不透明度
         */
        CubismUserModel.prototype.setOpacity = function (a) {
            this._opacity = a;
        };
        /**
         * 不透明度の取得
         * @return 不透明度
         */
        CubismUserModel.prototype.getOpacity = function () {
            return this._opacity;
        };
        /**
         * モデルデータを読み込む
         *
         * @param buffer    moc3ファイルが読み込まれているバッファ
         */
        CubismUserModel.prototype.loadModel = function (buffer) {
            this._moc = CubismMoc.create(buffer);
            this._model = this._moc.createModel();
            this._model.saveParameters();
            if ((this._moc == null) || (this._model == null)) {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_13__["CubismLogError"])("Failed to CreateModel().");
                return;
            }
            this._modelMatrix = new CubismModelMatrix(this._model.getCanvasWidth(), this._model.getCanvasHeight());
        };
        /**
         * モーションデータを読み込む
         * @param buffer motion3.jsonファイルが読み込まれているバッファ
         * @param size バッファのサイズ
         * @param name モーションの名前
         * @return モーションクラス
         */
        CubismUserModel.prototype.loadMotion = function (buffer, size, name) {
            return CubismMotion.create(buffer, size);
        };
        /**
         * 表情データの読み込み
         * @param buffer expファイルが読み込まれているバッファ
         * @param size バッファのサイズ
         * @param name 表情の名前
         */
        CubismUserModel.prototype.loadExpression = function (buffer, size, name) {
            return CubismExpressionMotion.create(buffer, size);
        };
        /**
         * ポーズデータの読み込み
         * @param buffer pose3.jsonが読み込まれているバッファ
         * @param size バッファのサイズ
         */
        CubismUserModel.prototype.loadPose = function (buffer, size) {
            this._pose = CubismPose.create(buffer, size);
        };
        /**
         * モデルに付属するユーザーデータを読み込む
         * @param buffer userdata3.jsonが読み込まれているバッファ
         * @param size バッファのサイズ
         */
        CubismUserModel.prototype.loadUserData = function (buffer, size) {
            this._modelUserData = CubismModelUserData.create(buffer, size);
        };
        /**
         * 物理演算データの読み込み
         * @param buffer  physics3.jsonが読み込まれているバッファ
         * @param size    バッファのサイズ
         */
        CubismUserModel.prototype.loadPhysics = function (buffer, size) {
            this._physics = CubismPhysics.create(buffer, size);
        };
        /**
         * 当たり判定の取得
         * @param drawableId 検証したいDrawableのID
         * @param pointX X位置
         * @param pointY Y位置
         * @return true ヒットしている
         * @return false ヒットしていない
         */
        CubismUserModel.prototype.isHit = function (drawableId, pointX, pointY) {
            var drawIndex = this._model.getDrawableIndex(drawableId);
            if (drawIndex < 0) {
                return false; // 存在しない場合はfalse
            }
            var count = this._model.getDrawableVertexCount(drawIndex);
            var vertices = this._model.getDrawableVertices(drawIndex);
            var left = vertices[0];
            var right = vertices[0];
            var top = vertices[1];
            var bottom = vertices[1];
            for (var j = 1; j < count; ++j) {
                var x = vertices[Constant.vertexOffset + j * Constant.vertexStep];
                var y = vertices[Constant.vertexOffset + j * Constant.vertexStep + 1];
                if (x < left) {
                    left = x; // Min x
                }
                if (x > right) {
                    right = x; // Max x
                }
                if (y < top) {
                    top = y; // Min y
                }
                if (y > bottom) {
                    bottom = y; // Max y
                }
            }
            var tx = this._modelMatrix.invertTransformX(pointX);
            var ty = this._modelMatrix.invertTransformY(pointY);
            return ((left <= tx) && (tx <= right) && (top <= ty) && (ty <= bottom));
        };
        /**
         * モデルの取得
         * @return モデル
         */
        CubismUserModel.prototype.getModel = function () {
            return this._model;
        };
        /**
         * レンダラの取得
         * @return レンダラ
         */
        CubismUserModel.prototype.getRenderer = function () {
            return this._renderer;
        };
        /**
         * レンダラを作成して初期化を実行する
         */
        CubismUserModel.prototype.createRenderer = function () {
            if (this._renderer) {
                this.deleteRenderer();
            }
            this._renderer = new CubismRenderer_WebGL();
            this._renderer.initialize(this._model);
        };
        /**
         * レンダラの解放
         */
        CubismUserModel.prototype.deleteRenderer = function () {
            if (this._renderer != null) {
                this._renderer.release();
                this._renderer = null;
            }
        };
        /**
         * イベント発火時の標準処理
         *
         * Eventが再生処理時にあった場合の処理をする。
         * 継承で上書きすることを想定している。
         * 上書きしない場合はログ出力をする。
         *
         * @param eventValue 発火したイベントの文字列データ
         */
        CubismUserModel.prototype.motionEventFired = function (eventValue) {
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_13__["CubismLogInfo"])("{0}", eventValue.s);
        };
        /**
         * イベント用のコールバック
         *
         * CubismMotionQueueManagerにイベント用に登録するためのCallback。
         * CubismUserModelの継承先のEventFiredを呼ぶ。
         *
         * @param caller 発火したイベントを管理していたモーションマネージャー、比較用
         * @param eventValue 発火したイベントの文字列データ
         * @param customData CubismUserModelを継承したインスタンスを想定
         */
        CubismUserModel.cubismDefaultMotionEventCallback = function (caller, eventValue, customData) {
            var model = customData;
            if (model != null) {
                model.motionEventFired(eventValue);
            }
        };
        /**
         * デストラクタに相当する処理
         */
        CubismUserModel.prototype.release = function () {
            if (this._motionManager != null) {
                this._motionManager.release();
                this._motionManager = null;
            }
            if (this._expressionManager != null) {
                this._expressionManager.release();
                this._expressionManager = null;
            }
            if (this._moc != null) {
                this._moc.deleteModel(this._model);
                this._moc.release();
                this._moc = null;
            }
            this._modelMatrix = null;
            CubismPose.delete(this._pose);
            CubismEyeBlink.delete(this._eyeBlink);
            CubismBreath.delete(this._breath);
            this._dragManager = null;
            CubismPhysics.delete(this._physics);
            CubismModelUserData.delete(this._modelUserData);
            this.deleteRenderer();
        };
        return CubismUserModel;
    }());
    Live2DCubismFramework.CubismUserModel = CubismUserModel;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/motion/acubismmotion.ts":
/*!*******************************************!*\
  !*** ./Framework/motion/acubismmotion.ts ***!
  \*******************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _math_cubismmath__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/cubismmath */ "./Framework/math/cubismmath.ts");
/* harmony import */ var _type_csmvector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../type/csmvector */ "./Framework/type/csmvector.ts");
/* harmony import */ var _utils_cubismdebug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cubismdebug */ "./Framework/utils/cubismdebug.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */



var csmVector = _type_csmvector__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].csmVector;
var CubismMath = _math_cubismmath__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismMath;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * モーションの抽象基底クラス
     *
     * モーションの抽象基底クラス。MotionQueueManagerによってモーションの再生を管理する。
     */
    var ACubismMotion = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function ACubismMotion() {
            this._fadeInSeconds = -1.0;
            this._fadeOutSeconds = -1.0;
            this._weight = 1.0;
            this._offsetSeconds = 0.0; // 再生の開始時刻
            this._firedEventValues = new csmVector();
        }
        /**
         * インスタンスの破棄
         */
        ACubismMotion.delete = function (motion) {
            motion.release();
            motion = void 0;
            motion = null;
        };
        /**
         * デストラクタ相当の処理
         */
        ACubismMotion.prototype.release = function () {
            this._weight = 0.0;
        };
        /**
         * モデルのパラメータ
         * @param model 対象のモデル
         * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション
         * @param userTimeSeconds デルタ時間の積算値[秒]
         */
        ACubismMotion.prototype.updateParameters = function (model, motionQueueEntry, userTimeSeconds) {
            if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {
                return;
            }
            if (!motionQueueEntry.isStarted()) {
                motionQueueEntry.setIsStarted(true);
                motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds); // モーションの開始時刻を記録
                motionQueueEntry.setFadeInStartTime(userTimeSeconds); // フェードインの開始時刻
                var duration = this.getDuration();
                if (motionQueueEntry.getEndTime() < 0) {
                    // 開始していないうちに終了設定している場合がある。
                    motionQueueEntry.setEndTime((duration <= 0) ? -1 : motionQueueEntry.getStartTime() + duration);
                    // duration == -1 の場合はループする
                }
            }
            var fadeWeight = this._weight; // 現在の値と掛け合わせる割合
            //---- フェードイン・アウトの処理 ----
            // 単純なサイン関数でイージングする
            var fadeIn = this._fadeInSeconds == 0.0
                ? 1.0
                : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / this._fadeInSeconds);
            var fadeOut = (this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0)
                ? 1.0
                : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / this._fadeOutSeconds);
            fadeWeight = fadeWeight * fadeIn * fadeOut;
            motionQueueEntry.setState(userTimeSeconds, fadeWeight);
            Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_2__["CSM_ASSERT"])(0.0 <= fadeWeight && fadeWeight <= 1.0);
            //---- 全てのパラメータIDをループする ----
            this.doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry);
            // 後処理
            // 終了時刻を過ぎたら終了フラグを立てる(CubismMotionQueueManager)
            if ((motionQueueEntry.getEndTime() > 0) && (motionQueueEntry.getEndTime() < userTimeSeconds)) {
                motionQueueEntry.setIsFinished(true); // 終了
            }
        };
        /**
         * フェードインの時間を設定する
         * @param fadeInSeconds フェードインにかかる時間[秒]
         */
        ACubismMotion.prototype.setFadeInTime = function (fadeInSeconds) {
            this._fadeInSeconds = fadeInSeconds;
        };
        /**
         * フェードアウトの時間を設定する
         * @param fadeOutSeconds フェードアウトにかかる時間[秒]
         */
        ACubismMotion.prototype.setFadeOutTime = function (fadeOutSeconds) {
            this._fadeOutSeconds = fadeOutSeconds;
        };
        /**
         * フェードアウトにかかる時間の取得
         * @return フェードアウトにかかる時間[秒]
         */
        ACubismMotion.prototype.getFadeOutTime = function () {
            return this._fadeOutSeconds;
        };
        /**
         * フェードインにかかる時間の取得
         * @return フェードインにかかる時間[秒]
         */
        ACubismMotion.prototype.getFadeInTime = function () {
            return this._fadeInSeconds;
        };
        /**
         * モーション適用の重みの設定
         * @param weight 重み（0.0 - 1.0）
         */
        ACubismMotion.prototype.setWeight = function (weight) {
            this._weight = weight;
        };
        /**
         * モーション適用の重みの取得
         * @return 重み（0.0 - 1.0）
         */
        ACubismMotion.prototype.getWeight = function () {
            return this._weight;
        };
        /**
         * モーションの長さの取得
         * @return モーションの長さ[秒]
         *
         * @note ループの時は「-1」。
         *       ループでない場合は、オーバーライドする。
         *       正の値の時は取得される時間で終了する。
         *       「-1」の時は外部から停止命令がない限り終わらない処理となる。
         */
        ACubismMotion.prototype.getDuration = function () {
            return -1.0;
        };
        /**
         * モーションのループ1回分の長さの取得
         * @return モーションのループ一回分の長さ[秒]
         *
         * @note ループしない場合は、getDuration()と同じ値を返す
         *       ループ一回分の長さが定義できない場合(プログラム的に動き続けるサブクラスなど)の場合は「-1」を返す
         */
        ACubismMotion.prototype.getLoopDuration = function () {
            return -1.0;
        };
        /**
         * モーション再生の開始時刻の設定
         * @param offsetSeconds モーション再生の開始時刻[秒]
         */
        ACubismMotion.prototype.setOffsetTime = function (offsetSeconds) {
            this._offsetSeconds = offsetSeconds;
        };
        /**
         * モデルのパラメータ更新
         *
         * イベント発火のチェック。
         * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。
         *
         * @param beforeCheckTimeSeconds 前回のイベントチェック時間[秒]
         * @param motionTimeSeconds 今回の再生時間[秒]
         */
        ACubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {
            return this._firedEventValues;
        };
        return ACubismMotion;
    }());
    Live2DCubismFramework.ACubismMotion = ACubismMotion;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/motion/cubismexpressionmotion.ts":
/*!****************************************************!*\
  !*** ./Framework/motion/cubismexpressionmotion.ts ***!
  \****************************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _acubismmotion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./acubismmotion */ "./Framework/motion/acubismmotion.ts");
/* harmony import */ var _utils_cubismjson__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cubismjson */ "./Framework/utils/cubismjson.ts");
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/* harmony import */ var _type_csmvector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../type/csmvector */ "./Framework/type/csmvector.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var JsonFloat = _utils_cubismjson__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].JsonFloat;
var csmVector = _type_csmvector__WEBPACK_IMPORTED_MODULE_3__["Live2DCubismFramework"].csmVector;
var CubismFramework = _live2dcubismframework__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].CubismFramework;
var CubismJson = _utils_cubismjson__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismJson;
var ACubismMotion = _acubismmotion__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].ACubismMotion;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    // exp3.jsonのキーとデフォルト
    var ExpressionKeyFadeIn = "FadeInTime";
    var ExpressionKeyFadeOut = "FadeOutTime";
    var ExpressionKeyParameters = "Parameters";
    var ExpressionKeyId = "Id";
    var ExpressionKeyValue = "Value";
    var ExpressionKeyBlend = "Blend";
    var BlendValueAdd = "Add";
    var BlendValueMultiply = "Multiply";
    var BlendValueOverwrite = "Overwrite";
    var DefaultFadeTime = 1.0;
    /**
     * 表情のモーション
     *
     * 表情のモーションクラス。
     */
    var CubismExpressionMotion = /** @class */ (function (_super) {
        __extends(CubismExpressionMotion, _super);
        /**
         * コンストラクタ
         */
        function CubismExpressionMotion() {
            var _this = _super.call(this) || this;
            _this._parameters = new csmVector();
            return _this;
        }
        /**
         * インスタンスを作成する。
         * @param buffer expファイルが読み込まれているバッファ
         * @param size バッファのサイズ
         * @return 作成されたインスタンス
         */
        CubismExpressionMotion.create = function (buffer, size) {
            var expression = new CubismExpressionMotion();
            var json = CubismJson.create(buffer, size);
            var root = json.getRoot();
            // typescriptではnullを許容していないため仮の値を入れる
            if (root.getMap().getValue(ExpressionKeyFadeIn) == null) {
                root.getMap().setValue(ExpressionKeyFadeIn, new JsonFloat(DefaultFadeTime));
            }
            if (root.getMap().getValue(ExpressionKeyFadeOut) == null) {
                root.getMap().setValue(ExpressionKeyFadeOut, new JsonFloat(DefaultFadeTime));
            }
            expression.setFadeInTime(root.getMap().getValue(ExpressionKeyFadeIn).toFloat(DefaultFadeTime)); // フェードイン
            expression.setFadeOutTime(root.getMap().getValue(ExpressionKeyFadeOut).toFloat(DefaultFadeTime)); // フェードアウト
            // 各パラメータについて
            var parameterCount = root.getMap().getValue(ExpressionKeyParameters).getSize();
            for (var i = 0; i < parameterCount; ++i) {
                var param = root.getMap().getValue(ExpressionKeyParameters).getVector().at(i);
                var parameterId = CubismFramework.getIdManager().getId(param.getMap().getValue(ExpressionKeyId).getRawString()); // パラメータID
                var value = param.getMap().getValue(ExpressionKeyValue).toFloat(); // 値
                // 計算方法の設定
                var blendType = void 0;
                if (param.getMap().getValue(ExpressionKeyBlend).isNull() || param.getMap().getValue(ExpressionKeyBlend).getString() == BlendValueAdd) {
                    blendType = ExpressionBlendType.ExpressionBlendType_Add;
                }
                else if (param.getMap().getValue(ExpressionKeyBlend).getString() == BlendValueMultiply) {
                    blendType = ExpressionBlendType.ExpressionBlendType_Multiply;
                }
                else if (param.getMap().getValue(ExpressionKeyBlend).getString() == BlendValueOverwrite) {
                    blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;
                }
                else {
                    // その他 仕様にない値を設定した時は加算モードにすることで復旧
                    blendType = ExpressionBlendType.ExpressionBlendType_Add;
                }
                // 設定オブジェクトを作成してリストに追加する
                var item = new ExpressionParameter();
                item.parameterId = parameterId;
                item.blendType = blendType;
                item.value = value;
                expression._parameters.pushBack(item);
            }
            CubismJson.delete(json); // JSONデータは不要になったら削除する
            return expression;
        };
        /**
         * モデルのパラメータの更新の実行
         * @param model 対象のモデル
         * @param userTimeSeconds デルタ時間の積算値[秒]
         * @param weight モーションの重み
         * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション
         */
        CubismExpressionMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, weight, motionQueueEntry) {
            for (var i = 0; i < this._parameters.getSize(); ++i) {
                var parameter = this._parameters.at(i);
                switch (parameter.blendType) {
                    case ExpressionBlendType.ExpressionBlendType_Add:
                        {
                            model.addParameterValueById(parameter.parameterId, parameter.value, weight);
                            break;
                        }
                    case ExpressionBlendType.ExpressionBlendType_Multiply:
                        {
                            model.multiplyParameterValueById(parameter.parameterId, parameter.value, weight);
                            break;
                        }
                    case ExpressionBlendType.ExpressionBlendType_Overwrite:
                        {
                            model.setParameterValueById(parameter.parameterId, parameter.value, weight);
                            break;
                        }
                    default:
                        // 仕様にない値を設定した時はすでに加算モードになっている
                        break;
                }
            }
        };
        return CubismExpressionMotion;
    }(ACubismMotion));
    Live2DCubismFramework.CubismExpressionMotion = CubismExpressionMotion;
    /**
     * 表情パラメータ値の計算方式
     */
    var ExpressionBlendType;
    (function (ExpressionBlendType) {
        ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Add"] = 0] = "ExpressionBlendType_Add";
        ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Multiply"] = 1] = "ExpressionBlendType_Multiply";
        ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Overwrite"] = 2] = "ExpressionBlendType_Overwrite"; // 上書き
    })(ExpressionBlendType = Live2DCubismFramework.ExpressionBlendType || (Live2DCubismFramework.ExpressionBlendType = {}));
    /**
     * 表情のパラメータ情報
     */
    var ExpressionParameter = /** @class */ (function () {
        function ExpressionParameter() {
        }
        return ExpressionParameter;
    }());
    Live2DCubismFramework.ExpressionParameter = ExpressionParameter;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/motion/cubismmotion.ts":
/*!******************************************!*\
  !*** ./Framework/motion/cubismmotion.ts ***!
  \******************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _cubismmotionjson__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cubismmotionjson */ "./Framework/motion/cubismmotionjson.ts");
/* harmony import */ var _cubismmotioninternal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cubismmotioninternal */ "./Framework/motion/cubismmotioninternal.ts");
/* harmony import */ var _acubismmotion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./acubismmotion */ "./Framework/motion/acubismmotion.ts");
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/* harmony import */ var _math_cubismmath__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/cubismmath */ "./Framework/math/cubismmath.ts");
/* harmony import */ var _type_csmstring__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../type/csmstring */ "./Framework/type/csmstring.ts");
/* harmony import */ var _utils_cubismdebug__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/cubismdebug */ "./Framework/utils/cubismdebug.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var csmString = _type_csmstring__WEBPACK_IMPORTED_MODULE_5__["Live2DCubismFramework"].csmString;
var CubismMotionData = _cubismmotioninternal__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismMotionData;
var CubismMotionSegment = _cubismmotioninternal__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismMotionSegment;
var CubismMotionPoint = _cubismmotioninternal__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismMotionPoint;
var CubismMotionEvent = _cubismmotioninternal__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismMotionEvent;
var CubismMotionSegmentType = _cubismmotioninternal__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismMotionSegmentType;
var CubismMotionCurve = _cubismmotioninternal__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismMotionCurve;
var CubismMotionCurveTarget = _cubismmotioninternal__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismMotionCurveTarget;
var CubismMath = _math_cubismmath__WEBPACK_IMPORTED_MODULE_4__["Live2DCubismFramework"].CubismMath;
var CubismFramework = _live2dcubismframework__WEBPACK_IMPORTED_MODULE_3__["Live2DCubismFramework"].CubismFramework;
var ACubismMotion = _acubismmotion__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].ACubismMotion;
var CubismMotionJson = _cubismmotionjson__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismMotionJson;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var EffectNameEyeBlink = "EyeBlink";
    var EffectNameLipSync = "LipSync";
    var TargetNameModel = "Model";
    var TargetNameParameter = "Parameter";
    var TargetNamePartOpacity = "PartOpacity";
    function lerpPoints(a, b, t) {
        var result = new CubismMotionPoint();
        result.time = a.time + ((b.time - a.time) * t);
        result.value = a.value + ((b.value - a.value) * t);
        return result;
    }
    function linearEvaluate(points, time) {
        var t = (time - points[0].time) / (points[1].time - points[0].time);
        if (t < 0.0) {
            t = 0.0;
        }
        return points[0].value + ((points[1].value - points[0].value) * t);
    }
    function bezierEvaluate(points, time) {
        var t = (time - points[0].time) / (points[3].time - points[0].time);
        if (t < 0.0) {
            t = 0.0;
        }
        var p01 = lerpPoints(points[0], points[1], t);
        var p12 = lerpPoints(points[1], points[2], t);
        var p23 = lerpPoints(points[2], points[3], t);
        var p012 = lerpPoints(p01, p12, t);
        var p123 = lerpPoints(p12, p23, t);
        return lerpPoints(p012, p123, t).value;
    }
    function steppedEvaluate(points, time) {
        return points[0].value;
    }
    function inverseSteppedEvaluate(points, time) {
        return points[1].value;
    }
    function evaluateCurve(motionData, index, time) {
        // Find segment to evaluate.
        var curve = motionData.curves.at(index);
        var target = -1;
        var totalSegmentCount = curve.baseSegmentIndex + curve.segmentCount;
        var pointPosition = 0;
        for (var i = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {
            // Get first point of next segment.
            pointPosition = motionData.segments.at(i).basePointIndex
                + (motionData.segments.at(i).segmentType == CubismMotionSegmentType.CubismMotionSegmentType_Bezier
                    ? 3
                    : 1);
            // Break if time lies within current segment.
            if (motionData.points.at(pointPosition).time > time) {
                target = i;
                break;
            }
        }
        if (target == -1) {
            return motionData.points.at(pointPosition).value;
        }
        var segment = motionData.segments.at(target);
        return segment.evaluate(motionData.points.get(segment.basePointIndex), time);
    }
    /**
     * モーションクラス
     *
     * モーションのクラス。
     */
    var CubismMotion = /** @class */ (function (_super) {
        __extends(CubismMotion, _super);
        /**
         * コンストラクタ
         */
        function CubismMotion() {
            var _this = _super.call(this) || this;
            _this._sourceFrameRate = 30.0;
            _this._loopDurationSeconds = -1.0;
            _this._isLoop = false; // trueから false へデフォルトを変更
            _this._isLoopFadeIn = true; // ループ時にフェードインが有効かどうかのフラグ
            _this._lastWeight = 0.0;
            _this._motionData = null;
            _this._modelCurveIdEyeBlink = null;
            _this._modelCurveIdLipSync = null;
            _this._eyeBlinkParameterIds = null;
            _this._lipSyncParameterIds = null;
            return _this;
        }
        /**
         * インスタンスを作成する
         *
         * @param buffer motion3.jsonが読み込まれているバッファ
         * @param size バッファのサイズ
         * @return 作成されたインスタンス
         */
        CubismMotion.create = function (buffer, size) {
            var ret = new CubismMotion();
            ret.parse(buffer, size);
            ret._sourceFrameRate = ret._motionData.fps;
            ret._loopDurationSeconds = ret._motionData.duration;
            // NOTE: Editorではループありのモーション書き出しは非対応
            // ret->_loop = (ret->_motionData->Loop > 0);
            return ret;
        };
        /**
         * モデルのパラメータの更新の実行
         * @param model             対象のモデル
         * @param userTimeSeconds   現在の時刻[秒]
         * @param fadeWeight        モーションの重み
         * @param motionQueueEntry  CubismMotionQueueManagerで管理されているモーション
         */
        CubismMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, fadeWeight, motionQueueEntry) {
            if (this._modelCurveIdEyeBlink == null) {
                this._modelCurveIdEyeBlink = CubismFramework.getIdManager().getId(EffectNameEyeBlink);
            }
            if (this._modelCurveIdLipSync == null) {
                this._modelCurveIdLipSync = CubismFramework.getIdManager().getId(EffectNameLipSync);
            }
            var timeOffsetSeconds = userTimeSeconds - motionQueueEntry.getStartTime();
            if (timeOffsetSeconds < 0.0) {
                timeOffsetSeconds = 0.0; // エラー回避
            }
            var lipSyncValue = Number.MAX_VALUE;
            var eyeBlinkValue = Number.MAX_VALUE;
            //まばたき、リップシンクのうちモーションの適用を検出するためのビット（maxFlagCount個まで
            var MaxTargetSize = 64;
            var lipSyncFlags = 0;
            var eyeBlinkFlags = 0;
            //瞬き、リップシンクのターゲット数が上限を超えている場合
            if (this._eyeBlinkParameterIds.getSize() > MaxTargetSize) {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_6__["CubismLogDebug"])("too many eye blink targets : {0}", this._eyeBlinkParameterIds.getSize());
            }
            if (this._lipSyncParameterIds.getSize() > MaxTargetSize) {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_6__["CubismLogDebug"])("too many lip sync targets : {0}", this._lipSyncParameterIds.getSize());
            }
            var tmpFadeIn = (this._fadeInSeconds <= 0.0)
                ? 1.0
                : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / this._fadeInSeconds);
            var tmpFadeOut = (this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0)
                ? 1.0
                : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / this._fadeOutSeconds);
            var value;
            var c, parameterIndex;
            // 'Repeat' time as necessary.
            var time = timeOffsetSeconds;
            if (this._isLoop) {
                while (time > this._motionData.duration) {
                    time -= this._motionData.duration;
                }
            }
            var curves = this._motionData.curves;
            // Evaluate model curves.
            for (c = 0; c < this._motionData.curveCount && curves.at(c).type == CubismMotionCurveTarget.CubismMotionCurveTarget_Model; ++c) {
                // Evaluate curve and call handler.
                value = evaluateCurve(this._motionData, c, time);
                if (curves.at(c).id == this._modelCurveIdEyeBlink) {
                    eyeBlinkValue = value;
                }
                else if (curves.at(c).id == this._modelCurveIdLipSync) {
                    lipSyncValue = value;
                }
            }
            var parameterMotionCurveCount = 0;
            for (; c < this._motionData.curveCount && curves.at(c).type == CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter; ++c) {
                parameterMotionCurveCount++;
                // Find parameter index.
                parameterIndex = model.getParameterIndex(curves.at(c).id);
                // Skip curve evaluation if no value in sink.
                if (parameterIndex == -1) {
                    continue;
                }
                var sourceValue = model.getParameterValueByIndex(parameterIndex);
                // Evaluate curve and apply value.
                value = evaluateCurve(this._motionData, c, time);
                if (eyeBlinkValue != Number.MAX_VALUE) {
                    for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {
                        if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {
                            value *= eyeBlinkValue;
                            eyeBlinkFlags |= 1 << i;
                            break;
                        }
                    }
                }
                if (lipSyncValue != Number.MAX_VALUE) {
                    for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {
                        if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {
                            value += lipSyncValue;
                            lipSyncFlags |= 1 << i;
                            break;
                        }
                    }
                }
                var v = void 0;
                // パラメータごとのフェード
                if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {
                    // モーションのフェードを適用
                    v = sourceValue + (value - sourceValue) * fadeWeight;
                }
                else {
                    // パラメータに対してフェードインかフェードアウトが設定してある場合はそちらを適用
                    var fin = void 0;
                    var fout = void 0;
                    if (curves.at(c).fadeInTime < 0.0) {
                        fin = tmpFadeIn;
                    }
                    else {
                        fin = curves.at(c).fadeInTime == 0.0
                            ? 1.0
                            : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / curves.at(c).fadeInTime);
                    }
                    if (curves.at(c).fadeOutTime < 0.0) {
                        fout = tmpFadeOut;
                    }
                    else {
                        fout = (curves.at(c).fadeOutTime == 0.0 || motionQueueEntry.getEndTime() < 0.0)
                            ? 1.0
                            : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / curves.at(c).fadeOutTime);
                    }
                    var paramWeight = this._weight * fin * fout;
                    // パラメータごとのフェードを適用
                    v = sourceValue + (value - sourceValue) * paramWeight;
                }
                model.setParameterValueByIndex(parameterIndex, v, 1.0);
            }
            {
                if (eyeBlinkValue != Number.MAX_VALUE) {
                    for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {
                        var sourceValue = model.getParameterValueById(this._eyeBlinkParameterIds.at(i));
                        // モーションでの上書きがあった時にはまばたきは適用しない
                        if ((eyeBlinkFlags >> i) & 0x01) {
                            continue;
                        }
                        var v = sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;
                        model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);
                    }
                }
                if (lipSyncValue != Number.MAX_VALUE) {
                    for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {
                        var sourceValue = model.getParameterValueById(this._lipSyncParameterIds.at(i));
                        // モーションでの上書きがあった時にはリップシンクは適用しない
                        if ((lipSyncFlags >> i) & 0x01) {
                            continue;
                        }
                        var v = sourceValue + (lipSyncValue - sourceValue) * fadeWeight;
                        model.setParameterValueById(this._lipSyncParameterIds.at(i), v);
                    }
                }
            }
            for (; c < this._motionData.curveCount && curves.at(c).type == CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity; ++c) {
                // Find parameter index.
                parameterIndex = model.getParameterIndex(curves.at(c).id);
                // Skip curve evaluation if no value in sink.
                if (parameterIndex == -1) {
                    continue;
                }
                // Evaluate curve and apply value.
                value = evaluateCurve(this._motionData, c, time);
                model.setParameterValueByIndex(parameterIndex, value);
            }
            if (timeOffsetSeconds >= this._motionData.duration) {
                if (this._isLoop) {
                    motionQueueEntry.setStartTime(userTimeSeconds); // 最初の状態へ
                    if (this._isLoopFadeIn) {
                        // ループ内でループ用フェードインが有効の時は、フェードイン設定し直し
                        motionQueueEntry.setFadeInStartTime(userTimeSeconds);
                    }
                }
                else {
                    motionQueueEntry.setIsFinished(true);
                }
            }
            this._lastWeight = fadeWeight;
        };
        /**
         * ループ情報の設定
         * @param loop ループ情報
         */
        CubismMotion.prototype.setIsLoop = function (loop) {
            this._isLoop = loop;
        };
        /**
         * ループ情報の取得
         * @return true ループする
         * @return false ループしない
         */
        CubismMotion.prototype.isLoop = function () {
            return this._isLoop;
        };
        /**
         * ループ時のフェードイン情報の設定
         * @param loopFadeIn  ループ時のフェードイン情報
         */
        CubismMotion.prototype.setIsLoopFadeIn = function (loopFadeIn) {
            this._isLoopFadeIn = loopFadeIn;
        };
        /**
         * ループ時のフェードイン情報の取得
         *
         * @return  true    する
         * @return  false   しない
         */
        CubismMotion.prototype.isLoopFadeIn = function () {
            return this._isLoopFadeIn;
        };
        /**
         * モーションの長さを取得する。
         *
         * @return  モーションの長さ[秒]
         */
        CubismMotion.prototype.getDuration = function () {
            return this._isLoop ? -1.0 : this._loopDurationSeconds;
        };
        /**
         * モーションのループ時の長さを取得する。
         *
         * @return  モーションのループ時の長さ[秒]
         */
        CubismMotion.prototype.getLoopDuration = function () {
            return this._loopDurationSeconds;
        };
        /**
         * パラメータに対するフェードインの時間を設定する。
         *
         * @param parameterId     パラメータID
         * @param value           フェードインにかかる時間[秒]
         */
        CubismMotion.prototype.setParameterFadeInTime = function (parameterId, value) {
            var curves = this._motionData.curves;
            for (var i = 0; i < this._motionData.curveCount; ++i) {
                if (parameterId == curves.at(i).id) {
                    curves.at(i).fadeInTime = value;
                    return;
                }
            }
        };
        /**
        * パラメータに対するフェードアウトの時間の設定
        * @param parameterId     パラメータID
        * @param value           フェードアウトにかかる時間[秒]
        */
        CubismMotion.prototype.setParameterFadeOutTime = function (parameterId, value) {
            var curves = this._motionData.curves;
            for (var i = 0; i < this._motionData.curveCount; ++i) {
                if (parameterId == curves.at(i).id) {
                    curves.at(i).fadeOutTime = value;
                    return;
                }
            }
        };
        /**
        * パラメータに対するフェードインの時間の取得
        * @param    parameterId     パラメータID
        * @return   フェードインにかかる時間[秒]
        */
        CubismMotion.prototype.getParameterFadeInTime = function (parameterId) {
            var curves = this._motionData.curves;
            for (var i = 0; i < this._motionData.curveCount; ++i) {
                if (parameterId == curves.at(i).id) {
                    return curves.at(i).fadeInTime;
                }
            }
            return -1;
        };
        /**
        * パラメータに対するフェードアウトの時間を取得
        *
        * @param   parameterId     パラメータID
        * @return   フェードアウトにかかる時間[秒]
        */
        CubismMotion.prototype.getParameterFadeOutTime = function (parameterId) {
            var curves = this._motionData.curves;
            for (var i = 0; i < this._motionData.curveCount; ++i) {
                if (parameterId == curves.at(i).id) {
                    return curves.at(i).fadeOutTime;
                }
            }
            return -1;
        };
        /**
         * 自動エフェクトがかかっているパラメータIDリストの設定
         * @param eyeBlinkParameterIds    自動まばたきがかかっているパラメータIDのリスト
         * @param lipSyncParameterIds     リップシンクがかかっているパラメータIDのリスト
         */
        CubismMotion.prototype.setEffectIds = function (eyeBlinkParameterIds, lipSyncParameterIds) {
            this._eyeBlinkParameterIds = eyeBlinkParameterIds;
            this._lipSyncParameterIds = lipSyncParameterIds;
        };
        /**
         * デストラクタ相当の処理
         */
        CubismMotion.prototype.release = function () {
            this._motionData = void 0;
            this._motionData = null;
        };
        /**
         * motion3.jsonをパースする。
         *
         * @param motionJson  motion3.jsonが読み込まれているバッファ
         * @param size        バッファのサイズ
         */
        CubismMotion.prototype.parse = function (motionJson, size) {
            this._motionData = new CubismMotionData();
            var json = new CubismMotionJson(motionJson, size);
            this._motionData.duration = json.getMotionDuration();
            this._motionData.loop = json.isMotionLoop();
            this._motionData.curveCount = json.getMotionCurveCount();
            this._motionData.fps = json.getMotionFps();
            this._motionData.eventCount = json.getEventCount();
            if (json.isExistMotionFadeInTime()) {
                this._fadeInSeconds = (json.getMotionFadeInTime() < 0.0)
                    ? 1.0
                    : json.getMotionFadeInTime();
            }
            else {
                this._fadeInSeconds = 1.0;
            }
            if (json.isExistMotionFadeOutTime()) {
                this._fadeOutSeconds = (json.getMotionFadeOutTime() < 0.0)
                    ? 1.0
                    : json.getMotionFadeOutTime();
            }
            else {
                this._fadeOutSeconds = 1.0;
            }
            this._motionData.curves.updateSize(this._motionData.curveCount, CubismMotionCurve, true);
            this._motionData.segments.updateSize(json.getMotionTotalSegmentCount(), CubismMotionSegment, true);
            this._motionData.points.updateSize(json.getMotionTotalPointCount(), CubismMotionPoint, true);
            this._motionData.events.updateSize(this._motionData.eventCount, CubismMotionEvent, true);
            var totalPointCount = 0;
            var totalSegmentCount = 0;
            // Curves
            for (var curveCount = 0; curveCount < this._motionData.curveCount; ++curveCount) {
                if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {
                    this._motionData.curves.at(curveCount).type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;
                }
                else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {
                    this._motionData.curves.at(curveCount).type = CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;
                }
                else if (json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity) {
                    this._motionData.curves.at(curveCount).type = CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;
                }
                this._motionData.curves.at(curveCount).id = json.getMotionCurveId(curveCount);
                this._motionData.curves.at(curveCount).baseSegmentIndex = totalSegmentCount;
                this._motionData.curves.at(curveCount).fadeInTime =
                    (json.isExistMotionCurveFadeInTime(curveCount))
                        ? json.getMotionCurveFadeInTime(curveCount)
                        : -1.0;
                this._motionData.curves.at(curveCount).fadeOutTime =
                    (json.isExistMotionCurveFadeOutTime(curveCount))
                        ? json.getMotionCurveFadeOutTime(curveCount)
                        : -1.0;
                // Segments
                for (var segmentPosition = 0; segmentPosition < json.getMotionCurveSegmentCount(curveCount);) {
                    if (segmentPosition == 0) {
                        this._motionData.segments.at(totalSegmentCount).basePointIndex = totalPointCount;
                        this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition);
                        this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                        totalPointCount += 1;
                        segmentPosition += 2;
                    }
                    else {
                        this._motionData.segments.at(totalSegmentCount).basePointIndex = totalPointCount - 1;
                    }
                    var segment = json.getMotionCurveSegment(curveCount, segmentPosition);
                    switch (segment) {
                        case CubismMotionSegmentType.CubismMotionSegmentType_Linear:
                            {
                                this._motionData.segments.at(totalSegmentCount).segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Linear;
                                this._motionData.segments.at(totalSegmentCount).evaluate = linearEvaluate;
                                this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, (segmentPosition + 1));
                                this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, (segmentPosition + 2));
                                totalPointCount += 1;
                                segmentPosition += 3;
                                break;
                            }
                        case CubismMotionSegmentType.CubismMotionSegmentType_Bezier:
                            {
                                this._motionData.segments.at(totalSegmentCount).segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Bezier;
                                this._motionData.segments.at(totalSegmentCount).evaluate = bezierEvaluate;
                                this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, (segmentPosition + 1));
                                this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, (segmentPosition + 2));
                                this._motionData.points.at(totalPointCount + 1).time = json.getMotionCurveSegment(curveCount, (segmentPosition + 3));
                                this._motionData.points.at(totalPointCount + 1).value = json.getMotionCurveSegment(curveCount, (segmentPosition + 4));
                                this._motionData.points.at(totalPointCount + 2).time = json.getMotionCurveSegment(curveCount, (segmentPosition + 5));
                                this._motionData.points.at(totalPointCount + 2).value = json.getMotionCurveSegment(curveCount, (segmentPosition + 6));
                                totalPointCount += 3;
                                segmentPosition += 7;
                                break;
                            }
                        case CubismMotionSegmentType.CubismMotionSegmentType_Stepped:
                            {
                                this._motionData.segments.at(totalSegmentCount).segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Stepped;
                                this._motionData.segments.at(totalSegmentCount).evaluate = steppedEvaluate;
                                this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, (segmentPosition + 1));
                                this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, (segmentPosition + 2));
                                totalPointCount += 1;
                                segmentPosition += 3;
                                break;
                            }
                        case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped:
                            {
                                this._motionData.segments.at(totalSegmentCount).segmentType = CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;
                                this._motionData.segments.at(totalSegmentCount).evaluate = inverseSteppedEvaluate;
                                this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, (segmentPosition + 1));
                                this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, (segmentPosition + 2));
                                totalPointCount += 1;
                                segmentPosition += 3;
                                break;
                            }
                        default:
                            {
                                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_6__["CSM_ASSERT"])(0);
                                break;
                            }
                    }
                    ++this._motionData.curves.at(curveCount).segmentCount;
                    ++totalSegmentCount;
                }
            }
            for (var userdatacount = 0; userdatacount < json.getEventCount(); ++userdatacount) {
                this._motionData.events.at(userdatacount).fireTime = json.getEventTime(userdatacount);
                this._motionData.events.at(userdatacount).value = json.getEventValue(userdatacount);
            }
            json.release();
            json = void 0;
            json = null;
        };
        /**
         * モデルのパラメータ更新
         *
         * イベント発火のチェック。
         * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。
         *
         * @param beforeCheckTimeSeconds   前回のイベントチェック時間[秒]
         * @param motionTimeSeconds        今回の再生時間[秒]
         */
        CubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {
            this._firedEventValues.updateSize(0);
            // イベントの発火チェック
            for (var u = 0; u < this._motionData.eventCount; ++u) {
                if ((this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds) &&
                    (this._motionData.events.at(u).fireTime <= motionTimeSeconds)) {
                    this._firedEventValues.pushBack(new csmString(this._motionData.events.at(u).value.s));
                }
            }
            return this._firedEventValues;
        };
        return CubismMotion;
    }(ACubismMotion));
    Live2DCubismFramework.CubismMotion = CubismMotion;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/motion/cubismmotioninternal.ts":
/*!**************************************************!*\
  !*** ./Framework/motion/cubismmotioninternal.ts ***!
  \**************************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _type_csmvector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../type/csmvector */ "./Framework/type/csmvector.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */

var csmVector = _type_csmvector__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].csmVector;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * @brief モーションカーブの種類
     *
     * モーションカーブの種類。
     */
    var CubismMotionCurveTarget;
    (function (CubismMotionCurveTarget) {
        CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_Model"] = 0] = "CubismMotionCurveTarget_Model";
        CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_Parameter"] = 1] = "CubismMotionCurveTarget_Parameter";
        CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_PartOpacity"] = 2] = "CubismMotionCurveTarget_PartOpacity"; // パーツの不透明度に対して
    })(CubismMotionCurveTarget = Live2DCubismFramework.CubismMotionCurveTarget || (Live2DCubismFramework.CubismMotionCurveTarget = {}));
    ;
    /**
     * @brief モーションカーブのセグメントの種類
     *
     * モーションカーブのセグメントの種類。
     */
    var CubismMotionSegmentType;
    (function (CubismMotionSegmentType) {
        CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Linear"] = 0] = "CubismMotionSegmentType_Linear";
        CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Bezier"] = 1] = "CubismMotionSegmentType_Bezier";
        CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Stepped"] = 2] = "CubismMotionSegmentType_Stepped";
        CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_InverseStepped"] = 3] = "CubismMotionSegmentType_InverseStepped"; // インバースステップ
    })(CubismMotionSegmentType = Live2DCubismFramework.CubismMotionSegmentType || (Live2DCubismFramework.CubismMotionSegmentType = {}));
    ;
    /**
     * @brief モーションカーブの制御点
     *
     * モーションカーブの制御点。
     */
    var CubismMotionPoint = /** @class */ (function () {
        function CubismMotionPoint() {
            this.time = 0.0; // 時間[秒]
            this.value = 0.0; // 値
        }
        return CubismMotionPoint;
    }());
    Live2DCubismFramework.CubismMotionPoint = CubismMotionPoint;
    ;
    /**
     * @brief モーションカーブのセグメント
     *
     * モーションカーブのセグメント。
     */
    var CubismMotionSegment = /** @class */ (function () {
        /**
         * @brief コンストラクタ
         *
         * コンストラクタ。
         */
        function CubismMotionSegment() {
            this.evaluate = null;
            this.basePointIndex = 0;
            this.segmentType = 0;
        }
        return CubismMotionSegment;
    }());
    Live2DCubismFramework.CubismMotionSegment = CubismMotionSegment;
    ;
    /**
     * @brief モーションカーブ
     *
     * モーションカーブ。
     */
    var CubismMotionCurve = /** @class */ (function () {
        function CubismMotionCurve() {
            this.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;
            this.segmentCount = 0;
            this.baseSegmentIndex = 0;
            this.fadeInTime = 0.0;
            this.fadeOutTime = 0.0;
        }
        return CubismMotionCurve;
    }());
    Live2DCubismFramework.CubismMotionCurve = CubismMotionCurve;
    ;
    /**
    * イベント。
    */
    var CubismMotionEvent = /** @class */ (function () {
        function CubismMotionEvent() {
            this.fireTime = 0.0;
        }
        return CubismMotionEvent;
    }());
    Live2DCubismFramework.CubismMotionEvent = CubismMotionEvent;
    ;
    /**
     * @brief モーションデータ
     *
     * モーションデータ。
     */
    var CubismMotionData = /** @class */ (function () {
        function CubismMotionData() {
            this.duration = 0.0;
            this.loop = false;
            this.curveCount = 0;
            this.eventCount = 0;
            this.fps = 0.0;
            this.curves = new csmVector();
            this.segments = new csmVector();
            this.points = new csmVector();
            this.events = new csmVector();
        }
        return CubismMotionData;
    }());
    Live2DCubismFramework.CubismMotionData = CubismMotionData;
    ;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/motion/cubismmotionjson.ts":
/*!**********************************************!*\
  !*** ./Framework/motion/cubismmotionjson.ts ***!
  \**********************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _utils_cubismjson__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cubismjson */ "./Framework/utils/cubismjson.ts");
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/* harmony import */ var _type_csmstring__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../type/csmstring */ "./Framework/type/csmstring.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */



var csmString = _type_csmstring__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].csmString;
var CubismFramework = _live2dcubismframework__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismFramework;
var CubismJson = _utils_cubismjson__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismJson;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    // JSON keys
    var Meta = "Meta";
    var Duration = "Duration";
    var Loop = "Loop";
    var CurveCount = "CurveCount";
    var Fps = "Fps";
    var TotalSegmentCount = "TotalSegmentCount";
    var TotalPointCount = "TotalPointCount";
    var Curves = "Curves";
    var Target = "Target";
    var Id = "Id";
    var FadeInTime = "FadeInTime";
    var FadeOutTime = "FadeOutTime";
    var Segments = "Segments";
    var UserData = "UserData";
    var UserDataCount = "UserDataCount";
    var TotalUserDataSize = "TotalUserDataSize";
    var Time = "Time";
    var Value = "Value";
    /**
     * motion3.jsonのコンテナ。
     */
    var CubismMotionJson = /** @class */ (function () {
        /**
         * コンストラクタ
         * @param buffer motion3.jsonが読み込まれているバッファ
         * @param size バッファのサイズ
         */
        function CubismMotionJson(buffer, size) {
            this._json = CubismJson.create(buffer, size);
        }
        /**
         * デストラクタ相当の処理
         */
        CubismMotionJson.prototype.release = function () {
            CubismJson.delete(this._json);
        };
        /**
         * モーションの長さを取得する
         * @return モーションの長さ[秒]
         */
        CubismMotionJson.prototype.getMotionDuration = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(Duration).toFloat();
        };
        /**
         * モーションのループ情報の取得
         * @return true ループする
         * @return false ループしない
         */
        CubismMotionJson.prototype.isMotionLoop = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(Loop).toBoolean();
        };
        /**
         * モーションカーブの個数の取得
         * @return モーションカーブの個数
         */
        CubismMotionJson.prototype.getMotionCurveCount = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(CurveCount).toInt();
        };
        /**
         * モーションのフレームレートの取得
         * @return フレームレート[FPS]
         */
        CubismMotionJson.prototype.getMotionFps = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(Fps).toFloat();
        };
        /**
         * モーションのセグメントの総合計の取得
         * @return モーションのセグメントの取得
         */
        CubismMotionJson.prototype.getMotionTotalSegmentCount = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(TotalSegmentCount).toInt();
        };
        /**
         * モーションのカーブの制御店の総合計の取得
         * @return モーションのカーブの制御点の総合計
         */
        CubismMotionJson.prototype.getMotionTotalPointCount = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(TotalPointCount).toInt();
        };
        /**
         * モーションのフェードイン時間の存在
         * @return true 存在する
         * @return false 存在しない
         */
        CubismMotionJson.prototype.isExistMotionFadeInTime = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().isExist(FadeInTime);
        };
        /**
         * モーションのフェードアウト時間の存在
         * @return true 存在する
         * @return false 存在しない
         */
        CubismMotionJson.prototype.isExistMotionFadeOutTime = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().isExist(FadeOutTime);
        };
        /**
         * モーションのフェードイン時間の取得
         * @return フェードイン時間[秒]
         */
        CubismMotionJson.prototype.getMotionFadeInTime = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(FadeInTime).toFloat();
        };
        /**
         * モーションのフェードアウト時間の取得
         * @return フェードアウト時間[秒]
         */
        CubismMotionJson.prototype.getMotionFadeOutTime = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(FadeOutTime).toFloat();
        };
        /**
         * モーションのカーブの種類の取得
         * @param curveIndex カーブのインデックス
         * @return カーブの種類
         */
        CubismMotionJson.prototype.getMotionCurveTarget = function (curveIndex) {
            return this._json.getRoot().getMap().getValue(Curves).getVector().at(curveIndex).getMap().getValue(Target).getRawString();
        };
        /**
         * モーションのカーブのIDの取得
         * @param curveIndex カーブのインデックス
         * @return カーブのID
         */
        CubismMotionJson.prototype.getMotionCurveId = function (curveIndex) {
            return CubismFramework.getIdManager().getId(this._json.getRoot().getMap().getValue(Curves).getVector().at(curveIndex).getMap().getValue(Id).getRawString());
        };
        /**
         * モーションのカーブのフェードイン時間の存在
         * @param curveIndex カーブのインデックス
         * @return true 存在する
         * @return false 存在しない
         */
        CubismMotionJson.prototype.isExistMotionCurveFadeInTime = function (curveIndex) {
            return this._json.getRoot().getMap().getValue(Curves).getVector().at(curveIndex).getMap().isExist(FadeInTime);
        };
        /**
         * モーションのカーブのフェードアウト時間の存在
         * @param curveIndex カーブのインデックス
         * @return true 存在する
         * @return false 存在しない
         */
        CubismMotionJson.prototype.isExistMotionCurveFadeOutTime = function (curveIndex) {
            return this._json.getRoot().getMap().getValue(Curves).getVector().at(curveIndex).getMap().isExist(FadeOutTime);
        };
        /**
         * モーションのカーブのフェードイン時間の取得
         * @param curveIndex カーブのインデックス
         * @return フェードイン時間[秒]
         */
        CubismMotionJson.prototype.getMotionCurveFadeInTime = function (curveIndex) {
            return this._json.getRoot().getMap().getValue(Curves).getVector().at(curveIndex).getMap().getValue(FadeInTime).toFloat();
        };
        /**
         * モーションのカーブのフェードアウト時間の取得
         * @param curveIndex カーブのインデックス
         * @return フェードアウト時間[秒]
         */
        CubismMotionJson.prototype.getMotionCurveFadeOutTime = function (curveIndex) {
            return this._json.getRoot().getMap().getValue(Curves).getVector().at(curveIndex).getMap().getValue(FadeOutTime).toFloat();
        };
        /**
         * モーションのカーブのセグメントの個数を取得する
         * @param curveIndex カーブのインデックス
         * @return モーションのカーブのセグメントの個数
         */
        CubismMotionJson.prototype.getMotionCurveSegmentCount = function (curveIndex) {
            return this._json.getRoot().getMap().getValue(Curves).getVector().at(curveIndex).getMap().getValue(Segments).getVector().getSize();
        };
        /**
         * モーションのカーブのセグメントの値の取得
         * @param curveIndex カーブのインデックス
         * @param segmentIndex セグメントのインデックス
         * @return セグメントの値
         */
        CubismMotionJson.prototype.getMotionCurveSegment = function (curveIndex, segmentIndex) {
            return this._json.getRoot().getMap().getValue(Curves).getVector().at(curveIndex).getMap().getValue(Segments).getVector().at(segmentIndex).toFloat();
        };
        /**
         * イベントの個数の取得
         * @return イベントの個数
         */
        CubismMotionJson.prototype.getEventCount = function () {
            if (!this._json.getRoot().getMap().getValue(Meta).getMap().isExist(UserDataCount)) {
                return 0;
            }
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(UserDataCount).toInt();
        };
        /**
         *  イベントの総文字数の取得
         * @return イベントの総文字数
         */
        CubismMotionJson.prototype.getTotalEventValueSize = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(TotalUserDataSize).toInt();
        };
        /**
         * イベントの時間の取得
         * @param userDataIndex イベントのインデックス
         * @return イベントの時間[秒]
         */
        CubismMotionJson.prototype.getEventTime = function (userDataIndex) {
            return this._json.getRoot().getMap().getValue(UserData).getVector().at(userDataIndex).getMap().getValue(Time).toInt();
        };
        /**
         * イベントの取得
         * @param userDataIndex イベントのインデックス
         * @return イベントの文字列
         */
        CubismMotionJson.prototype.getEventValue = function (userDataIndex) {
            return new csmString(this._json.getRoot().getMap().getValue(UserData).getVector().at(userDataIndex).getMap().getValue(Value).getRawString());
        };
        return CubismMotionJson;
    }());
    Live2DCubismFramework.CubismMotionJson = CubismMotionJson;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/motion/cubismmotionmanager.ts":
/*!*************************************************!*\
  !*** ./Framework/motion/cubismmotionmanager.ts ***!
  \*************************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _cubismmotionqueuemanager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cubismmotionqueuemanager */ "./Framework/motion/cubismmotionqueuemanager.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var CubismMotionQueueManager = _cubismmotionqueuemanager__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismMotionQueueManager;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * モーションの管理
     *
     * モーションの管理を行うクラス
     */
    var CubismMotionManager = /** @class */ (function (_super) {
        __extends(CubismMotionManager, _super);
        /**
         * コンストラクタ
         */
        function CubismMotionManager() {
            var _this = _super.call(this) || this;
            _this._currentPriority = 0;
            _this._reservePriority = 0;
            return _this;
        }
        /**
         * 再生中のモーションの優先度の取得
         * @return  モーションの優先度
         */
        CubismMotionManager.prototype.getCurrentPriority = function () {
            return this._currentPriority;
        };
        /**
         * 予約中のモーションの優先度を取得する。
         * @return  モーションの優先度
         */
        CubismMotionManager.prototype.getReservePriority = function () {
            return this._reservePriority;
        };
        /**
         * 予約中のモーションの優先度を設定する。
         * @param   val     優先度
         */
        CubismMotionManager.prototype.setReservePriority = function (val) {
            this._reservePriority = val;
        };
        /**
         * 優先度を設定してモーションを開始する。
         *
         * @param motion          モーション
         * @param autoDelete      再生が狩猟したモーションのインスタンスを削除するならtrue
         * @param priority        優先度
         * @return                開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」
         */
        CubismMotionManager.prototype.startMotionPriority = function (motion, autoDelete, priority) {
            if (priority == this._reservePriority) {
                this._reservePriority = 0; // 予約を解除
            }
            this._currentPriority = priority; // 再生中モーションの優先度を設定
            return _super.prototype.startMotion.call(this, motion, autoDelete, this._userTimeSeconds);
        };
        /**
         * モーションを更新して、モデルにパラメータ値を反映する。
         *
         * @param model   対象のモデル
         * @param deltaTimeSeconds    デルタ時間[秒]
         * @return  true    更新されている
         * @return  false   更新されていない
         */
        CubismMotionManager.prototype.updateMotion = function (model, deltaTimeSeconds) {
            this._userTimeSeconds += deltaTimeSeconds;
            var updated = _super.prototype.doUpdateMotion.call(this, model, this._userTimeSeconds);
            if (this.isFinished()) {
                this._currentPriority = 0; // 再生中のモーションの優先度を解除
            }
            return updated;
        };
        /**
         * モーションを予約する。
         *
         * @param   priority    優先度
         * @return  true    予約できた
         * @return  false   予約できなかった
         */
        CubismMotionManager.prototype.reserveMotion = function (priority) {
            if ((priority <= this._reservePriority) || (priority <= this._currentPriority)) {
                return false;
            }
            this._reservePriority = priority;
            return true;
        };
        return CubismMotionManager;
    }(CubismMotionQueueManager));
    Live2DCubismFramework.CubismMotionManager = CubismMotionManager;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/motion/cubismmotionqueueentry.ts":
/*!****************************************************!*\
  !*** ./Framework/motion/cubismmotionqueueentry.ts ***!
  \****************************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _acubismmotion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./acubismmotion */ "./Framework/motion/acubismmotion.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */

var ACubismMotion = _acubismmotion__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].ACubismMotion;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * CubismMotionQueueManagerで再生している各モーションの管理クラス。
     */
    var CubismMotionQueueEntry = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismMotionQueueEntry() {
            this._autoDelete = false;
            this._motion = null;
            this._available = true;
            this._finished = false;
            this._started = false;
            this._startTimeSeconds = -1.0;
            this._fadeInStartTimeSeconds = 0.0;
            this._endTimeSeconds = -1.0;
            this._stateTimeSeconds = 0.0;
            this._stateWeight = 0.0;
            this._lastEventCheckSeconds = 0.0;
            this._motionQueueEntryHandle = this;
        }
        /**
         * デストラクタ相当の処理
         */
        CubismMotionQueueEntry.prototype.release = function () {
            if (this._autoDelete && this._motion) {
                ACubismMotion.delete(this._motion); //
            }
        };
        /**
         * フェードアウトの開始
         * @param fadeOutSeconds フェードアウトにかかる時間[秒]
         * @param userTimeSeconds デルタ時間の積算値[秒]
         */
        CubismMotionQueueEntry.prototype.startFadeout = function (fadeoutSeconds, userTimeSeconds) {
            var newEndTimeSeconds = userTimeSeconds + fadeoutSeconds;
            if (this._endTimeSeconds < 0.0 || newEndTimeSeconds < this._endTimeSeconds) {
                this._endTimeSeconds = newEndTimeSeconds;
            }
        };
        /**
         * モーションの終了の確認
         *
         * @return true モーションが終了した
         * @return false 終了していない
         */
        CubismMotionQueueEntry.prototype.isFinished = function () {
            return this._finished;
        };
        /**
         * モーションの開始の確認
         * @return true モーションが開始した
         * @return false 開始していない
         */
        CubismMotionQueueEntry.prototype.isStarted = function () {
            return this._started;
        };
        /**
         * モーションの開始時刻の取得
         * @return モーションの開始時刻[秒]
         */
        CubismMotionQueueEntry.prototype.getStartTime = function () {
            return this._startTimeSeconds;
        };
        /**
         * フェードインの開始時刻の取得
         * @return フェードインの開始時刻[秒]
         */
        CubismMotionQueueEntry.prototype.getFadeInStartTime = function () {
            return this._fadeInStartTimeSeconds;
        };
        /**
         * フェードインの終了時刻の取得
         * @return フェードインの終了時刻の取得
         */
        CubismMotionQueueEntry.prototype.getEndTime = function () {
            return this._endTimeSeconds;
        };
        /**
         * モーションの開始時刻の設定
         * @param startTime モーションの開始時刻
         */
        CubismMotionQueueEntry.prototype.setStartTime = function (startTime) {
            this._startTimeSeconds = startTime;
        };
        /**
         * フェードインの開始時刻の設定
         * @param startTime フェードインの開始時刻[秒]
         */
        CubismMotionQueueEntry.prototype.setFadeInStartTime = function (startTime) {
            this._fadeInStartTimeSeconds = startTime;
        };
        /**
         * フェードインの終了時刻の設定
         * @param endTime フェードインの終了時刻[秒]
         */
        CubismMotionQueueEntry.prototype.setEndTime = function (endTime) {
            this._endTimeSeconds = endTime;
        };
        /**
         * モーションの終了の設定
         * @param f trueならモーションの終了
         */
        CubismMotionQueueEntry.prototype.setIsFinished = function (f) {
            this._finished = f;
        };
        /**
         * モーション開始の設定
         * @param f trueならモーションの開始
         */
        CubismMotionQueueEntry.prototype.setIsStarted = function (f) {
            this._started = f;
        };
        /**
         * モーションの有効性の確認
         * @return true モーションは有効
         * @return false モーションは無効
         */
        CubismMotionQueueEntry.prototype.isAvailable = function () {
            return this._available;
        };
        /**
         * モーションの有効性の設定
         * @param v trueならモーションは有効
         */
        CubismMotionQueueEntry.prototype.setIsAvailable = function (v) {
            this._available = v;
        };
        /**
         * モーションの状態の設定
         * @param timeSeconds 現在時刻[秒]
         * @param weight モーション尾重み
         */
        CubismMotionQueueEntry.prototype.setState = function (timeSeconds, weight) {
            this._stateTimeSeconds = timeSeconds;
            this._stateWeight = weight;
        };
        /**
         * モーションの現在時刻の取得
         * @return モーションの現在時刻[秒]
         */
        CubismMotionQueueEntry.prototype.getStateTime = function () {
            return this._stateTimeSeconds;
        };
        /**
         * モーションの重みの取得
         * @return モーションの重み
         */
        CubismMotionQueueEntry.prototype.getStateWeight = function () {
            return this._stateWeight;
        };
        /**
         * 最後にイベントの発火をチェックした時間を取得
         *
         * @return 最後にイベントの発火をチェックした時間[秒]
         */
        CubismMotionQueueEntry.prototype.getLastCheckEventTime = function () {
            return this._lastEventCheckSeconds;
        };
        /**
         * 最後にイベントをチェックした時間を設定
         * @param checkTime 最後にイベントをチェックした時間[秒]
         */
        CubismMotionQueueEntry.prototype.setLastCheckEventTime = function (checkTime) {
            this._lastEventCheckSeconds = checkTime;
        };
        return CubismMotionQueueEntry;
    }());
    Live2DCubismFramework.CubismMotionQueueEntry = CubismMotionQueueEntry;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/motion/cubismmotionqueuemanager.ts":
/*!******************************************************!*\
  !*** ./Framework/motion/cubismmotionqueuemanager.ts ***!
  \******************************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _cubismmotionqueueentry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cubismmotionqueueentry */ "./Framework/motion/cubismmotionqueueentry.ts");
/* harmony import */ var _type_csmvector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../type/csmvector */ "./Framework/type/csmvector.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */


var csmVector = _type_csmvector__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].csmVector;
var CubismMotionQueueEntry = _cubismmotionqueueentry__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismMotionQueueEntry;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * モーション再生の管理
     *
     * モーション再生の管理用クラス。CubismMotionモーションなどACubismMotionのサブクラスを再生するために使用する。
     *
     * @note 再生中に別のモーションが StartMotion()された場合は、新しいモーションに滑らかに変化し旧モーションは中断する。
     *       表情用モーション、体用モーションなどを分けてモーション化した場合など、
     *       複数のモーションを同時に再生させる場合は、複数のCubismMotionQueueManagerインスタンスを使用する。
     */
    var CubismMotionQueueManager = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismMotionQueueManager() {
            this._userTimeSeconds = 0.0;
            this._eventCallBack = null;
            this._eventCustomData = null;
            this._motions = new csmVector();
        }
        /**
         * デストラクタ
         */
        CubismMotionQueueManager.prototype.release = function () {
            for (var i = 0; i < this._motions.getSize(); ++i) {
                if (this._motions.at(i)) {
                    this._motions.at(i).release();
                    this._motions.set(i, void 0);
                    this._motions.set(i, null);
                }
            }
            this._motions = null;
        };
        /**
         * 指定したモーションの開始
         *
         * 指定したモーションを開始する。同じタイプのモーションが既にある場合は、既存のモーションに終了フラグを立て、フェードアウトを開始させる。
         *
         * @param   motion          開始するモーション
         * @param   autoDelete      再生が終了したモーションのインスタンスを削除するなら true
         * @param   userTimeSeconds デルタ時間の積算値[秒]
         * @return                      開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」
         */
        CubismMotionQueueManager.prototype.startMotion = function (motion, autoDelete, userTimeSeconds) {
            if (motion == null) {
                return Live2DCubismFramework.InvalidMotionQueueEntryHandleValue;
            }
            var motionQueueEntry = null;
            // 既にモーションがあれば終了フラグを立てる
            for (var i = 0; i < this._motions.getSize(); ++i) {
                motionQueueEntry = this._motions.at(i);
                if (motionQueueEntry == null) {
                    continue;
                }
                motionQueueEntry.startFadeout(motionQueueEntry._motion.getFadeOutTime(), userTimeSeconds); // フェードアウトを開始し終了する
            }
            motionQueueEntry = new CubismMotionQueueEntry(); // 終了時に破棄する
            motionQueueEntry._autoDelete = autoDelete;
            motionQueueEntry._motion = motion;
            this._motions.pushBack(motionQueueEntry);
            return motionQueueEntry._motionQueueEntryHandle;
        };
        /**
         * 全てのモーションの終了の確認
         * @return true 全て終了している
         * @return false 終了していない
         */
        CubismMotionQueueManager.prototype.isFinished = function () {
            // ------- 処理を行う -------
            // 既にモーションがあれば終了フラグを立てる
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    ite = this._motions.erase(ite); // 削除
                    continue;
                }
                var motion = motionQueueEntry._motion;
                if (motion == null) {
                    motionQueueEntry.release();
                    motionQueueEntry = void 0;
                    motionQueueEntry = null;
                    ite = this._motions.erase(ite); // 削除
                    continue;
                }
                // ----- 終了済みの処理があれば削除する ------
                if (!motionQueueEntry.isFinished()) {
                    return false;
                }
                else {
                    ite.preIncrement();
                }
            }
            return true;
        };
        /**
         * 指定したモーションの終了の確認
         * @param motionQueueEntryNumber モーションの識別番号
         * @return true 全て終了している
         * @return false 終了していない
         */
        CubismMotionQueueManager.prototype.isFinishedByHandle = function (motionQueueEntryNumber) {
            // 既にモーションがあれば終了フラグを立てる
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.increment()) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    continue;
                }
                if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber && !motionQueueEntry.isFinished()) {
                    return false;
                }
            }
            return true;
        };
        /**
         * 全てのモーションを停止する
         */
        CubismMotionQueueManager.prototype.stopAllMotions = function () {
            // ------- 処理を行う -------
            // 既にモーションがあれば終了フラグを立てる
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    ite = this._motions.erase(ite);
                    continue;
                }
                // ----- 終了済みの処理があれば削除する ------
                motionQueueEntry.release();
                motionQueueEntry = void 0;
                motionQueueEntry = null;
                ite = this._motions.erase(ite); // 削除
            }
        };
        /**
         * 指定したCubismMotionQueueEntryの取得

         * @param   motionQueueEntryNumber  モーションの識別番号
         * @return  指定したCubismMotionQueueEntry
         * @return  null   見つからなかった
         */
        CubismMotionQueueManager.prototype.getCubismMotionQueueEntry = function (motionQueueEntryNumber) {
            //------- 処理を行う -------
            // 既にモーションがあれば終了フラグを立てる
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.preIncrement()) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    continue;
                }
                if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {
                    return motionQueueEntry;
                }
            }
            return null;
        };
        /**
         * イベントを受け取るCallbackの登録
         *
         * @param callback コールバック関数
         * @param customData コールバックに返されるデータ
         */
        CubismMotionQueueManager.prototype.setEventCallback = function (callback, customData) {
            if (customData === void 0) { customData = null; }
            this._eventCallBack = callback;
            this._eventCustomData = customData;
        };
        /**
         * モーションを更新して、モデルにパラメータ値を反映する。
         *
         * @param   model   対象のモデル
         * @param   userTimeSeconds   デルタ時間の積算値[秒]
         * @return  true    モデルへパラメータ値の反映あり
         * @return  false   モデルへパラメータ値の反映なし(モーションの変化なし)
         */
        CubismMotionQueueManager.prototype.doUpdateMotion = function (model, userTimeSeconds) {
            var updated = false;
            // ------- 処理を行う --------
            // 既にモーションがあれば終了フラグを立てる
            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
                var motionQueueEntry = ite.ptr();
                if (motionQueueEntry == null) {
                    ite = this._motions.erase(ite); // 削除
                    continue;
                }
                var motion = motionQueueEntry._motion;
                if (motion == null) {
                    motionQueueEntry.release();
                    motionQueueEntry = void 0;
                    motionQueueEntry = null;
                    ite = this._motions.erase(ite); // 削除
                    continue;
                }
                // ------ 値を反映する ------
                motion.updateParameters(model, motionQueueEntry, userTimeSeconds);
                updated = true;
                // ------ ユーザトリガーイベントを検査する ----
                var firedList = motion.getFiredEvent(motionQueueEntry.getLastCheckEventTime() - motionQueueEntry.getStartTime(), userTimeSeconds - motionQueueEntry.getStartTime());
                for (var i = 0; i < firedList.getSize(); ++i) {
                    this._eventCallBack(this, firedList.at(i), this._eventCustomData);
                }
                motionQueueEntry.setLastCheckEventTime(userTimeSeconds);
                // ------ 終了済みの処理があれば削除する ------
                if (motionQueueEntry.isFinished()) {
                    motionQueueEntry.release();
                    motionQueueEntry = void 0;
                    motionQueueEntry = null;
                    ite = this._motions.erase(ite); // 削除
                }
                else {
                    ite.preIncrement();
                }
            }
            return updated;
        };
        return CubismMotionQueueManager;
    }());
    Live2DCubismFramework.CubismMotionQueueManager = CubismMotionQueueManager;
    Live2DCubismFramework.InvalidMotionQueueEntryHandleValue = -1;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/physics/cubismphysics.ts":
/*!********************************************!*\
  !*** ./Framework/physics/cubismphysics.ts ***!
  \********************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _cubismphysicsinternal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cubismphysicsinternal */ "./Framework/physics/cubismphysicsinternal.ts");
/* harmony import */ var _math_cubismvector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/cubismvector2 */ "./Framework/math/cubismvector2.ts");
/* harmony import */ var _math_cubismmath__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/cubismmath */ "./Framework/math/cubismmath.ts");
/* harmony import */ var _cubismphysicsjson__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cubismphysicsjson */ "./Framework/physics/cubismphysicsjson.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */




var CubismPhysicsJson = _cubismphysicsjson__WEBPACK_IMPORTED_MODULE_3__["Live2DCubismFramework"].CubismPhysicsJson;
var CubismMath = _math_cubismmath__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].CubismMath;
var CubismPhysicsRig = _cubismphysicsinternal__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismPhysicsRig;
var CubismPhysicsSubRig = _cubismphysicsinternal__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismPhysicsSubRig;
var CubismPhysicsInput = _cubismphysicsinternal__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismPhysicsInput;
var CubismPhysicsOutput = _cubismphysicsinternal__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismPhysicsOutput;
var CubismPhysicsParticle = _cubismphysicsinternal__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismPhysicsParticle;
var CubismPhysicsSource = _cubismphysicsinternal__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismPhysicsSource;
var CubismPhysicsTargetType = _cubismphysicsinternal__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismPhysicsTargetType;
var CubismVector2 = _math_cubismvector2__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismVector2;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /// physics types tags.
    var PhysicsTypeTagX = "X";
    var PhysicsTypeTagY = "Y";
    var PhysicsTypeTagAngle = "Angle";
    /// Constant of air resistance.
    var AirResistance = 5.0;
    /// Constant of maximum weight of input and output ratio.
    var MaximumWeight = 100.0;
    /// Constant of threshold of movement.
    var MovementThreshold = 0.001;
    /**
     * 物理演算クラス
     */
    var CubismPhysics = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismPhysics() {
            this._physicsRig = null;
            // set default options
            this._options = new Options();
            this._options.gravity.y = -1.0;
            this._options.gravity.x = 0;
            this._options.wind.x = 0;
            this._options.wind.y = 0;
        }
        /**
         * インスタンスの作成
         * @param buffer    physics3.jsonが読み込まれているバッファ
         * @param size      バッファのサイズ
         * @return 作成されたインスタンス
         */
        CubismPhysics.create = function (buffer, size) {
            var ret = new CubismPhysics();
            ret.parse(buffer, size);
            ret._physicsRig.gravity.y = 0;
            return ret;
        };
        /**
         * インスタンスを破棄する
         * @param physics 破棄するインスタンス
         */
        CubismPhysics.delete = function (physics) {
            if (physics != null) {
                physics.release();
                physics = null;
            }
        };
        /**
         * 物理演算の評価
         * @param model 物理演算の結果を適用するモデル
         * @param deltaTimeSeconds デルタ時間[秒]
         */
        CubismPhysics.prototype.evaluate = function (model, deltaTimeSeconds) {
            var totalAngle;
            var weight;
            var radAngle;
            var outputValue;
            var totalTranslation = new CubismVector2();
            var currentSetting;
            var currentInput;
            var currentOutput;
            var currentParticles;
            var parameterValue;
            var parameterMaximumValue;
            var parameterMinimumValue;
            var parameterDefaultValue;
            parameterValue = model.getModel().parameters.values;
            parameterMaximumValue = model.getModel().parameters.maximumValues;
            parameterMinimumValue = model.getModel().parameters.minimumValues;
            parameterDefaultValue = model.getModel().parameters.defaultValues;
            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
                totalAngle = { angle: 0.0 };
                totalTranslation.x = 0.0;
                totalTranslation.y = 0.0;
                currentSetting = this._physicsRig.settings.at(settingIndex);
                currentInput = this._physicsRig.inputs.get(currentSetting.baseInputIndex);
                currentOutput = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);
                currentParticles = this._physicsRig.particles.get(currentSetting.baseParticleIndex);
                // Load input parameters
                for (var i = 0; i < currentSetting.inputCount; ++i) {
                    weight = currentInput[i].weight / MaximumWeight;
                    if (currentInput[i].sourceParameterIndex == -1) {
                        currentInput[i].sourceParameterIndex = model.getParameterIndex(currentInput[i].source.id);
                    }
                    currentInput[i].getNormalizedParameterValue(totalTranslation, totalAngle, parameterValue[currentInput[i].sourceParameterIndex], parameterMinimumValue[currentInput[i].sourceParameterIndex], parameterMaximumValue[currentInput[i].sourceParameterIndex], parameterDefaultValue[currentInput[i].sourceParameterIndex], currentSetting.normalizationPosition, currentSetting.normalizationAngle, currentInput[0].reflect, weight);
                }
                radAngle = CubismMath.degreesToRadian(-totalAngle.angle);
                totalTranslation.x = (totalTranslation.x * CubismMath.cos(radAngle) - totalTranslation.y * CubismMath.sin(radAngle));
                totalTranslation.y = (totalTranslation.x * CubismMath.sin(radAngle) + totalTranslation.y * CubismMath.cos(radAngle));
                // Calculate particles position.
                updateParticles(currentParticles, currentSetting.particleCount, totalTranslation, totalAngle.angle, this._options.wind, MovementThreshold * currentSetting.normalizationPosition.maximum, deltaTimeSeconds, AirResistance);
                // Update output parameters.
                for (var i = 0; i < currentSetting.outputCount; ++i) {
                    var particleIndex = currentOutput[i].vertexIndex;
                    if (particleIndex < 1 || particleIndex >= currentSetting.particleCount) {
                        break;
                    }
                    if (currentOutput[i].destinationParameterIndex == -1) {
                        currentOutput[i].destinationParameterIndex = model.getParameterIndex(currentOutput[i].destination.id);
                    }
                    var translation = new CubismVector2();
                    translation.x = currentParticles[particleIndex].position.x - currentParticles[particleIndex - 1].position.x;
                    translation.y = currentParticles[particleIndex].position.y - currentParticles[particleIndex - 1].position.y;
                    outputValue = currentOutput[i].getValue(translation, currentParticles, particleIndex, currentOutput[i].reflect, this._options.gravity);
                    var destinationParameterIndex = currentOutput[i].destinationParameterIndex;
                    var outParameterValue = parameterValue.slice(destinationParameterIndex);
                    updateOutputParameterValue(outParameterValue, parameterMinimumValue[destinationParameterIndex], parameterMaximumValue[destinationParameterIndex], outputValue, currentOutput[i]);
                    // 値を反映
                    for (var offset = destinationParameterIndex, outParamIndex = 0; offset < parameterValue.length; offset++, outParamIndex++) {
                        parameterValue[offset] = outParameterValue[outParamIndex];
                    }
                }
            }
        };
        /**
         * オプションの設定
         * @param options オプション
         */
        CubismPhysics.prototype.setOptions = function (options) {
            this._options = options;
        };
        /**
         * オプションの取得
         * @return オプション
         */
        CubismPhysics.prototype.getOption = function () {
            return this._options;
        };
        /**
         * デストラクタ相当の処理
         */
        CubismPhysics.prototype.release = function () {
            this._physicsRig = void 0;
            this._physicsRig = null;
        };
        /**
         * physics3.jsonをパースする。
         * @param physicsJson physics3.jsonが読み込まれているバッファ
         * @param size バッファのサイズ
         */
        CubismPhysics.prototype.parse = function (physicsJson, size) {
            this._physicsRig = new CubismPhysicsRig();
            var json = new CubismPhysicsJson(physicsJson, size);
            this._physicsRig.gravity = json.getGravity();
            this._physicsRig.wind = json.getWind();
            this._physicsRig.subRigCount = json.getSubRigCount();
            this._physicsRig.settings.updateSize(this._physicsRig.subRigCount, CubismPhysicsSubRig, true);
            this._physicsRig.inputs.updateSize(json.getTotalInputCount(), CubismPhysicsInput, true);
            this._physicsRig.outputs.updateSize(json.getTotalOutputCount(), CubismPhysicsOutput, true);
            this._physicsRig.particles.updateSize(json.getVertexCount(), CubismPhysicsParticle, true);
            var inputIndex = 0, outputIndex = 0, particleIndex = 0;
            for (var i = 0; i < this._physicsRig.settings.getSize(); ++i) {
                this._physicsRig.settings.at(i).normalizationPosition.minimum = json.getNormalizationPositionMinimumValue(i);
                this._physicsRig.settings.at(i).normalizationPosition.maximum = json.getNormalizationPositionMaximumValue(i);
                this._physicsRig.settings.at(i).normalizationPosition.defalut = json.getNormalizationPositionDefaultValue(i);
                this._physicsRig.settings.at(i).normalizationAngle.minimum = json.getNormalizationAngleMinimumValue(i);
                this._physicsRig.settings.at(i).normalizationAngle.maximum = json.getNormalizationAngleMaximumValue(i);
                this._physicsRig.settings.at(i).normalizationAngle.defalut = json.getNormalizationAngleDefaultValue(i);
                // Input
                this._physicsRig.settings.at(i).inputCount = json.getInputCount(i);
                this._physicsRig.settings.at(i).baseInputIndex = inputIndex;
                for (var j = 0; j < this._physicsRig.settings.at(i).inputCount; ++j) {
                    this._physicsRig.inputs.at(inputIndex + j).sourceParameterIndex = -1;
                    this._physicsRig.inputs.at(inputIndex + j).weight = json.getInputWeight(i, j);
                    this._physicsRig.inputs.at(inputIndex + j).reflect = json.getInputReflect(i, j);
                    if (json.getInputType(i, j) == PhysicsTypeTagX) {
                        this._physicsRig.inputs.at(inputIndex + j).type = CubismPhysicsSource.CubismPhysicsSource_X;
                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationXFromNormalizedParameterValue;
                    }
                    else if (json.getInputType(i, j) == PhysicsTypeTagY) {
                        this._physicsRig.inputs.at(inputIndex + j).type = CubismPhysicsSource.CubismPhysicsSource_Y;
                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationYFromNormalizedParamterValue;
                    }
                    else if (json.getInputType(i, j) == PhysicsTypeTagAngle) {
                        this._physicsRig.inputs.at(inputIndex + j).type = CubismPhysicsSource.CubismPhysicsSource_Angle;
                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputAngleFromNormalizedParameterValue;
                    }
                    this._physicsRig.inputs.at(inputIndex + j).source.targetType = CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;
                    this._physicsRig.inputs.at(inputIndex + j).source.id = json.getInputSourceId(i, j);
                }
                inputIndex += this._physicsRig.settings.at(i).inputCount;
                // Output
                this._physicsRig.settings.at(i).outputCount = json.getOutputCount(i);
                this._physicsRig.settings.at(i).baseOutputIndex = outputIndex;
                for (var j = 0; j < this._physicsRig.settings.at(i).outputCount; ++j) {
                    this._physicsRig.outputs.at(outputIndex + j).destinationParameterIndex = -1;
                    this._physicsRig.outputs.at(outputIndex + j).vertexIndex = json.getOutputVertexIndex(i, j);
                    this._physicsRig.outputs.at(outputIndex + j).angleScale = json.getOutputAngleScale(i, j);
                    this._physicsRig.outputs.at(outputIndex + j).weight = json.getOutputWeight(i, j);
                    this._physicsRig.outputs.at(outputIndex + j).destination.targetType = CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;
                    this._physicsRig.outputs.at(outputIndex + j).destination.id = json.getOutputDestinationId(i, j);
                    if (json.getOutputType(i, j) == PhysicsTypeTagX) {
                        this._physicsRig.outputs.at(outputIndex + j).type = CubismPhysicsSource.CubismPhysicsSource_X;
                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputTranslationX;
                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleTranslationX;
                    }
                    else if (json.getOutputType(i, j) == PhysicsTypeTagY) {
                        this._physicsRig.outputs.at(outputIndex + j).type = CubismPhysicsSource.CubismPhysicsSource_Y;
                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputTranslationY;
                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleTranslationY;
                    }
                    else if (json.getOutputType(i, j) == PhysicsTypeTagAngle) {
                        this._physicsRig.outputs.at(outputIndex + j).type = CubismPhysicsSource.CubismPhysicsSource_Angle;
                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputAngle;
                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleAngle;
                    }
                    this._physicsRig.outputs.at(outputIndex + j).reflect = json.getOutputReflect(i, j);
                }
                outputIndex += this._physicsRig.settings.at(i).outputCount;
                // Particle
                this._physicsRig.settings.at(i).particleCount = json.getParticleCount(i);
                this._physicsRig.settings.at(i).baseParticleIndex = particleIndex;
                for (var j = 0; j < this._physicsRig.settings.at(i).particleCount; ++j) {
                    this._physicsRig.particles.at(particleIndex + j).mobility = json.getParticleMobility(i, j);
                    this._physicsRig.particles.at(particleIndex + j).delay = json.getParticleDelay(i, j);
                    this._physicsRig.particles.at(particleIndex + j).acceleration = json.getParticleAcceleration(i, j);
                    this._physicsRig.particles.at(particleIndex + j).radius = json.getParticleRadius(i, j);
                    this._physicsRig.particles.at(particleIndex + j).position = json.getParticlePosition(i, j);
                }
                particleIndex += this._physicsRig.settings.at(i).particleCount;
            }
            this.initialize();
            json.release();
            json = void 0;
            json = null;
        };
        /**
         * 初期化する
         */
        CubismPhysics.prototype.initialize = function () {
            var strand;
            var currentSetting;
            var radius;
            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
                currentSetting = this._physicsRig.settings.at(settingIndex);
                strand = this._physicsRig.particles.get(currentSetting.baseParticleIndex);
                // Initialize the top of particle.
                strand[0].initialPosition = new CubismVector2(0.0, 0.0);
                strand[0].lastPosition = new CubismVector2(strand[0].initialPosition.x, strand[0].initialPosition.y);
                strand[0].lastGravity = new CubismVector2(0.0, -1.0);
                strand[0].lastGravity.y *= -1.0;
                strand[0].velocity = new CubismVector2(0.0, 0.0);
                strand[0].force = new CubismVector2(0.0, 0.0);
                // Initialize paritcles.
                for (var i = 1; i < currentSetting.particleCount; ++i) {
                    radius = new CubismVector2(0.0, 0.0);
                    radius.y = strand[i].radius;
                    strand[i].initialPosition = new CubismVector2(strand[i - 1].initialPosition.x + radius.x, strand[i - 1].initialPosition.y + radius.y);
                    strand[i].position = new CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);
                    strand[i].lastPosition = new CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);
                    strand[i].lastGravity = new CubismVector2(0.0, -1.0);
                    strand[i].lastGravity.y *= -1.0;
                    strand[i].velocity = new CubismVector2(0.0, 0.0);
                    strand[i].force = new CubismVector2(0.0, 0.0);
                }
            }
        };
        return CubismPhysics;
    }());
    Live2DCubismFramework.CubismPhysics = CubismPhysics;
    /**
     * 物理演算のオプション
     */
    var Options = /** @class */ (function () {
        function Options() {
            this.gravity = new CubismVector2(0, 0);
            this.wind = new CubismVector2(0, 0);
        }
        return Options;
    }());
    Live2DCubismFramework.Options = Options;
    /**
     * Gets sign.
     *
     * @param value Evaluation target value.
     *
     * @return Sign of value.
     */
    function sign(value) {
        var ret = 0;
        if (value > 0.0) {
            ret = 1;
        }
        else if (value < 0.0) {
            ret = -1;
        }
        return ret;
    }
    function getInputTranslationXFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {
        targetTranslation.x += normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;
    }
    function getInputTranslationYFromNormalizedParamterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {
        targetTranslation.y += normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;
    }
    function getInputAngleFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizaitionPosition, normalizationAngle, isInverted, weight) {
        targetAngle.angle += normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationAngle.minimum, normalizationAngle.maximum, normalizationAngle.defalut, isInverted) * weight;
    }
    function getOutputTranslationX(translation, particles, particleIndex, isInverted, parentGravity) {
        var outputValue = translation.x;
        if (isInverted) {
            outputValue *= -1.0;
        }
        return outputValue;
    }
    function getOutputTranslationY(translation, particles, particleIndex, isInverted, parentGravity) {
        var outputValue = translation.y;
        if (isInverted) {
            outputValue *= -1.0;
        }
        return outputValue;
    }
    function getOutputAngle(translation, particles, particleIndex, isInverted, parentGravity) {
        var outputValue;
        if (particleIndex >= 2) {
            parentGravity = particles[particleIndex - 1].position.substract(particles[particleIndex - 2].position);
        }
        else {
            parentGravity = parentGravity.multiplyByScaler(-1.0);
        }
        outputValue = CubismMath.directionToRadian(parentGravity, translation);
        if (isInverted) {
            outputValue *= -1.0;
        }
        return outputValue;
    }
    function getRangeValue(min, max) {
        var maxValue = CubismMath.max(min, max);
        var minValue = CubismMath.min(min, max);
        return CubismMath.abs(maxValue - minValue);
    }
    function getDefaultValue(min, max) {
        var minValue = CubismMath.min(min, max);
        return minValue + (getRangeValue(min, max) / 2.0);
    }
    function getOutputScaleTranslationX(translationScale, angleScale) {
        return JSON.parse(JSON.stringify(translationScale.x));
    }
    function getOutputScaleTranslationY(translationScale, angleScale) {
        return JSON.parse(JSON.stringify(translationScale.y));
    }
    function getOutputScaleAngle(translationScale, angleScale) {
        return JSON.parse(JSON.stringify(angleScale));
    }
    /**
     * Updates particles.
     *
     * @param strand                Target array of particle.
     * @param strandCount           Count of particle.
     * @param totalTranslation      Total translation value.
     * @param totalAngle            Total angle.
     * @param windDirection         Direction of Wind.
     * @param thresholdValue        Threshold of movement.
     * @param deltaTimeSeconds      Delta time.
     * @param airResistance         Air resistance.
     */
    function updateParticles(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue, deltaTimeSeconds, airResistance) {
        var totalRadian;
        var delay;
        var radian;
        var currentGravity;
        var direction = new CubismVector2(0.0, 0.0);
        var velocity = new CubismVector2(0.0, 0.0);
        var force = new CubismVector2(0.0, 0.0);
        var newDirection = new CubismVector2(0.0, 0.0);
        strand[0].position = new CubismVector2(totalTranslation.x, totalTranslation.y);
        totalRadian = CubismMath.degreesToRadian(totalAngle);
        currentGravity = CubismMath.radianToDirection(totalRadian);
        currentGravity.normalize();
        for (var i = 1; i < strandCount; ++i) {
            strand[i].force = currentGravity.multiplyByScaler(strand[i].acceleration).add(windDirection);
            strand[i].lastPosition = new CubismVector2(strand[i].position.x, strand[i].position.y);
            delay = strand[i].delay * deltaTimeSeconds * 30.0;
            direction = strand[i].position.substract(strand[i - 1].position);
            radian = CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) / airResistance;
            direction.x = ((CubismMath.cos(radian) * direction.x) - (direction.y * CubismMath.sin(radian)));
            direction.y = ((CubismMath.sin(radian) * direction.x) + (direction.y * CubismMath.cos(radian)));
            strand[i].position = strand[i - 1].position.add(direction);
            velocity = strand[i].velocity.multiplyByScaler(delay);
            force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);
            strand[i].position = strand[i].position.add(velocity).add(force);
            newDirection = strand[i].position.substract(strand[i - 1].position);
            newDirection.normalize();
            strand[i].position = strand[i - 1].position.add(newDirection.multiplyByScaler(strand[i].radius));
            if (CubismMath.abs(strand[i].position.x) < thresholdValue) {
                strand[i].position.x = 0.0;
            }
            if (delay != 0.0) {
                strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);
                strand[i].velocity = strand[i].velocity.divisionByScalar(delay);
                strand[i].velocity = strand[i].velocity.multiplyByScaler(strand[i].mobility);
            }
            strand[i].force = new CubismVector2(0.0, 0.0);
            strand[i].lastGravity = new CubismVector2(currentGravity.x, currentGravity.y);
        }
    }
    /**
     * Updates output parameter value.
     * @param parameterValue            Target parameter value.
     * @param parameterValueMinimum     Minimum of parameter value.
     * @param parameterValueMaximum     Maximum of parameter value.
     * @param translation               Translation value.
     */
    function updateOutputParameterValue(parameterValue, parameterValueMinimum, parameterValueMaximum, translation, output) {
        var outputScale;
        var value;
        var weight;
        outputScale = output.getScale(output.translationScale, output.angleScale);
        value = translation * outputScale;
        if (value < parameterValueMinimum) {
            if (value < output.valueBelowMinimum) {
                output.valueBelowMinimum = value;
            }
            value = parameterValueMinimum;
        }
        else if (value > parameterValueMaximum) {
            if (value > output.valueExceededMaximum) {
                output.valueExceededMaximum = value;
            }
            value = parameterValueMaximum;
        }
        weight = (output.weight / MaximumWeight);
        if (weight >= 1.0) {
            parameterValue[0] = value;
        }
        else {
            value = (parameterValue[0] * (1.0 - weight)) + (value * weight);
            parameterValue[0] = value;
        }
    }
    function normalizeParameterValue(value, parameterMinimum, parameterMaximum, parameterDefault, normalizedMinimum, normalizedMaximum, normalizedDefault, isInverted) {
        var result = 0.0;
        var maxValue = CubismMath.max(parameterMaximum, parameterMinimum);
        if (maxValue < value) {
            return result;
        }
        var minValue = CubismMath.min(parameterMaximum, parameterMinimum);
        if (minValue > value) {
            return result;
        }
        var minNormValue = CubismMath.min(normalizedMinimum, normalizedMaximum);
        var maxNormValue = CubismMath.max(normalizedMinimum, normalizedMaximum);
        var middleNormValue = normalizedDefault;
        var middleValue = getDefaultValue(minValue, maxValue);
        var paramValue = value - middleValue;
        switch (sign(paramValue)) {
            case 1:
                {
                    var nLength = maxNormValue - middleNormValue;
                    var pLength = maxValue - middleValue;
                    if (pLength != 0.0) {
                        result = paramValue * (nLength / pLength);
                        result += middleNormValue;
                    }
                    break;
                }
            case -1:
                {
                    var nLength = minNormValue - middleNormValue;
                    var pLength = minValue - middleValue;
                    if (pLength != 0.0) {
                        result = paramValue * (nLength / pLength);
                        result += middleNormValue;
                    }
                    break;
                }
            case 0:
                {
                    result = middleNormValue;
                    break;
                }
            default:
                {
                    break;
                }
        }
        return (isInverted)
            ? result
            : (result * -1.0);
    }
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/physics/cubismphysicsinternal.ts":
/*!****************************************************!*\
  !*** ./Framework/physics/cubismphysicsinternal.ts ***!
  \****************************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _math_cubismvector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/cubismvector2 */ "./Framework/math/cubismvector2.ts");
/* harmony import */ var _type_csmvector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../type/csmvector */ "./Framework/type/csmvector.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */


var csmVector = _type_csmvector__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].csmVector;
var CubismVector2 = _math_cubismvector2__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismVector2;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * 物理演算の適用先の種類
     */
    var CubismPhysicsTargetType;
    (function (CubismPhysicsTargetType) {
        CubismPhysicsTargetType[CubismPhysicsTargetType["CubismPhysicsTargetType_Parameter"] = 0] = "CubismPhysicsTargetType_Parameter";
    })(CubismPhysicsTargetType = Live2DCubismFramework.CubismPhysicsTargetType || (Live2DCubismFramework.CubismPhysicsTargetType = {}));
    /**
     * 物理演算の入力の種類
     */
    var CubismPhysicsSource;
    (function (CubismPhysicsSource) {
        CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_X"] = 0] = "CubismPhysicsSource_X";
        CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_Y"] = 1] = "CubismPhysicsSource_Y";
        CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_Angle"] = 2] = "CubismPhysicsSource_Angle";
    })(CubismPhysicsSource = Live2DCubismFramework.CubismPhysicsSource || (Live2DCubismFramework.CubismPhysicsSource = {}));
    /**
     * @brief 物理演算で使用する外部の力
     *
     * 物理演算で使用する外部の力。
     */
    var PhysicsJsonEffectiveForces = /** @class */ (function () {
        function PhysicsJsonEffectiveForces() {
            this.gravity = new CubismVector2(0, 0);
            this.wind = new CubismVector2(0, 0);
        }
        return PhysicsJsonEffectiveForces;
    }());
    Live2DCubismFramework.PhysicsJsonEffectiveForces = PhysicsJsonEffectiveForces;
    /**
     * 物理演算のパラメータ情報
     */
    var CubismPhysicsParameter = /** @class */ (function () {
        function CubismPhysicsParameter() {
        }
        return CubismPhysicsParameter;
    }());
    Live2DCubismFramework.CubismPhysicsParameter = CubismPhysicsParameter;
    /**
     * 物理演算の正規化情報
     */
    var CubismPhysicsNormalization = /** @class */ (function () {
        function CubismPhysicsNormalization() {
        }
        return CubismPhysicsNormalization;
    }());
    Live2DCubismFramework.CubismPhysicsNormalization = CubismPhysicsNormalization;
    /**
     * 物理演算の演算委使用する物理点の情報
     */
    var CubismPhysicsParticle = /** @class */ (function () {
        function CubismPhysicsParticle() {
            this.initialPosition = new CubismVector2(0, 0);
            this.position = new CubismVector2(0, 0);
            this.lastPosition = new CubismVector2(0, 0);
            this.lastGravity = new CubismVector2(0, 0);
            this.force = new CubismVector2(0, 0);
            this.velocity = new CubismVector2(0, 0);
        }
        return CubismPhysicsParticle;
    }());
    Live2DCubismFramework.CubismPhysicsParticle = CubismPhysicsParticle;
    /**
     * 物理演算の物理点の管理
     */
    var CubismPhysicsSubRig = /** @class */ (function () {
        function CubismPhysicsSubRig() {
            this.normalizationPosition = new CubismPhysicsNormalization();
            this.normalizationAngle = new CubismPhysicsNormalization();
        }
        return CubismPhysicsSubRig;
    }());
    Live2DCubismFramework.CubismPhysicsSubRig = CubismPhysicsSubRig;
    /**
     * 物理演算の入力情報
     */
    var CubismPhysicsInput = /** @class */ (function () {
        function CubismPhysicsInput() {
            this.source = new CubismPhysicsParameter();
        }
        return CubismPhysicsInput;
    }());
    Live2DCubismFramework.CubismPhysicsInput = CubismPhysicsInput;
    /**
     * @brief 物理演算の出力情報
     *
     * 物理演算の出力情報。
     */
    var CubismPhysicsOutput = /** @class */ (function () {
        function CubismPhysicsOutput() {
            this.destination = new CubismPhysicsParameter();
            this.translationScale = new CubismVector2(0, 0);
        }
        return CubismPhysicsOutput;
    }());
    Live2DCubismFramework.CubismPhysicsOutput = CubismPhysicsOutput;
    /**
     * @brief 物理演算のデータ
     *
     * 物理演算のデータ。
     */
    var CubismPhysicsRig = /** @class */ (function () {
        function CubismPhysicsRig() {
            this.settings = new csmVector();
            this.inputs = new csmVector();
            this.outputs = new csmVector();
            this.particles = new csmVector();
            this.gravity = new CubismVector2(0, 0);
            this.wind = new CubismVector2(0, 0);
        }
        return CubismPhysicsRig;
    }());
    Live2DCubismFramework.CubismPhysicsRig = CubismPhysicsRig;
    ;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/physics/cubismphysicsjson.ts":
/*!************************************************!*\
  !*** ./Framework/physics/cubismphysicsjson.ts ***!
  \************************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _utils_cubismjson__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cubismjson */ "./Framework/utils/cubismjson.ts");
/* harmony import */ var _math_cubismvector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/cubismvector2 */ "./Framework/math/cubismvector2.ts");
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */



var CubismFramework = _live2dcubismframework__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].CubismFramework;
var CubismVector2 = _math_cubismvector2__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismVector2;
var CubismJson = _utils_cubismjson__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismJson;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    // JSON keys
    var Position = "Position";
    var X = "X";
    var Y = "Y";
    var Angle = "Angle";
    var Type = "Type";
    var Id = "Id";
    // Meta
    var Meta = "Meta";
    var EffectiveForces = "EffectiveForces";
    var TotalInputCount = "TotalInputCount";
    var TotalOutputCount = "TotalOutputCount";
    var PhysicsSettingCount = "PhysicsSettingCount";
    var Gravity = "Gravity";
    var Wind = "Wind";
    var VertexCount = "VertexCount";
    // PhysicsSettings
    var PhysicsSettings = "PhysicsSettings";
    var Normalization = "Normalization";
    var Minimum = "Minimum";
    var Maximum = "Maximum";
    var Default = "Default";
    var Reflect = "Reflect";
    var Weight = "Weight";
    // Input
    var Input = "Input";
    var Source = "Source";
    // Output
    var Output = "Output";
    var Scale = "Scale";
    var VertexIndex = "VertexIndex";
    var Destination = "Destination";
    // Particle
    var Vertices = "Vertices";
    var Mobility = "Mobility";
    var Delay = "Delay";
    var Radius = "Radius";
    var Acceleration = "Acceleration";
    /**
     * physics3.jsonのコンテナ。
     */
    var CubismPhysicsJson = /** @class */ (function () {
        /**
         * コンストラクタ
         * @param buffer physics3.jsonが読み込まれているバッファ
         * @param size バッファのサイズ
         */
        function CubismPhysicsJson(buffer, size) {
            this._json = CubismJson.create(buffer, size);
        }
        /**
         * デストラクタ相当の処理
         */
        CubismPhysicsJson.prototype.release = function () {
            CubismJson.delete(this._json);
        };
        /**
         * 重力の取得
         * @return 重力
         */
        CubismPhysicsJson.prototype.getGravity = function () {
            var ret = new CubismVector2(0, 0);
            ret.x = this._json.getRoot().getMap().getValue(Meta).getMap().getValue(EffectiveForces).getMap().getValue(Gravity).getMap().getValue(X).toFloat();
            ret.y = this._json.getRoot().getMap().getValue(Meta).getMap().getValue(EffectiveForces).getMap().getValue(Gravity).getMap().getValue(Y).toFloat();
            return ret;
        };
        /**
         * 風の取得
         * @return 風
         */
        CubismPhysicsJson.prototype.getWind = function () {
            var ret = new CubismVector2(0, 0);
            ret.x = this._json.getRoot().getMap().getValue(Meta).getMap().getValue(EffectiveForces).getMap().getValue(Wind).getMap().getValue(X).toFloat();
            ret.y = this._json.getRoot().getMap().getValue(Meta).getMap().getValue(EffectiveForces).getMap().getValue(Wind).getMap().getValue(Y).toFloat();
            return ret;
        };
        /**
         * 物理店の管理の個数の取得
         * @return 物理店の管理の個数
         */
        CubismPhysicsJson.prototype.getSubRigCount = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(PhysicsSettingCount).toInt();
        };
        /**
         * 入力の総合計の取得
         * @return 入力の総合計
         */
        CubismPhysicsJson.prototype.getTotalInputCount = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(TotalInputCount).toInt();
        };
        /**
         * 出力の総合計の取得
         * @return 出力の総合計
         */
        CubismPhysicsJson.prototype.getTotalOutputCount = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(TotalOutputCount).toInt();
        };
        /**
         * 物理点の個数の取得
         * @return 物理点の個数
         */
        CubismPhysicsJson.prototype.getVertexCount = function () {
            return this._json.getRoot().getMap().getValue(Meta).getMap().getValue(VertexCount).toInt();
        };
        /**
         * 正規化された位置の最小値の取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @return 正規化された位置の最小値
         */
        CubismPhysicsJson.prototype.getNormalizationPositionMinimumValue = function (physicsSettingIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Normalization).getMap().getValue(Position).getMap().getValue(Minimum).toFloat();
        };
        /**
         * 正規化された位置の最大値の取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @return 正規化された位置の最大値
         */
        CubismPhysicsJson.prototype.getNormalizationPositionMaximumValue = function (physicsSettingIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Normalization).getMap().getValue(Position).getMap().getValue(Maximum).toFloat();
        };
        /**
         * 正規化された位置のデフォルト値の取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @return 正規化された位置のデフォルト値
         */
        CubismPhysicsJson.prototype.getNormalizationPositionDefaultValue = function (physicsSettingIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Normalization).getMap().getValue(Position).getMap().getValue(Default).toFloat();
        };
        /**
         * 正規化された角度の最小値の取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @return 正規化された角度の最小値
         */
        CubismPhysicsJson.prototype.getNormalizationAngleMinimumValue = function (physicsSettingIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Normalization).getMap().getValue(Angle).getMap().getValue(Minimum).toFloat();
        };
        /**
         * 正規化された角度の最大値の取得
         * @param physicsSettingIndex
         * @return 正規化された角度の最大値
         */
        CubismPhysicsJson.prototype.getNormalizationAngleMaximumValue = function (physicsSettingIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Normalization).getMap().getValue(Angle).getMap().getValue(Maximum).toFloat();
        };
        /**
         * 正規化された角度のデフォルト値の取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @return 正規化された角度のデフォルト値
         */
        CubismPhysicsJson.prototype.getNormalizationAngleDefaultValue = function (physicsSettingIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Normalization).getMap().getValue(Angle).getMap().getValue(Default).toFloat();
        };
        /**
         * 入力の個数の取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @return 入力の個数
         */
        CubismPhysicsJson.prototype.getInputCount = function (physicsSettingIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Input).getVector().getSize();
        };
        /**
         * 入力の重みの取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param inputIndex 入力のインデックス
         * @return 入力の重み
         */
        CubismPhysicsJson.prototype.getInputWeight = function (physicsSettingIndex, inputIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Input).getVector().at(inputIndex).getMap().getValue(Weight).toFloat();
        };
        /**
         * 入力の反転の取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param inputIndex 入力のインデックス
         * @return 入力の反転
         */
        CubismPhysicsJson.prototype.getInputReflect = function (physicsSettingIndex, inputIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Input).getVector().at(inputIndex).getMap().getValue(Reflect).toBoolean();
        };
        /**
         * 入力の種類の取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param inputIndex 入力のインデックス
         * @return 入力の種類
         */
        CubismPhysicsJson.prototype.getInputType = function (physicsSettingIndex, inputIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Input).getVector().at(inputIndex).getMap().getValue(Type).getRawString();
        };
        /**
         * 入力元のIDの取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param inputIndex 入力のインデックス
         * @return 入力元のID
         */
        CubismPhysicsJson.prototype.getInputSourceId = function (physicsSettingIndex, inputIndex) {
            return CubismFramework.getIdManager().getId(this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Input).getVector().at(inputIndex).getMap().getValue(Source).getMap().getValue(Id).getRawString());
        };
        /**
         * 出力の個数の取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @return 出力の個数
         */
        CubismPhysicsJson.prototype.getOutputCount = function (physicsSettingIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Output).getVector().getSize();
        };
        /**
         * 出力の物理点のインデックスの取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param outputIndex 出力のインデックス
         * @return 出力の物理点のインデックス
         */
        CubismPhysicsJson.prototype.getOutputVertexIndex = function (physicsSettingIndex, outputIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Output).getVector().at(outputIndex).getMap().getValue(VertexIndex).toInt();
        };
        /**
         * 出力の角度のスケールを取得する
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param outputIndex 出力のインデックス
         * @return 出力の角度のスケール
         */
        CubismPhysicsJson.prototype.getOutputAngleScale = function (physicsSettingIndex, outputIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Output).getVector().at(outputIndex).getMap().getValue(Scale).toFloat();
        };
        /**
         * 出力の重みの取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param outputIndex 出力のインデックス
         * @return 出力の重み
         */
        CubismPhysicsJson.prototype.getOutputWeight = function (physicsSettingIndex, outputIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Output).getVector().at(outputIndex).getMap().getValue(Weight).toFloat();
        };
        /**
         * 出力先のIDの取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param outputIndex　出力のインデックス
         * @return 出力先のID
         */
        CubismPhysicsJson.prototype.getOutputDestinationId = function (physicsSettingIndex, outputIndex) {
            return CubismFramework.getIdManager().getId(this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Output).getVector().at(outputIndex).getMap().getValue(Destination).getMap().getValue(Id).getRawString());
        };
        /**
         * 出力の種類の取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param outputIndex 出力のインデックス
         * @return 出力の種類
         */
        CubismPhysicsJson.prototype.getOutputType = function (physicsSettingIndex, outputIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Output).getVector().at(outputIndex).getMap().getValue(Type).getRawString();
        };
        /**
         * 出力の反転の取得
         * @param physicsSettingIndex 物理演算のインデックス
         * @param outputIndex 出力のインデックス
         * @return 出力の反転
         */
        CubismPhysicsJson.prototype.getOutputReflect = function (physicsSettingIndex, outputIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Output).getVector().at(outputIndex).getMap().getValue(Reflect).toBoolean();
        };
        /**
         * 物理点の個数の取得
         * @param physicsSettingIndex 物理演算男設定のインデックス
         * @return 物理点の個数
         */
        CubismPhysicsJson.prototype.getParticleCount = function (physicsSettingIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Vertices).getVector().getSize();
        };
        /**
         * 物理点の動きやすさの取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param vertexIndex 物理点のインデックス
         * @return 物理点の動きやすさ
         */
        CubismPhysicsJson.prototype.getParticleMobility = function (physicsSettingIndex, vertexIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Vertices).getVector().at(vertexIndex).getMap().getValue(Mobility).toFloat();
        };
        /**
         * 物理点の遅れの取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param vertexIndex 物理点のインデックス
         * @return 物理点の遅れ
         */
        CubismPhysicsJson.prototype.getParticleDelay = function (physicsSettingIndex, vertexIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Vertices).getVector().at(vertexIndex).getMap().getValue(Delay).toFloat();
        };
        /**
         * 物理点の加速度の取得
         * @param physicsSettingIndex 物理演算の設定
         * @param vertexIndex 物理点のインデックス
         * @return 物理点の加速度
         */
        CubismPhysicsJson.prototype.getParticleAcceleration = function (physicsSettingIndex, vertexIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Vertices).getVector().at(vertexIndex).getMap().getValue(Acceleration).toFloat();
        };
        /**
         * 物理点の距離の取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param vertexIndex 物理点のインデックス
         * @return 物理点の距離
         */
        CubismPhysicsJson.prototype.getParticleRadius = function (physicsSettingIndex, vertexIndex) {
            return this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Vertices).getVector().at(vertexIndex).getMap().getValue(Radius).toInt();
        };
        /**
         * 物理点の位置の取得
         * @param physicsSettingIndex 物理演算の設定のインデックス
         * @param vertexInde 物理点のインデックス
         * @return 物理点の位置
         */
        CubismPhysicsJson.prototype.getParticlePosition = function (physicsSettingIndex, vertexIndex) {
            var ret = new CubismVector2(0, 0);
            ret.x = this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Vertices).getVector().at(vertexIndex).getMap().getValue(Position).getMap().getValue(X).toFloat();
            ret.y = this._json.getRoot().getMap().getValue(PhysicsSettings).getVector().at(physicsSettingIndex).getMap().getValue(Vertices).getVector().at(vertexIndex).getMap().getValue(Position).getMap().getValue(Y).toFloat();
            return ret;
        };
        return CubismPhysicsJson;
    }());
    Live2DCubismFramework.CubismPhysicsJson = CubismPhysicsJson;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/rendering/cubismrenderer.ts":
/*!***********************************************!*\
  !*** ./Framework/rendering/cubismrenderer.ts ***!
  \***********************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _math_cubismmatrix44__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/cubismmatrix44 */ "./Framework/math/cubismmatrix44.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */

var CubismMatrix44 = _math_cubismmatrix44__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismMatrix44;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * モデル描画を処理するレンダラ
     *
     * サブクラスに環境依存の描画命令を記述する。
     */
    var CubismRenderer = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismRenderer() {
            this._isCulling = false;
            this._isPremultipliedAlpha = false;
            this._anisortopy = 0.0;
            this._model = null;
            this._modelColor = new CubismTextureColor();
            // 単位行列に初期化
            this._mvpMatrix4x4 = new CubismMatrix44();
            this._mvpMatrix4x4.loadIdentity();
        }
        /**
         * レンダラのインスタンスを生成して取得する
         *
         * @return レンダラのインスタンス
         */
        CubismRenderer.create = function () {
            return null;
        };
        /**
         * レンダラのインスタンスを解放する
         */
        CubismRenderer.delete = function (renderer) {
            renderer = void 0;
            renderer = null;
        };
        /**
         * レンダラが保持する静的なリソースを開放する
         */
        CubismRenderer.StaticRelease = function () {
            //CubismRenderer_WebGL.doStaticRelease();
        };
        /**
         * レンダラの初期化処理を実行する
         * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる
         * @param model モデルのインスタンス
         */
        CubismRenderer.prototype.initialize = function (model) {
            this._model = model;
        };
        /**
         * モデルを描画する
         */
        CubismRenderer.prototype.drawModel = function () {
            if (this.getModel() == null)
                return;
            this.doDrawModel();
        };
        /**
         * Model-View-Projection 行列をセットする
         * 配列は複製されるので、元の配列は外で破棄して良い
         * @param matrix44 Model-View-Projection 行列
         */
        CubismRenderer.prototype.setMvpMatrix = function (matrix44) {
            this._mvpMatrix4x4.setMatrix(matrix44.getArray());
        };
        /**
         * Model-View-Projection 行列を取得する
         * @return Model-View-Projection 行列
         */
        CubismRenderer.prototype.getMvpMatrix = function () {
            return this._mvpMatrix4x4;
        };
        /**
         * モデルの色をセットする
         * 各色0.0~1.0の間で指定する（1.0が標準の状態）
         * @param red 赤チャンネルの値
         * @param green 緑チャンネルの値
         * @param blue 青チャンネルの値
         * @param alpha αチャンネルの値
         */
        CubismRenderer.prototype.setModelColor = function (red, green, blue, alpha) {
            if (red < 0.0) {
                red = 0.0;
            }
            else if (red > 1.0) {
                red = 1.0;
            }
            if (green < 0.0) {
                green = 0.0;
            }
            else if (green > 1.0) {
                green = 1.0;
            }
            if (blue < 0.0) {
                blue = 0.0;
            }
            else if (blue > 1.0) {
                blue = 1.0;
            }
            if (alpha < 0.0) {
                alpha = 0.0;
            }
            else if (alpha > 1.0) {
                alpha = 1.0;
            }
            this._modelColor.R = red;
            this._modelColor.G = green;
            this._modelColor.B = blue;
            this._modelColor.A = alpha;
        };
        /**
         * モデルの色を取得する
         * 各色0.0~1.0の間で指定する(1.0が標準の状態)
         *
         * @return RGBAのカラー情報
         */
        CubismRenderer.prototype.getModelColor = function () {
            return JSON.parse(JSON.stringify(this._modelColor));
        };
        /**
         * 乗算済みαの有効・無効をセットする
         * 有効にするならtrue、無効にするならfalseをセットする
         */
        CubismRenderer.prototype.setIsPremultipliedAlpha = function (enable) {
            this._isPremultipliedAlpha = enable;
        };
        /**
         * 乗算済みαの有効・無効を取得する
         * @return true 乗算済みのα有効
         * @return false 乗算済みのα無効
         */
        CubismRenderer.prototype.isPremultipliedAlpha = function () {
            return this._isPremultipliedAlpha;
        };
        /**
         * カリング（片面描画）の有効・無効をセットする。
         * 有効にするならtrue、無効にするならfalseをセットする
         */
        CubismRenderer.prototype.setIsCulling = function (culling) {
            this._isCulling = culling;
        };
        /**
         * カリング（片面描画）の有効・無効を取得する。
         * @return true カリング有効
         * @return false カリング無効
         */
        CubismRenderer.prototype.isCulling = function () {
            return this._isCulling;
        };
        /**
         * テクスチャの異方性フィルタリングのパラメータをセットする
         * パラメータ値の影響度はレンダラの実装に依存する
         * @param n パラメータの値
         */
        CubismRenderer.prototype.setAnisotropy = function (n) {
            this._anisortopy = n;
        };
        /**
         * テクスチャの異方性フィルタリングのパラメータをセットする
         * @return 異方性フィルタリングのパラメータ
         */
        CubismRenderer.prototype.getAnisotropy = function () {
            return this._anisortopy;
        };
        /**
         * レンダリングするモデルを取得する
         * @return レンダリングするモデル
         */
        CubismRenderer.prototype.getModel = function () {
            return this._model;
        };
        return CubismRenderer;
    }());
    Live2DCubismFramework.CubismRenderer = CubismRenderer;
    var CubismBlendMode;
    (function (CubismBlendMode) {
        CubismBlendMode[CubismBlendMode["CubismBlendMode_Normal"] = 0] = "CubismBlendMode_Normal";
        CubismBlendMode[CubismBlendMode["CubismBlendMode_Additive"] = 1] = "CubismBlendMode_Additive";
        CubismBlendMode[CubismBlendMode["CubismBlendMode_Multiplicative"] = 2] = "CubismBlendMode_Multiplicative";
    })(CubismBlendMode = Live2DCubismFramework.CubismBlendMode || (Live2DCubismFramework.CubismBlendMode = {}));
    ;
    /**
     * テクスチャの色をRGBAで扱うためのクラス
     */
    var CubismTextureColor = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismTextureColor() {
            this.R = 1.0;
            this.G = 1.0;
            this.B = 1.0;
            this.A = 1.0;
        }
        return CubismTextureColor;
    }());
    Live2DCubismFramework.CubismTextureColor = CubismTextureColor;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/rendering/cubismrenderer_WebGL.ts":
/*!*****************************************************!*\
  !*** ./Framework/rendering/cubismrenderer_WebGL.ts ***!
  \*****************************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/* harmony import */ var _type_csmrectf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../type/csmrectf */ "./Framework/type/csmrectf.ts");
/* harmony import */ var _cubismrenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cubismrenderer */ "./Framework/rendering/cubismrenderer.ts");
/* harmony import */ var _math_cubismmatrix44__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/cubismmatrix44 */ "./Framework/math/cubismmatrix44.ts");
/* harmony import */ var _type_csmmap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../type/csmmap */ "./Framework/type/csmmap.ts");
/* harmony import */ var _type_csmvector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../type/csmvector */ "./Framework/type/csmvector.ts");
/* harmony import */ var _utils_cubismdebug__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/cubismdebug */ "./Framework/utils/cubismdebug.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var Constant = _live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].Constant;
var CubismMatrix44 = _math_cubismmatrix44__WEBPACK_IMPORTED_MODULE_3__["Live2DCubismFramework"].CubismMatrix44;
var csmRect = _type_csmrectf__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].csmRect;
var csmMap = _type_csmmap__WEBPACK_IMPORTED_MODULE_4__["Live2DCubismFramework"].csmMap;
var csmVector = _type_csmvector__WEBPACK_IMPORTED_MODULE_5__["Live2DCubismFramework"].csmVector;
var CubismRenderer = _cubismrenderer__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].CubismRenderer;
var CubismBlendMode = _cubismrenderer__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].CubismBlendMode;
var CubismTextureColor = _cubismrenderer__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].CubismTextureColor;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    var ColorChannelCount = 4; // 実験時に1チャンネルの場合は1、RGBだけの場合は3、アルファも含める場合は4
    var shaderCount = 7; // シェーダーの数 = マスク生成用 + (通常用 + 加算 + 乗算) * (マスク無の乗算済アルファ対応版 + マスク有の乗算済アルファ対応版)
    var s_instance;
    var s_viewport;
    var s_fbo;
    /**
     * クリッピングマスクの処理を実行するクラス
     */
    var CubismClippingManager_WebGL = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismClippingManager_WebGL() {
            this._maskRenderTexture = null;
            this._colorBuffer = null;
            this._currentFrameNo = 0;
            this._clippingMaskBufferSize = 256;
            this._clippingContextListForMask = new csmVector();
            this._clippingContextListForDraw = new csmVector();
            this._channelColors = new csmVector();
            this._tmpBoundsOnModel = new csmRect();
            this._tmpMatrix = new CubismMatrix44();
            this._tmpMatrixForMask = new CubismMatrix44();
            this._tmpMatrixForDraw = new CubismMatrix44();
            this._maskTexture = null;
            var tmp = new CubismTextureColor();
            tmp.R = 1.0;
            tmp.G = 0.0;
            tmp.B = 0.0;
            tmp.A = 0.0;
            this._channelColors.pushBack(tmp);
            tmp = new CubismTextureColor();
            tmp.R = 0.0;
            tmp.G = 1.0;
            tmp.B = 0.0;
            tmp.A = 0.0;
            this._channelColors.pushBack(tmp);
            tmp = new CubismTextureColor();
            tmp.R = 0.0;
            tmp.G = 0.0;
            tmp.B = 1.0;
            tmp.A = 0.0;
            this._channelColors.pushBack(tmp);
            tmp = new CubismTextureColor();
            tmp.R = 0.0;
            tmp.G = 0.0;
            tmp.B = 0.0;
            tmp.A = 1.0;
            this._channelColors.pushBack(tmp);
        }
        /**
         * カラーチャンネル（RGBA）のフラグを取得する
         * @param channelNo カラーチャンネル（RGBA）の番号（0:R, 1:G, 2:B, 3:A）
         */
        CubismClippingManager_WebGL.prototype.getChannelFlagAsColor = function (channelNo) {
            return this._channelColors.at(channelNo);
        };
        /**
         * テンポラリのレンダーテクスチャのアドレスを取得する
         * FrameBufferObjectが存在しない場合、新しく生成する
         *
         * @return レンダーテクスチャのアドレス
         */
        CubismClippingManager_WebGL.prototype.getMaskRenderTexture = function () {
            var ret = 0;
            // テンポラリのRenderTextureを取得する
            if (this._maskTexture && this._maskTexture.texture != 0) // 前回使ったものを返す
             {
                this._maskTexture.frameNo = this._currentFrameNo;
                ret = this._maskTexture.texture;
            }
            if (ret == 0) {
                // FrameBufferObjectが存在しない場合、新しく生成する
                // クリッピングバッファサイズを取得
                var size = this._clippingMaskBufferSize;
                this._colorBuffer = this.gl.createTexture();
                this.gl.bindTexture(this.gl.TEXTURE_2D, this._colorBuffer);
                this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, size, size, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
                this.gl.bindTexture(this.gl.TEXTURE_2D, null);
                ret = this.gl.createFramebuffer();
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, ret);
                this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this._colorBuffer, 0);
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);
                this._maskTexture = new CubismRenderTextureResource(this._currentFrameNo, ret);
            }
            return ret;
        };
        /**
         * WebGLレンダリングコンテキストを設定する
         * @param gl WebGLレンダリングコンテキスト
         */
        CubismClippingManager_WebGL.prototype.setGL = function (gl) {
            this.gl = gl;
        };
        /**
         * マスクされる描画オブジェクト群全体を囲む矩形（モデル座標系）を計算する
         * @param model モデルのインスタンス
         * @param clippingContext クリッピングマスクのコンテキスト
         */
        CubismClippingManager_WebGL.prototype.calcClippedDrawTotalBounds = function (model, clippingContext) {
            // 被クリッピングマスク（マスクされる描画オブジェクト）の全体の矩形
            var clippedDrawTotalMinX = Number.MAX_VALUE;
            var clippedDrawTotalMinY = Number.MAX_VALUE;
            var clippedDrawTotalMaxX = Number.MIN_VALUE;
            var clippedDrawTotalMaxY = Number.MIN_VALUE;
            // このマスクが実際に必要か判定する
            // このクリッピングを利用する「描画オブジェクト」がひとつでも使用可能であればマスクを生成する必要がある
            var clippedDrawCount = clippingContext._clippedDrawableIndexList.length;
            for (var clippedDrawableIndex = 0; clippedDrawableIndex < clippedDrawCount; clippedDrawableIndex++) {
                // マスクを使用する描画オブジェクトの描画される矩形を求める
                var drawableIndex = clippingContext._clippedDrawableIndexList[clippedDrawableIndex];
                var drawableVertexCount = model.getDrawableVertexCount(drawableIndex);
                var drawableVertexes = model.getDrawableVertices(drawableIndex);
                var minX = Number.MAX_VALUE;
                var minY = Number.MAX_VALUE;
                var maxX = Number.MIN_VALUE;
                var maxY = Number.MIN_VALUE;
                var loop = drawableVertexCount * Constant.vertexStep;
                for (var pi = Constant.vertexOffset; pi < loop; pi += Constant.vertexStep) {
                    var x = drawableVertexes[pi];
                    var y = drawableVertexes[pi + 1];
                    if (x < minX) {
                        minX = x;
                    }
                    if (x > maxX) {
                        maxX = x;
                    }
                    if (y < minY) {
                        minY = y;
                    }
                    if (y > maxY) {
                        maxY = y;
                    }
                }
                // 有効な点が一つも取れなかったのでスキップ
                if (minX == Number.MAX_VALUE) {
                    continue;
                }
                //　全体の矩形に反映
                if (minX < clippedDrawTotalMinX) {
                    clippedDrawTotalMinX = minX;
                }
                if (minY < clippedDrawTotalMinY) {
                    clippedDrawTotalMinY = minY;
                }
                if (maxX > clippedDrawTotalMaxX) {
                    clippedDrawTotalMaxX = maxX;
                }
                if (maxY > clippedDrawTotalMaxY) {
                    clippedDrawTotalMaxY = maxY;
                }
                if (clippedDrawTotalMinX == Number.MAX_VALUE) {
                    clippingContext._allClippedDrawRect.x = 0.0;
                    clippingContext._allClippedDrawRect.y = 0.0;
                    clippingContext._allClippedDrawRect.width = 0.0;
                    clippingContext._allClippedDrawRect.height = 0.0;
                    clippingContext._isUsing = false;
                }
                else {
                    clippingContext._isUsing = true;
                    var w = clippedDrawTotalMaxX - clippedDrawTotalMinX;
                    var h = clippedDrawTotalMaxY - clippedDrawTotalMinY;
                    clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;
                    clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;
                    clippingContext._allClippedDrawRect.width = w;
                    clippingContext._allClippedDrawRect.height = h;
                }
            }
        };
        /**
         * デストラクタ相当の処理
         */
        CubismClippingManager_WebGL.prototype.release = function () {
            for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {
                if (this._clippingContextListForMask.at(i)) {
                    this._clippingContextListForMask.at(i).release();
                    this._clippingContextListForMask.set(i, void 0);
                }
                this._clippingContextListForMask.set(i, null);
            }
            this._clippingContextListForMask = null;
            // _clippingContextListForDrawは_clippingContextListForMaskにあるインスタンスを指している。上記の処理により要素ごとのDELETEは不要。
            for (var i = 0; i < this._clippingContextListForDraw.getSize(); i++) {
                this._clippingContextListForDraw.set(i, null);
            }
            this._clippingContextListForDraw = null;
            if (this._maskTexture) {
                this.gl.deleteFramebuffer(this._maskTexture.texture);
                this._maskTexture = null;
            }
            for (var i = 0; i < this._channelColors.getSize(); i++) {
                this._channelColors.set(i, null);
            }
            this._channelColors = null;
            // テクスチャ解放
            this.gl.deleteTexture(this._colorBuffer);
            this._colorBuffer = null;
        };
        /**
         * マネージャの初期化処理
         * クリッピングマスクを使う描画オブジェクトの登録を行う
         * @param model モデルのインスタンス
         * @param drawableCount 描画オブジェクトの数
         * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのインデックスのリスト
         * @param drawableCounts 描画オブジェクトをマスクする描画オブジェクトの数
         */
        CubismClippingManager_WebGL.prototype.initialize = function (model, drawableCount, drawableMasks, drawableMaskCounts) {
            // クリッピングマスクを使う描画オブジェクトをすべて登録する
            // クリッピングマスクは、通常数個程度に限定して使うものとする
            for (var i = 0; i < drawableCount; i++) {
                if (drawableMaskCounts[i] <= 0) {
                    // クリッピングマスクが使用されていないアートメッシュ（多くの場合使用しない）
                    this._clippingContextListForDraw.pushBack(null);
                    continue;
                }
                // 既にあるClipContextと同じかチェックする
                var clippingContext = this.findSameClip(drawableMasks[i], drawableMaskCounts[i]);
                if (clippingContext == null) {
                    // 同一のマスクが存在していない場合は生成する
                    clippingContext = new CubismClippingContext(this, drawableMasks[i], drawableMaskCounts[i]);
                    this._clippingContextListForMask.pushBack(clippingContext);
                }
                clippingContext.addClippedDrawable(i);
                this._clippingContextListForDraw.pushBack(clippingContext);
            }
        };
        /**
         * クリッピングコンテキストを作成する。モデル描画時に実行する。
         * @param model モデルのインスタンス
         * @param renderer レンダラのインスタンス
         */
        CubismClippingManager_WebGL.prototype.setupClippingContext = function (model, renderer) {
            this._currentFrameNo++;
            // 全てのクリッピングを用意する
            // 同じクリップ（複数の場合はまとめて一つのクリップ）を使う場合は1度だけ設定する
            var usingClipCount = 0;
            for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {
                // 1つのクリッピングマスクに関して
                var cc = this._clippingContextListForMask.at(clipIndex);
                // このクリップを利用する描画オブジェクト群全体を囲む矩形を計算
                this.calcClippedDrawTotalBounds(model, cc);
                if (cc._isUsing) {
                    usingClipCount++; // 使用中としてカウント
                }
            }
            // マスク作成処理
            if (usingClipCount > 0) {
                // 生成したFrameBufferと同じサイズでビューポートを設定
                this.gl.viewport(0, 0, this._clippingMaskBufferSize, this._clippingMaskBufferSize);
                // マスクをactiveにする
                this._maskRenderTexture = this.getMaskRenderTexture();
                // モデル描画時にDrawMeshNowに渡される変換(モデルtoワールド座標変換)
                var modelToWorldF = renderer.getMvpMatrix();
                renderer.preDraw(); // バッファをクリアする
                // 各マスクのレイアウトを決定していく
                this.setupLayoutBounds(usingClipCount);
                // ---------- マスク描画処理 ----------
                // マスク用RenderTextureをactiveにセット
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._maskRenderTexture);
                // マスクをクリアする
                // (仮仕様) 1が無効（描かれない）領域、0が有効（描かれる）領域。（シェーダーCd*Csで0に近い値をかけてマスクを作る。1をかけると何も起こらない）
                this.gl.clearColor(1.0, 1.0, 1.0, 1.0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
                // 実際にマスクを生成する
                // 全てのマスクをどのようにレイアウトして描くかを決定し、ClipContext, ClippedDrawContextに記憶する
                for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {
                    // --- 実際に1つのマスクを描く ---
                    var clipContext = this._clippingContextListForMask.at(clipIndex);
                    var allClipedDrawRect = clipContext._allClippedDrawRect; // このマスクを使う、すべての描画オブジェクトの論理座標上の囲み矩形
                    var layoutBoundsOnTex01 = clipContext._layoutBounds; // この中にマスクを収める
                    // モデル座標上の矩形を、適宜マージンを付けて使う
                    var MARGIN = 0.05;
                    this._tmpBoundsOnModel.setRect(allClipedDrawRect);
                    this._tmpBoundsOnModel.expand(allClipedDrawRect.width * MARGIN, allClipedDrawRect.height * MARGIN);
                    //########## 本来は割り当てられた領域の全体を使わず必要最低限のサイズがよい
                    // シェーダ用の計算式を求める。回転を考慮しない場合は以下のとおり
                    // movePeriod' = movePeriod * scaleX + offX		  [[ movePeriod' = (movePeriod - tmpBoundsOnModel.movePeriod)*scale + layoutBoundsOnTex01.movePeriod ]]
                    var scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;
                    var scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;
                    // マスク生成時に使う行列を求める
                    {
                        // シェーダに渡す行列を求める <<<<<<<<<<<<<<<<<<<<<<<< 要最適化（逆順に計算すればシンプルにできる）
                        this._tmpMatrix.loadIdentity();
                        {
                            // layout0..1 を -1..1に変換
                            this._tmpMatrix.translateRelative(-1.0, -1.0);
                            this._tmpMatrix.scaleRelative(2.0, 2.0);
                        }
                        {
                            // view to layout0..1
                            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);
                            this._tmpMatrix.scaleRelative(scaleX, scaleY); // new = [translate][scale]
                            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);
                            // new = [translate][scale][translate]
                        }
                        // tmpMatrixForMaskが計算結果
                        this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());
                    }
                    //--------- draw時の mask 参照用行列を計算
                    {
                        // シェーダに渡す行列を求める <<<<<<<<<<<<<<<<<<<<<<<< 要最適化（逆順に計算すればシンプルにできる）
                        this._tmpMatrix.loadIdentity();
                        {
                            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);
                            this._tmpMatrix.scaleRelative(scaleX, scaleY); // new = [translate][scale]
                            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);
                            // new = [translate][scale][translate]
                        }
                        this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());
                    }
                    clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());
                    clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());
                    var clipDrawCount = clipContext._clippingIdCount;
                    for (var i = 0; i < clipDrawCount; i++) {
                        var clipDrawIndex = clipContext._clippingIdList[i];
                        // 頂点情報が更新されておらず、信頼性がない場合は描画をパスする
                        if (!model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)) {
                            continue;
                        }
                        renderer.setIsCulling(model.getDrawableCulling(clipDrawIndex) != false);
                        // 今回専用の変換を適用して描く
                        // チャンネルも切り替える必要がある(A,R,G,B)
                        renderer.setClippingContextBufferForMask(clipContext);
                        renderer.drawMesh(model.getDrawableTextureIndices(clipDrawIndex), model.getDrawableVertexIndexCount(clipDrawIndex), model.getDrawableVertexCount(clipDrawIndex), model.getDrawableVertexIndices(clipDrawIndex), model.getDrawableVertices(clipDrawIndex), model.getDrawableVertexUvs(clipDrawIndex), model.getDrawableOpacity(clipDrawIndex), CubismBlendMode.CubismBlendMode_Normal // クリッピングは通常描画を強制
                        );
                    }
                }
                // --- 後処理 ---
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo); // 描画対象を戻す
                renderer.setClippingContextBufferForMask(null);
                this.gl.viewport(s_viewport[0], s_viewport[1], s_viewport[2], s_viewport[3]);
            }
        };
        /**
         * 既にマスクを作っているかを確認
         * 作っている様であれば該当するクリッピングマスクのインスタンスを返す
         * 作っていなければNULLを返す
         * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのリスト
         * @param drawableMaskCounts 描画オブジェクトをマスクする描画オブジェクトの数
         * @return 該当するクリッピングマスクが存在すればインスタンスを返し、なければNULLを返す
         */
        CubismClippingManager_WebGL.prototype.findSameClip = function (drawableMasks, drawableMaskCounts) {
            // 作成済みClippingContextと一致するか確認
            for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {
                var clippingContext = this._clippingContextListForMask.at(i);
                var count = clippingContext._clippingIdCount;
                // 個数が違う場合は別物
                if (count != drawableMaskCounts) {
                    continue;
                }
                var sameCount = 0;
                // 同じIDを持つか確認。配列の数が同じなので、一致した個数が同じなら同じ物を持つとする
                for (var j = 0; j < count; j++) {
                    var clipId = clippingContext._clippingIdList[j];
                    for (var k = 0; k < count; k++) {
                        if (drawableMasks[k] == clipId) {
                            sameCount++;
                            break;
                        }
                    }
                }
                if (sameCount == count) {
                    return clippingContext;
                }
            }
            return null; // 見つからなかった
        };
        /**
         * クリッピングコンテキストを配置するレイアウト
         * 一つのレンダーテクスチャを極力いっぱいに使ってマスクをレイアウトする
         * マスクグループの数が4以下ならRGBA各チャンネルに一つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する。
         *
         * @param usingClipCount 配置するクリッピングコンテキストの数
         */
        CubismClippingManager_WebGL.prototype.setupLayoutBounds = function (usingClipCount) {
            // ひとつのRenderTextureを極力いっぱいに使ってマスクをレイアウトする
            // マスクグループの数が4以下ならRGBA各チャンネルに1つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する
            // RGBAを順番に使っていく
            var div = usingClipCount / ColorChannelCount; //　1チャンネルに配置する基本のマスク
            var mod = usingClipCount % ColorChannelCount; // 余り、この番号のチャンネルまでに一つずつ配分する
            // 小数点は切り捨てる
            div = ~~div;
            mod = ~~mod;
            // RGBAそれぞれのチャンネルを用意していく（0:R, 1:G, 2:B, 3:A）
            var curClipIndex = 0; // 順番に設定していく
            for (var channelNo = 0; channelNo < ColorChannelCount; channelNo++) {
                // このチャンネルにレイアウトする数
                var layoutCount = div + (channelNo < mod ? 1 : 0);
                // 分割方法を決定する
                if (layoutCount == 0) {
                    // 何もしない
                }
                else if (layoutCount == 1) {
                    // 全てをそのまま使う
                    var clipContext = this._clippingContextListForMask.at(curClipIndex++);
                    clipContext._layoutChannelNo = channelNo;
                    clipContext._layoutBounds.x = 0.0;
                    clipContext._layoutBounds.y = 0.0;
                    clipContext._layoutBounds.width = 1.0;
                    clipContext._layoutBounds.height = 1.0;
                }
                else if (layoutCount == 2) {
                    for (var i = 0; i < layoutCount; i++) {
                        var xpos = i % 2;
                        // 小数点は切り捨てる
                        xpos = ~~xpos;
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = channelNo;
                        cc._layoutBounds.x = xpos * 0.5;
                        cc._layoutBounds.y = 0.0;
                        cc._layoutBounds.width = 0.5;
                        cc._layoutBounds.height = 1.0;
                        // UVを2つに分解して使う
                    }
                }
                else if (layoutCount <= 4) {
                    // 4分割して使う
                    for (var i = 0; i < layoutCount; i++) {
                        var xpos = i % 2;
                        var ypos = i / 2;
                        // 小数点は切り捨てる
                        xpos = ~~xpos;
                        ypos = ~~ypos;
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = channelNo;
                        cc._layoutBounds.x = xpos * 0.5;
                        cc._layoutBounds.y = ypos * 0.5;
                        cc._layoutBounds.width = 0.5;
                        cc._layoutBounds.height = 0.5;
                    }
                }
                else if (layoutCount <= 9) {
                    // 9分割して使う
                    for (var i = 0; i < layoutCount; i++) {
                        var xpos = i % 3;
                        var ypos = i / 3;
                        // 小数点は切り捨てる
                        xpos = ~~xpos;
                        ypos = ~~ypos;
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = channelNo;
                        cc._layoutBounds.x = xpos / 3.0;
                        cc._layoutBounds.y = ypos / 3.0;
                        cc._layoutBounds.width = 1.0 / 3.0;
                        cc._layoutBounds.height = 1.0 / 3.0;
                    }
                }
                else {
                    Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_6__["CubismLogError"])("not supported mask count : {0}", layoutCount);
                }
            }
        };
        /**
         * カラーバッファを取得する
         * @return カラーバッファ
         */
        CubismClippingManager_WebGL.prototype.getColorBuffer = function () {
            return this._colorBuffer;
        };
        /**
         * 画面描画に使用するクリッピングマスクのリストを取得する
         * @return 画面描画に使用するクリッピングマスクのリスト
         */
        CubismClippingManager_WebGL.prototype.getClippingContextListForDraw = function () {
            return this._clippingContextListForDraw;
        };
        /**
         * クリッピングマスクバッファのサイズを設定する
         * @param size クリッピングマスクバッファのサイズ
         */
        CubismClippingManager_WebGL.prototype.setClippingMaskBufferSize = function (size) {
            this._clippingMaskBufferSize = size;
        };
        /**
         * クリッピングマスクバッファのサイズを取得する
         * @return クリッピングマスクバッファのサイズ
         */
        CubismClippingManager_WebGL.prototype.getClippingMaskBufferSize = function () {
            return this._clippingMaskBufferSize;
        };
        return CubismClippingManager_WebGL;
    }());
    Live2DCubismFramework.CubismClippingManager_WebGL = CubismClippingManager_WebGL;
    /**
     * レンダーテクスチャのリソースを定義する構造体
     * クリッピングマスクで使用する
     */
    var CubismRenderTextureResource = /** @class */ (function () {
        /**
         * 引数付きコンストラクタ
         * @param frameNo レンダラーのフレーム番号
         * @param texture テクスチャのアドレス
         */
        function CubismRenderTextureResource(frameNo, texture) {
            this.frameNo = frameNo;
            this.texture = texture;
        }
        return CubismRenderTextureResource;
    }());
    Live2DCubismFramework.CubismRenderTextureResource = CubismRenderTextureResource;
    /**
     * クリッピングマスクのコンテキスト
     */
    var CubismClippingContext = /** @class */ (function () {
        /**
         * 引数付きコンストラクタ
         */
        function CubismClippingContext(manager, clippingDrawableIndices, clipCount) {
            this._owner = manager;
            // クリップしている（＝マスク用の）Drawableのインデックスリスト
            this._clippingIdList = clippingDrawableIndices;
            // マスクの数
            this._clippingIdCount = clipCount;
            this._allClippedDrawRect = new csmRect();
            this._layoutBounds = new csmRect();
            this._clippedDrawableIndexList = new Array();
            this._matrixForMask = new CubismMatrix44();
            this._matrixForDraw = new CubismMatrix44();
        }
        /**
         * デストラクタ相当の処理
         */
        CubismClippingContext.prototype.release = function () {
            if (this._layoutBounds != null) {
                this._layoutBounds = null;
            }
            if (this._allClippedDrawRect != null) {
                this._allClippedDrawRect = null;
            }
            if (this._clippedDrawableIndexList != null) {
                this._clippedDrawableIndexList = null;
            }
        };
        /**
         * このマスクにクリップされる描画オブジェクトを追加する
         *
         * @param drawableIndex クリッピング対象に追加する描画オブジェクトのインデックス
         */
        CubismClippingContext.prototype.addClippedDrawable = function (drawableIndex) {
            this._clippedDrawableIndexList.push(drawableIndex);
        };
        /**
         * このマスクを管理するマネージャのインスタンスを取得する
         * @return クリッピングマネージャのインスタンス
         */
        CubismClippingContext.prototype.getClippingManager = function () {
            return this._owner;
        };
        CubismClippingContext.prototype.setGl = function (gl) {
            this._owner.setGL(gl);
        };
        return CubismClippingContext;
    }());
    Live2DCubismFramework.CubismClippingContext = CubismClippingContext;
    /**
     * WebGL用のシェーダープログラムを生成・破棄するクラス
     * シングルトンなクラスであり、CubismShader_WebGL.getInstanceからアクセスする。
     */
    var CubismShader_WebGL = /** @class */ (function () {
        /**
         * privateなコンストラクタ
         */
        function CubismShader_WebGL() {
            this._shaderSets = new csmVector();
        }
        /**
         * インスタンスを取得する（シングルトン）
         * @return インスタンス
         */
        CubismShader_WebGL.getInstance = function () {
            if (s_instance == null) {
                s_instance = new CubismShader_WebGL();
                return s_instance;
            }
            return s_instance;
        };
        /**
         * インスタンスを開放する（シングルトン）
         */
        CubismShader_WebGL.deleteInstance = function () {
            if (s_instance) {
                s_instance.release();
                s_instance = void 0;
                s_instance = null;
            }
        };
        /**
         * デストラクタ相当の処理
         */
        CubismShader_WebGL.prototype.release = function () {
            this.releaseShaderProgram();
        };
        /**
         * シェーダープログラムの一連のセットアップを実行する
         * @param renderer レンダラのインスタンス
         * @param textureId GPUのテクスチャID
         * @param vertexCount ポリゴンメッシュの頂点数
         * @param vertexArray ポリゴンメッシュの頂点配列
         * @param indexArray　インデックスバッファの頂点配列
         * @param uvArray uv配列
         * @param opacity 不透明度
         * @param colorBlendMode カラーブレンディングのタイプ
         * @param baseColor ベースカラー
         * @param isPremultipliedAlpha 乗算済みアルファかどうか
         * @param matrix4x4 Model-View-Projection行列
         */
        CubismShader_WebGL.prototype.setupShaderProgram = function (renderer, textureId, vertexCount, vertexArray, indexArray, uvArray, bufferData, opacity, colorBlendMode, baseColor, isPremultipliedAlpha, matrix4x4) {
            if (!isPremultipliedAlpha) {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_6__["CubismLogError"])("NoPremultipliedAlpha is not allowed");
            }
            if (this._shaderSets.getSize() == 0) {
                this.generateShaders();
            }
            // Blending
            var SRC_COLOR;
            var DST_COLOR;
            var SRC_ALPHA;
            var DST_ALPHA;
            if (renderer.getClippingContextBufferForMask() != null) // マスク生成時
             {
                var shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_SetupMask);
                this.gl.useProgram(shaderSet.shaderProgram);
                // テクスチャ設定
                this.gl.activeTexture(this.gl.TEXTURE0);
                this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);
                this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);
                // 頂点配列の設定(VBO)
                if (bufferData.vertex == null) {
                    bufferData.vertex = this.gl.createBuffer();
                }
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);
                this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);
                this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);
                this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);
                // テクスチャ頂点の設定
                if (bufferData.uv == null) {
                    bufferData.uv = this.gl.createBuffer();
                }
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);
                this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);
                this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);
                this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);
                // チャンネル
                var channelNo = renderer.getClippingContextBufferForMask()._layoutChannelNo;
                var colorChannel = renderer.getClippingContextBufferForMask().getClippingManager().getChannelFlagAsColor(channelNo);
                this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);
                this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForMask()._matrixForMask.getArray());
                var rect = renderer.getClippingContextBufferForMask()._layoutBounds;
                this.gl.uniform4f(shaderSet.uniformBaseColorLocation, rect.x * 2.0 - 1.0, rect.y * 2.0 - 1.0, rect.getRight() * 2.0 - 1.0, rect.getBottom() * 2.0 - 1.0);
                SRC_COLOR = this.gl.ZERO;
                DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;
                SRC_ALPHA = this.gl.ZERO;
                DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;
            }
            else // マスク生成以外の場合
             {
                var masked = renderer.getClippingContextBufferForDraw() != null; // この描画オブジェクトはマスク対象か
                var offset = (masked ? 1 : 0);
                var shaderSet = new CubismShaderSet();
                switch (colorBlendMode) {
                    case CubismBlendMode.CubismBlendMode_Normal:
                    default:
                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset);
                        SRC_COLOR = this.gl.ONE;
                        DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;
                        SRC_ALPHA = this.gl.ONE;
                        DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;
                        break;
                    case CubismBlendMode.CubismBlendMode_Additive:
                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_AddPremultipliedAlpha + offset);
                        SRC_COLOR = this.gl.ONE;
                        DST_COLOR = this.gl.ONE;
                        SRC_ALPHA = this.gl.ZERO;
                        DST_ALPHA = this.gl.ONE;
                        break;
                    case CubismBlendMode.CubismBlendMode_Multiplicative:
                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_MultPremultipliedAlpha + offset);
                        SRC_COLOR = this.gl.DST_COLOR;
                        DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;
                        SRC_ALPHA = this.gl.ZERO;
                        DST_ALPHA = this.gl.ONE;
                        break;
                }
                this.gl.useProgram(shaderSet.shaderProgram);
                // 頂点配列の設定
                if (bufferData.vertex == null) {
                    bufferData.vertex = this.gl.createBuffer();
                }
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);
                this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);
                this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);
                this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);
                // テクスチャ頂点の設定
                if (bufferData.uv == null) {
                    bufferData.uv = this.gl.createBuffer();
                }
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);
                this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);
                this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);
                this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);
                if (masked) {
                    this.gl.activeTexture(this.gl.TEXTURE1);
                    var tex = renderer.getClippingContextBufferForDraw().getClippingManager().getColorBuffer();
                    this.gl.bindTexture(this.gl.TEXTURE_2D, tex);
                    this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);
                    // view座標をClippingContextの座標に変換するための行列を設定
                    this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray());
                    // 使用するカラーチャンネルを設定
                    var channelNo = renderer.getClippingContextBufferForDraw()._layoutChannelNo;
                    var colorChannel = renderer.getClippingContextBufferForDraw().getClippingManager().getChannelFlagAsColor(channelNo);
                    this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);
                }
                // テクスチャ設定
                this.gl.activeTexture(this.gl.TEXTURE0);
                this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);
                this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);
                // 座標変換
                this.gl.uniformMatrix4fv(shaderSet.uniformMatrixLocation, false, matrix4x4.getArray());
                this.gl.uniform4f(shaderSet.uniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);
            }
            // IBOを作成し、データを転送
            if (bufferData.index == null) {
                bufferData.index = this.gl.createBuffer();
            }
            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);
            this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, indexArray, this.gl.DYNAMIC_DRAW);
            this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);
        };
        /**
         * シェーダープログラムを解放する
         */
        CubismShader_WebGL.prototype.releaseShaderProgram = function () {
            for (var i = 0; i < this._shaderSets.getSize(); i++) {
                this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);
                this._shaderSets.at(i).shaderProgram = 0;
                this._shaderSets.set(i, void 0);
                this._shaderSets.set(i, null);
            }
        };
        /**
         * シェーダープログラムを初期化する
         * @param vertShaderSrc 頂点シェーダのソース
         * @param fragShaderSrc フラグメントシェーダのソース
         */
        CubismShader_WebGL.prototype.generateShaders = function () {
            for (var i = 0; i < shaderCount; i++) {
                this._shaderSets.pushBack(new CubismShaderSet());
            }
            this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrcSetupMask, Live2DCubismFramework.fragmentShaderSrcsetupMask);
            this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrc, Live2DCubismFramework.fragmentShaderSrcPremultipliedAlpha);
            this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrcMasked, Live2DCubismFramework.fragmentShaderSrcMaskPremultipliedAlpha);
            // 加算も通常と同じシェーダーを利用する
            this._shaderSets.at(3).shaderProgram = this._shaderSets.at(1).shaderProgram;
            this._shaderSets.at(4).shaderProgram = this._shaderSets.at(2).shaderProgram;
            // 乗算も通常と同じシェーダーを利用する
            this._shaderSets.at(5).shaderProgram = this._shaderSets.at(1).shaderProgram;
            this._shaderSets.at(6).shaderProgram = this._shaderSets.at(2).shaderProgram;
            // SetupMask
            this._shaderSets.at(0).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, "a_position");
            this._shaderSets.at(0).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, "a_texCoord");
            this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, "s_texture0");
            this._shaderSets.at(0).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, "u_clipMatrix");
            this._shaderSets.at(0).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, "u_channelFlag");
            this._shaderSets.at(0).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, "u_baseColor");
            // 通常（PremultipliedAlpha）
            this._shaderSets.at(1).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, "a_position");
            this._shaderSets.at(1).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, "a_texCoord");
            this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, "s_texture0");
            this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, "u_matrix");
            this._shaderSets.at(1).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, "u_baseColor");
            // 通常（クリッピング、PremultipliedAlpha）
            this._shaderSets.at(2).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, "a_position");
            this._shaderSets.at(2).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, "a_texCoord");
            this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, "s_texture0");
            this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, "s_texture1");
            this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, "u_matrix");
            this._shaderSets.at(2).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, "u_clipMatrix");
            this._shaderSets.at(2).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, "u_channelFlag");
            this._shaderSets.at(2).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, "u_baseColor");
            // 加算（PremultipliedAlpha）
            this._shaderSets.at(3).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, "a_position");
            this._shaderSets.at(3).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, "a_texCoord");
            this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, "s_texture0");
            this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, "u_matrix");
            this._shaderSets.at(3).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, "u_baseColor");
            // 加算（クリッピング、PremultipliedAlpha）
            this._shaderSets.at(4).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, "a_position");
            this._shaderSets.at(4).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, "a_texCoord");
            this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, "s_texture0");
            this._shaderSets.at(4).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, "s_texture1");
            this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, "u_matrix");
            this._shaderSets.at(4).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, "u_clipMatrix");
            this._shaderSets.at(4).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, "u_channelFlag");
            this._shaderSets.at(4).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, "u_baseColor");
            // 乗算（PremultipliedAlpha）
            this._shaderSets.at(5).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, "a_position");
            this._shaderSets.at(5).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, "a_texCoord");
            this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, "s_texture0");
            this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, "u_matrix");
            this._shaderSets.at(5).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, "u_baseColor");
            // 乗算（クリッピング、PremultipliedAlpha）
            this._shaderSets.at(6).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, "a_position");
            this._shaderSets.at(6).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, "a_texCoord");
            this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, "s_texture0");
            this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, "s_texture1");
            this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, "u_matrix");
            this._shaderSets.at(6).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, "u_clipMatrix");
            this._shaderSets.at(6).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, "u_channelFlag");
            this._shaderSets.at(6).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, "u_baseColor");
        };
        /**
         * シェーダプログラムをロードしてアドレスを返す
         * @param vertexShaderSource    頂点シェーダのソース
         * @param fragmentShaderSource  フラグメントシェーダのソース
         * @return シェーダプログラムのアドレス
         */
        CubismShader_WebGL.prototype.loadShaderProgram = function (vertexShaderSource, fragmentShaderSource) {
            // Create Shader Program
            var shaderProgram = this.gl.createProgram();
            var vertShader = this.compileShaderSource(this.gl.VERTEX_SHADER, vertexShaderSource);
            if (!vertShader) {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_6__["CubismLogError"])("Vertex shader compile error!");
                return 0;
            }
            var fragShader = this.compileShaderSource(this.gl.FRAGMENT_SHADER, fragmentShaderSource);
            if (!fragShader) {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_6__["CubismLogError"])("Vertex shader compile error!");
                return 0;
            }
            // Attach vertex shader to program
            this.gl.attachShader(shaderProgram, vertShader);
            // Attach fragment shader to program
            this.gl.attachShader(shaderProgram, fragShader);
            // link program
            this.gl.linkProgram(shaderProgram);
            var linkStatus = this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS);
            // リンクに失敗したらシェーダーを削除
            if (!linkStatus) {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_6__["CubismLogError"])("Failed to link program: {0}", shaderProgram);
                this.gl.deleteShader(vertShader);
                vertShader = 0;
                this.gl.deleteShader(fragShader);
                fragShader = 0;
                if (shaderProgram) {
                    this.gl.deleteProgram(shaderProgram);
                    shaderProgram = 0;
                }
                return 0;
            }
            // Release vertex and fragment shaders.
            this.gl.deleteShader(vertShader);
            this.gl.deleteShader(fragShader);
            return shaderProgram;
        };
        /**
         * シェーダープログラムをコンパイルする
         * @param shaderType シェーダタイプ(Vertex/Fragment)
         * @param shaderSource シェーダソースコード
         *
         * @return コンパイルされたシェーダープログラム
         */
        CubismShader_WebGL.prototype.compileShaderSource = function (shaderType, shaderSource) {
            var source = shaderSource;
            var shader = this.gl.createShader(shaderType);
            this.gl.shaderSource(shader, source);
            this.gl.compileShader(shader);
            if (!shader) {
                var log = this.gl.getShaderInfoLog(shader);
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_6__["CubismLogError"])("Shader compile log: {0} ", log);
            }
            var status = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);
            if (!status) {
                this.gl.deleteShader(shader);
                return null;
            }
            return shader;
        };
        CubismShader_WebGL.prototype.setGl = function (gl) {
            this.gl = gl;
        };
        return CubismShader_WebGL;
    }());
    Live2DCubismFramework.CubismShader_WebGL = CubismShader_WebGL;
    /**
     * CubismShader_WebGLのインナークラス
     */
    var CubismShaderSet = /** @class */ (function () {
        function CubismShaderSet() {
        }
        return CubismShaderSet;
    }());
    Live2DCubismFramework.CubismShaderSet = CubismShaderSet;
    var ShaderNames;
    (function (ShaderNames) {
        // SetupMask
        ShaderNames[ShaderNames["ShaderNames_SetupMask"] = 0] = "ShaderNames_SetupMask";
        // Normal
        ShaderNames[ShaderNames["ShaderNames_NormalPremultipliedAlpha"] = 1] = "ShaderNames_NormalPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_NormalMaskedPremultipliedAlpha"] = 2] = "ShaderNames_NormalMaskedPremultipliedAlpha";
        // Add
        ShaderNames[ShaderNames["ShaderNames_AddPremultipliedAlpha"] = 3] = "ShaderNames_AddPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_AddMaskedPremultipledAlpha"] = 4] = "ShaderNames_AddMaskedPremultipledAlpha";
        // Mult
        ShaderNames[ShaderNames["ShaderNames_MultPremultipliedAlpha"] = 5] = "ShaderNames_MultPremultipliedAlpha";
        ShaderNames[ShaderNames["ShaderNames_MultMaskedPremultipliedAlpha"] = 6] = "ShaderNames_MultMaskedPremultipliedAlpha";
    })(ShaderNames = Live2DCubismFramework.ShaderNames || (Live2DCubismFramework.ShaderNames = {}));
    ;
    Live2DCubismFramework.vertexShaderSrcSetupMask = "attribute vec4     a_position;" +
        "attribute vec2     a_texCoord;" +
        "varying vec2       v_texCoord;" +
        "varying vec4       v_myPos;" +
        "uniform mat4       u_clipMatrix;" +
        "uniform sampler2D  s_texture0;" +
        "void main()" +
        "{" +
        "   gl_Position = u_clipMatrix * a_position;" +
        "   v_myPos = u_clipMatrix * a_position;" +
        "   v_texCoord = a_texCoord;" +
        "   v_texCoord.y = 1.0 - v_texCoord.y;" +
        "}";
    Live2DCubismFramework.fragmentShaderSrcsetupMask = "precision mediump float;" +
        "varying vec2       v_texCoord;" +
        "varying vec4       v_myPos;" +
        "uniform vec4       u_baseColor;" +
        "uniform vec4       u_channelFlag;" +
        "uniform sampler2D  s_texture0;" +
        "void main()" +
        "{" +
        "   float isInside = " +
        "       step(u_baseColor.x, v_myPos.x/v_myPos.w)" +
        "       * step(u_baseColor.y, v_myPos.y/v_myPos.w)" +
        "       * step(v_myPos.x/v_myPos.w, u_baseColor.z)" +
        "       * step(v_myPos.y/v_myPos.w, u_baseColor.w);" +
        "   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;" +
        "}";
    //----- バーテックスシェーダプログラム -----
    // Normal & Add & Mult 共通
    Live2DCubismFramework.vertexShaderSrc = "attribute vec4     a_position;" + //v.vertex
        "attribute vec2     a_texCoord;" + //v.texcoord
        "varying vec2       v_texCoord;" + //v2f.texcoord
        "uniform mat4       u_matrix;" +
        "uniform sampler2D  s_texture0;" +
        "void main()" +
        "{" +
        "   gl_Position = u_matrix * a_position;" +
        "   v_texCoord = a_texCoord;" +
        "   v_texCoord.y = 1.0 - v_texCoord.y;" +
        "}";
    // Normal & Add & Mult 共通（クリッピングされたものの描画用）
    Live2DCubismFramework.vertexShaderSrcMasked = "attribute vec4     a_position;" +
        "attribute vec2     a_texCoord;" +
        "varying vec2       v_texCoord;" +
        "varying vec4       v_clipPos;" +
        "uniform mat4       u_matrix;" +
        "uniform mat4       u_clipMatrix;" +
        "uniform sampler2D  s_texture0;" +
        "uniform sampler2D  s_texture1;" +
        "void main()" +
        "{" +
        "   gl_Position = u_matrix * a_position;" +
        "   v_clipPos = u_clipMatrix * a_position;" +
        "   v_texCoord = a_texCoord;" +
        "   v_texCoord.y = 1.0 - v_texCoord.y;" +
        "}";
    //----- フラグメントシェーダプログラム -----
    // Normal & Add & Mult 共通 （PremultipliedAlpha）
    Live2DCubismFramework.fragmentShaderSrcPremultipliedAlpha = "precision mediump float;" +
        "varying vec2       v_texCoord;" + //v2f.texcoord
        "uniform vec4       u_baseColor;" +
        "uniform sampler2D  s_texture0;" + //_MainTex
        "void main()" +
        "{" +
        "   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;" +
        "}";
    // Normal （クリッピングされたものの描画用、PremultipliedAlpha兼用）
    Live2DCubismFramework.fragmentShaderSrcMaskPremultipliedAlpha = "precision mediump float;" +
        "varying vec2       v_texCoord;" +
        "varying vec4       v_clipPos;" +
        "uniform vec4       u_baseColor;" +
        "uniform vec4       u_channelFlag;" +
        "uniform sampler2D  s_texture0;" +
        "uniform sampler2D  s_texture1;" +
        "void main()" +
        "{" +
        "   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;" +
        "   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;" +
        "   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;" +
        "   col_formask = col_formask * maskVal;" +
        "   gl_FragColor = col_formask;" +
        "}";
    /**
     * WebGL用の描画命令を実装したクラス
     */
    var CubismRenderer_WebGL = /** @class */ (function (_super) {
        __extends(CubismRenderer_WebGL, _super);
        /**
         * コンストラクタ
         */
        function CubismRenderer_WebGL() {
            var _this = _super.call(this) || this;
            _this._clippingContextBufferForMask = null;
            _this._clippingContextBufferForDraw = null;
            _this._clippingManager = new CubismClippingManager_WebGL();
            _this.firstDraw = true;
            _this._textures = new csmMap();
            _this._sortedDrawableIndexList = new csmVector();
            _this._bufferData = {
                vertex: WebGLBuffer = null,
                uv: WebGLBuffer = null,
                index: WebGLBuffer = null
            };
            // テクスチャ対応マップの容量を確保しておく
            _this._textures.prepareCapacity(32, true);
            return _this;
        }
        /**
         * レンダラの初期化処理を実行する
         * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる
         *
         * @param model モデルのインスタンス
         */
        CubismRenderer_WebGL.prototype.initialize = function (model) {
            if (model.isUsingMasking()) {
                this._clippingManager = new CubismClippingManager_WebGL(); // クリッピングマスク・バッファ前処理方式を初期化
                this._clippingManager.initialize(model, model.getDrawableCount(), model.getDrawableMasks(), model.getDrawableMaskCounts());
            }
            this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);
            _super.prototype.initialize.call(this, model); // 親クラスの処理を呼ぶ
        };
        /**
         * WebGLテクスチャのバインド処理
         * CubismRendererにテクスチャを設定し、CubismRenderer内でその画像を参照するためのIndex値を戻り値とする
         * @param modelTextureNo セットするモデルテクスチャの番号
         * @param glTextureNo WebGLテクスチャの番号
         */
        CubismRenderer_WebGL.prototype.bindTexture = function (modelTextureNo, glTexture) {
            this._textures.setValue(modelTextureNo, glTexture);
        };
        /**
         * WebGLにバインドされたテクスチャのリストを取得する
         * @return テクスチャのリスト
         */
        CubismRenderer_WebGL.prototype.getBindedTextures = function () {
            return this._textures;
        };
        /**
         * クリッピングマスクバッファのサイズを設定する
         * マスク用のFrameBufferを破棄、再作成する為処理コストは高い
         * @param size クリッピングマスクバッファのサイズ
         */
        CubismRenderer_WebGL.prototype.setClippingMaskBufferSize = function (size) {
            // FrameBufferのサイズを変更するためにインスタンスを破棄・再作成する
            this._clippingManager.release();
            this._clippingManager = void 0;
            this._clippingManager = null;
            this._clippingManager = new CubismClippingManager_WebGL();
            this._clippingManager.setClippingMaskBufferSize(size);
            this._clippingManager.initialize(this.getModel(), this.getModel().getDrawableCount(), this.getModel().getDrawableMasks(), this.getModel().getDrawableMaskCounts());
        };
        /**
         * クリッピングマスクバッファのサイズを取得する
         * @return クリッピングマスクバッファのサイズ
         */
        CubismRenderer_WebGL.prototype.getClippingMaskBufferSize = function () {
            return this._clippingManager.getClippingMaskBufferSize();
        };
        /**
         * デストラクタ相当の処理
         */
        CubismRenderer_WebGL.prototype.release = function () {
            this._clippingManager.release();
            this._clippingManager = void 0;
            this._clippingManager = null;
            this.gl.deleteBuffer(this._bufferData.vertex);
            this._bufferData.vertex = null;
            this.gl.deleteBuffer(this._bufferData.uv);
            this._bufferData.uv = null;
            this.gl.deleteBuffer(this._bufferData.index);
            this._bufferData.index = null;
            this._bufferData = null;
            for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {
                this.gl.deleteTexture(ite.ptr().second);
            }
            this._textures.clear();
            this._textures = null;
        };
        /**
         * モデルを描画する実際の処理
         */
        CubismRenderer_WebGL.prototype.doDrawModel = function () {
            //------------ クリッピングマスク・バッファ前処理方式の場合 ------------
            if (this._clippingManager != null) {
                this.preDraw();
                this._clippingManager.setupClippingContext(this.getModel(), this);
            }
            // 上記クリッピング処理内でも一度PreDrawを呼ぶので注意!!
            this.preDraw();
            var drawableCount = this.getModel().getDrawableCount();
            var renderOrder = this.getModel().getDrawableRenderOrders();
            // インデックスを描画順でソート
            for (var i = 0; i < drawableCount; ++i) {
                var order = renderOrder[i];
                this._sortedDrawableIndexList.set(order, i);
            }
            // 描画
            for (var i = 0; i < drawableCount; ++i) {
                var drawableIndex = this._sortedDrawableIndexList.at(i);
                // Drawableが表示状態でなければ処理をパスする
                if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {
                    continue;
                }
                // クリッピングマスクをセットする
                this.setClippingContextBufferForDraw((this._clippingManager != null)
                    ? (this._clippingManager.getClippingContextListForDraw()).at(drawableIndex)
                    : null);
                this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));
                this.drawMesh(this.getModel().getDrawableTextureIndices(drawableIndex), this.getModel().getDrawableVertexIndexCount(drawableIndex), this.getModel().getDrawableVertexCount(drawableIndex), this.getModel().getDrawableVertexIndices(drawableIndex), this.getModel().getDrawableVertices(drawableIndex), this.getModel().getDrawableVertexUvs(drawableIndex), this.getModel().getDrawableOpacity(drawableIndex), this.getModel().getDrawableBlendMode(drawableIndex));
            }
        };
        /**
         * [オーバーライド]
         * 描画オブジェクト（アートメッシュ）を描画する。
         * ポリゴンメッシュとテクスチャ番号をセットで渡す。
         * @param textureNo 描画するテクスチャ番号
         * @param indexCount 描画オブジェクトのインデックス値
         * @param vertexCount ポリゴンメッシュの頂点数
         * @param indexArray ポリゴンメッシュのインデックス配列
         * @param vertexArray ポリゴンメッシュの頂点配列
         * @param uvArray uv配列
         * @param opacity 不透明度
         * @param colorBlendMode カラー合成タイプ
         */
        CubismRenderer_WebGL.prototype.drawMesh = function (textureNo, indexCount, vertexCount, indexArray, vertexArray, uvArray, opacity, colorBlendMode) {
            // 裏面描画の有効・無効
            if (this.isCulling()) {
                this.gl.enable(this.gl.CULL_FACE);
            }
            else {
                this.gl.disable(this.gl.CULL_FACE);
            }
            this.gl.frontFace(this.gl.CCW); // Cubism3 OpenGLはマスク・アートメッシュ共にCCWが表面
            var modelColorRGBA = this.getModelColor();
            if (this.getClippingContextBufferForMask() == null) // マスク生成時以外
             {
                modelColorRGBA.A *= opacity;
                if (this.isPremultipliedAlpha()) {
                    modelColorRGBA.R *= modelColorRGBA.A;
                    modelColorRGBA.G *= modelColorRGBA.A;
                    modelColorRGBA.B *= modelColorRGBA.A;
                }
            }
            var drawtexture; // シェーダに渡すテクスチャ
            // テクスチャマップからバインド済みテクスチャＩＤを取得
            // バインドされていなければダミーのテクスチャIDをセットする
            if (this._textures.getValue(textureNo) != null) {
                drawtexture = this._textures.getValue(textureNo);
            }
            else {
                drawtexture = null;
            }
            CubismShader_WebGL.getInstance().setupShaderProgram(this, drawtexture, vertexCount, vertexArray, indexArray, uvArray, this._bufferData, opacity, colorBlendMode, modelColorRGBA, this.isPremultipliedAlpha(), this.getMvpMatrix());
            // ポリゴンメッシュを描画する
            this.gl.drawElements(this.gl.TRIANGLES, indexCount, this.gl.UNSIGNED_SHORT, 0);
            // 後処理
            this.gl.useProgram(null);
            this.setClippingContextBufferForDraw(null);
            this.setClippingContextBufferForMask(null);
        };
        /**
         * レンダラが保持する静的なリソースを解放する
         * WebGLの静的なシェーダープログラムを解放する
         */
        CubismRenderer_WebGL.doStaticRelease = function () {
            CubismShader_WebGL.deleteInstance();
        };
        /**
         * レンダーステートを設定する
         * @param fbo アプリケーション側で指定しているフレームバッファ
         * @param viewport ビューポート
         */
        CubismRenderer_WebGL.prototype.setRenderState = function (fbo, viewport) {
            s_fbo = fbo;
            s_viewport = viewport;
        };
        /**
         * 描画開始時の追加処理
         * モデルを描画する前にクリッピングマスクに必要な処理を実装している
         */
        CubismRenderer_WebGL.prototype.preDraw = function () {
            if (this.firstDraw) {
                this.firstDraw = false;
                // 拡張機能を有効にする
                this._anisortopy = this.gl.getExtension("EXT_texture_filter_anisotropic") ||
                    this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic") ||
                    this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic");
            }
            this.gl.disable(this.gl.SCISSOR_TEST);
            this.gl.disable(this.gl.STENCIL_TEST);
            this.gl.disable(this.gl.DEPTH_TEST);
            // カリング（1.0beta3）
            this.gl.frontFace(this.gl.CW);
            this.gl.enable(this.gl.BLEND);
            this.gl.colorMask(true, true, true, true);
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null); // 前にバッファがバインドされていたら破棄する必要がある
            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        };
        /**
         * マスクテクスチャに描画するクリッピングコンテキストをセットする
         */
        CubismRenderer_WebGL.prototype.setClippingContextBufferForMask = function (clip) {
            this._clippingContextBufferForMask = clip;
        };
        /**
         * マスクテクスチャに描画するクリッピングコンテキストを取得する
         * @return マスクテクスチャに描画するクリッピングコンテキスト
         */
        CubismRenderer_WebGL.prototype.getClippingContextBufferForMask = function () {
            return this._clippingContextBufferForMask;
        };
        /**
         * 画面上に描画するクリッピングコンテキストをセットする
         */
        CubismRenderer_WebGL.prototype.setClippingContextBufferForDraw = function (clip) {
            this._clippingContextBufferForDraw = clip;
        };
        /**
         * 画面上に描画するクリッピングコンテキストを取得する
         * @return 画面上に描画するクリッピングコンテキスト
         */
        CubismRenderer_WebGL.prototype.getClippingContextBufferForDraw = function () {
            return this._clippingContextBufferForDraw;
        };
        /**
         * glの設定
         */
        CubismRenderer_WebGL.prototype.startUp = function (gl) {
            this.gl = gl;
            this._clippingManager.setGL(gl);
            CubismShader_WebGL.getInstance().setGl(gl);
        };
        return CubismRenderer_WebGL;
    }(CubismRenderer));
    Live2DCubismFramework.CubismRenderer_WebGL = CubismRenderer_WebGL;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/type/csmmap.ts":
/*!**********************************!*\
  !*** ./Framework/type/csmmap.ts ***!
  \**********************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _utils_cubismdebug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cubismdebug */ "./Framework/utils/cubismdebug.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */

var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * Key-Valueのペアを定義するクラス
     * csmMapクラスの内部データで使用する。
     */
    var csmPair = /** @class */ (function () {
        /**
         * コンストラクタ
         * @param key Keyとしてセットする値
         * @param value Valueとしてセットする値
         */
        function csmPair(key, value) {
            this.first = (key == undefined)
                ? null
                : key;
            this.second = (value == undefined)
                ? null
                : value;
        }
        return csmPair;
    }());
    Live2DCubismFramework.csmPair = csmPair;
    /**
     * マップ型
     */
    var csmMap = /** @class */ (function () {
        /**
         * 引数付きコンストラクタ
         * @param size 初期化時点で確保するサイズ
         */
        function csmMap(size) {
            if (size != undefined) {
                if (size < 1) {
                    this._keyValues = new Array();
                    this._dummyValue = null;
                    this._size = 0;
                }
                else {
                    this._keyValues = new Array(size);
                    this._size = size;
                }
            }
            else {
                this._keyValues = new Array();
                this._dummyValue = null;
                this._size = 0;
            }
        }
        /**
         * デストラクタ
         */
        csmMap.prototype.release = function () {
            this.clear();
        };
        /**
         * キーを追加する
         * @param key 新たに追加するキー
         */
        csmMap.prototype.appendKey = function (key) {
            // 新しくKey/Valueのペアを作る
            this.prepareCapacity(this._size + 1, false); // 1つ以上入る隙間を作る
            // 新しいkey/valueのインデックスは_size
            this._keyValues[this._size] = new csmPair(key);
            this._size += 1;
        };
        /**
         * 添字演算子[key]のオーバーロード(get)
         * @param key 添字から特定されるValue値
         */
        csmMap.prototype.getValue = function (key) {
            var found = -1;
            for (var i = 0; i < this._size; i++) {
                if (this._keyValues[i].first == key) {
                    found = i;
                    break;
                }
            }
            if (found >= 0) {
                return this._keyValues[found].second;
            }
            else {
                this.appendKey(key); // 新規キーを追加
                return this._keyValues[this._size - 1].second;
            }
        };
        /**
         * 添字演算子[key]のオーバーロード(set)
         * @param key 添字から特定されるValue値
         * @param value 代入するValue値
         */
        csmMap.prototype.setValue = function (key, value) {
            var found = -1;
            for (var i = 0; i < this._size; i++) {
                if (this._keyValues[i].first == key) {
                    found = i;
                    break;
                }
            }
            if (found >= 0) {
                this._keyValues[found].second = value;
            }
            else {
                this.appendKey(key); // 新規キーを追加
                this._keyValues[this._size - 1].second = value;
            }
        };
        /**
         * 引数で渡したKeyを持つ要素が存在するか
         * @param key 存在を確認するkey
         * @return true 引数で渡したkeyを持つ要素が存在する
         * @return false 引数で渡したkeyを持つ要素が存在しない
         */
        csmMap.prototype.isExist = function (key) {
            for (var i = 0; i < this._size; i++) {
                if (this._keyValues[i].first == key) {
                    return true;
                }
            }
            return false;
        };
        /**
         * keyValueのポインタを全て解放する
         */
        csmMap.prototype.clear = function () {
            this._keyValues = void 0;
            this._keyValues = null;
            this._keyValues = new Array();
            this._size = 0;
        };
        /**
         * コンテナのサイズを取得する
         *
         * @return コンテナのサイズ
         */
        csmMap.prototype.getSize = function () {
            return this._size;
        };
        /**
         * コンテナのキャパシティを確保する
         * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない。
         * @param fitToSize trueなら指定したサイズに合わせる。falseならサイズを2倍確保しておく。
         */
        csmMap.prototype.prepareCapacity = function (newSize, fitToSize) {
            if (newSize > this._keyValues.length) {
                if (this._keyValues.length == 0) {
                    if (!fitToSize && newSize < csmMap.DefaultSize)
                        newSize = csmMap.DefaultSize;
                    this._keyValues.length = newSize;
                }
                else {
                    if (!fitToSize && newSize < this._keyValues.length * 2)
                        newSize = this._keyValues.length * 2;
                    this._keyValues.length = newSize;
                }
            }
        };
        /**
         * コンテナの先頭要素を返す
         */
        csmMap.prototype.begin = function () {
            var ite = new iterator(this, 0);
            return ite;
        };
        /**
         * コンテナの終端要素を返す
         */
        csmMap.prototype.end = function () {
            var ite = new iterator(this, this._size); // 終了
            return ite;
        };
        /**
         * コンテナから要素を削除する
         *
         * @param ite 削除する要素
         */
        csmMap.prototype.erase = function (ite) {
            var index = ite._index;
            if (index < 0 || this._size <= index) {
                return ite; // 削除範囲外
            }
            // 削除
            this._keyValues.splice(index, 1);
            --this._size;
            var ite2 = new iterator(this, index); // 終了
            return ite2;
        };
        /**
         * コンテナの値を32ビット符号付き整数型でダンプする
         */
        csmMap.prototype.dumpAsInt = function () {
            for (var i = 0; i < this._size; i++) {
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_0__["CubismLogDebug"])("{0} ,", this._keyValues[i]);
                Object(_utils_cubismdebug__WEBPACK_IMPORTED_MODULE_0__["CubismLogDebug"])("\n");
            }
        };
        csmMap.DefaultSize = 10; // コンテナの初期化のデフォルトサイズ
        return csmMap;
    }());
    Live2DCubismFramework.csmMap = csmMap;
    /**
     * csmMap<T>のイテレータ
     */
    var iterator = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function iterator(v, idx) {
            this._map = (v != undefined)
                ? v
                : new csmMap();
            this._index = (idx != undefined)
                ? idx
                : 0;
        }
        /**
         * =演算子のオーバーロード
         */
        iterator.prototype.set = function (ite) {
            this._index = ite._index;
            this._map = ite._map;
            return this;
        };
        /**
         * 前置き++演算子のオーバーロード
         */
        iterator.prototype.preIncrement = function () {
            ++this._index;
            return this;
        };
        /**
         * 前置き--演算子のオーバーロード
         */
        iterator.prototype.preDecrement = function () {
            --this._index;
            return this;
        };
        /**
         * 後置き++演算子のオーバーロード
         */
        iterator.prototype.increment = function () {
            var iteold = new iterator(this._map, this._index++); // 古い値を保存
            this._map = iteold._map;
            this._index = iteold._index;
            return this;
        };
        /**
         * 後置き--演算子のオーバーロード
         */
        iterator.prototype.decrement = function () {
            var iteold = new iterator(this._map, this._index); // 古い値を保存
            this._map = iteold._map;
            this._index = iteold._index;
            return this;
        };
        /**
         * *演算子のオーバーロード
         */
        iterator.prototype.ptr = function () {
            return this._map._keyValues[this._index];
        };
        /**
         * !=演算
         */
        iterator.prototype.notEqual = function (ite) {
            return (this._index != ite._index) || (this._map != ite._map);
        };
        return iterator;
    }());
    Live2DCubismFramework.iterator = iterator;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/type/csmrectf.ts":
/*!************************************!*\
  !*** ./Framework/type/csmrectf.ts ***!
  \************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * 矩形形状（座標・長さはfloat値）を定義するクラス
     */
    var csmRect = /** @class */ (function () {
        /**
         * コンストラクタ
         * @param x 左端X座標
         * @param y 上端Y座標
         * @param w 幅
         * @param h 高さ
         */
        function csmRect(x, y, w, h) {
            this.x = x;
            this.y = y;
            this.width = w;
            this.height = h;
        }
        /**
         * 矩形中央のX座標を取得する
         */
        csmRect.prototype.getCenterX = function () {
            return this.x + 0.5 * this.width;
        };
        /**
         * 矩形中央のY座標を取得する
         */
        csmRect.prototype.getCenterY = function () {
            return this.y + 0.5 * this.height;
        };
        /**
         * 右側のX座標を取得する
         */
        csmRect.prototype.getRight = function () {
            return this.x + this.width;
        };
        /**
         * 下端のY座標を取得する
         */
        csmRect.prototype.getBottom = function () {
            return this.y + this.height;
        };
        /**
         * 矩形に値をセットする
         * @param r 矩形のインスタンス
         */
        csmRect.prototype.setRect = function (r) {
            this.x = r.x;
            this.y = r.y;
            this.width = r.width;
            this.height = r.height;
        };
        /**
         * 矩形中央を軸にして縦横を拡縮する
         * @param w 幅方向に拡縮する量
         * @param h 高さ方向に拡縮する量
         */
        csmRect.prototype.expand = function (w, h) {
            this.x -= w;
            this.y -= h;
            this.width += w * 2.0;
            this.height += h * 2.0;
        };
        return csmRect;
    }());
    Live2DCubismFramework.csmRect = csmRect;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/type/csmstring.ts":
/*!*************************************!*\
  !*** ./Framework/type/csmstring.ts ***!
  \*************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * 文字列クラス。
     */
    var csmString = /** @class */ (function () {
        /**
         * 引数付きコンストラクタ
         */
        function csmString(s) {
            this.s = s;
        }
        /**
         * 文字列を後方に追加する
         *
         * @param c 追加する文字列
         * @return 更新された文字列
         */
        csmString.prototype.append = function (c, length) {
            this.s += (length !== undefined)
                ? c.substr(0, length)
                : c;
            return this;
        };
        /**
         * 文字サイズを拡張して文字を埋める
         * @param length    拡張する文字数
         * @param v         埋める文字
         * @return 更新された文字列
         */
        csmString.prototype.expansion = function (length, v) {
            var ret = this;
            for (var i = 0; i < length; i++) {
                ret.append(v);
            }
            return ret;
        };
        /**
         * 文字列の長さをバイト数で取得する
         */
        csmString.prototype.getBytes = function () {
            return encodeURIComponent(this.s).replace(/%../g, "x").length;
        };
        /**
         * 文字列の長さを返す
         */
        csmString.prototype.getLength = function () {
            return this.s.length;
        };
        /**
         * 文字列比較　<
         * @param s 比較する文字列
         * @return true:    比較する文字列より小さい
         * @return false:   比較する文字列より大きい
         */
        csmString.prototype.isLess = function (s) {
            return this.s < s.s;
        };
        /**
         * 文字列比較 >
         * @param s 比較する文字列
         * @return true:    比較する文字列より大きい
         * @return false:   比較する文字列より小さい
         */
        csmString.prototype.isGreat = function (s) {
            return this.s > s.s;
        };
        /**
         * 文字列比較 ==
         * @param s 比較する文字列
         * @return true:    比較する文字列と等しい
         * @return false:   比較する文字列と異なる
         */
        csmString.prototype.isEqual = function (s) {
            return this.s == s;
        };
        /**
         * 文字列が空かどうか
         * @return true: 空の文字列
         * @return false: 値が設定されている
         */
        csmString.prototype.isEmpty = function () {
            return this.s.length == 0;
        };
        return csmString;
    }());
    Live2DCubismFramework.csmString = csmString;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/type/csmvector.ts":
/*!*************************************!*\
  !*** ./Framework/type/csmvector.ts ***!
  \*************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * ベクター型（可変配列型）
     */
    var csmVector = /** @class */ (function () {
        /**
         * 引数付きコンストラクタ
         * @param iniitalCapacity 初期化後のキャパシティ。データサイズは_capacity * sizeof(T)
         * @param zeroClear trueなら初期化時に確保した領域を0で埋める
         */
        function csmVector(initialCapacity) {
            if (initialCapacity === void 0) { initialCapacity = 0; }
            if (initialCapacity < 1) {
                this._ptr = new Array();
                this._capacity = 0;
                this._size = 0;
            }
            else {
                this._ptr = new Array(initialCapacity);
                this._capacity = initialCapacity;
                this._size = 0;
            }
        }
        /**
         * インデックスで指定した要素を返す
         */
        csmVector.prototype.at = function (index) {
            return this._ptr[index];
        };
        /**
         * 要素をセット
         * @param index 要素をセットするインデックス
         * @param value セットする要素
         */
        csmVector.prototype.set = function (index, value) {
            this._ptr[index] = value;
        };
        /**
         * コンテナを取得する
         */
        csmVector.prototype.get = function (offset) {
            if (offset === void 0) { offset = 0; }
            var ret = new Array();
            for (var i = offset; i < this._size; i++) {
                ret.push(this._ptr[i]);
            }
            return ret;
        };
        /**
         * pushBack処理、コンテナに新たな要素を追加する
         * @param value PushBack処理で追加する値
         */
        csmVector.prototype.pushBack = function (value) {
            if (this._size >= this._capacity) {
                this.prepareCapacity(this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2);
            }
            this._ptr[this._size++] = value;
        };
        /**
         * コンテナの全要素を解放する
         */
        csmVector.prototype.clear = function () {
            this._ptr.length = 0;
            this._size = 0;
        };
        /**
         * コンテナの要素数を返す
         * @return コンテナの要素数
         */
        csmVector.prototype.getSize = function () {
            return this._size;
        };
        /**
         * コンテナの全要素に対して代入処理を行う
         * @param newSize 代入処理後のサイズ
         * @param value 要素に代入する値
         */
        csmVector.prototype.assign = function (newSize, value) {
            var curSize = this._size;
            if (curSize < newSize) {
                this.prepareCapacity(newSize); // capacity更新
            }
            for (var i = 0; i < newSize; i++) {
                this._ptr[i] = value;
            }
            this._size = newSize;
        };
        /**
         * サイズ変更
         */
        csmVector.prototype.resize = function (newSize, value) {
            if (value === void 0) { value = null; }
            this.updateSize(newSize, value, true);
        };
        /**
         * サイズ変更
         */
        csmVector.prototype.updateSize = function (newSize, value, callPlacementNew) {
            if (value === void 0) { value = null; }
            if (callPlacementNew === void 0) { callPlacementNew = true; }
            var curSize = this._size;
            if (curSize < newSize) {
                this.prepareCapacity(newSize); // capacity更新
                if (callPlacementNew) {
                    for (var i = this._size; i < newSize; i++) {
                        if (typeof value == 'function') // new
                         {
                            this._ptr[i] = JSON.parse(JSON.stringify(new value()));
                        }
                        else // プリミティブ型なので値渡し
                         {
                            this._ptr[i] = value;
                        }
                    }
                }
                else {
                    for (var i = this._size; i < newSize; i++) {
                        this._ptr[i] = value;
                    }
                }
            }
            else {
                // newSize <= this._size
                //---
                var sub = this._size - newSize;
                this._ptr.splice(this._size - sub, sub); // 不要なので破棄する
            }
            this._size = newSize;
        };
        /**
         * コンテナにコンテナ要素を挿入する
         * @param position 挿入する位置
         * @param begin　挿入するコンテナの開始位置
         * @param end 挿入するコンテナの終端位置
         */
        csmVector.prototype.insert = function (position, begin, end) {
            var dstSi = position._index;
            var srcSi = begin._index;
            var srcEi = end._index;
            var addCount = srcEi - srcSi;
            this.prepareCapacity(this._size + addCount);
            // 挿入用の既存データをシフトして隙間を作る
            var addSize = this._size - dstSi;
            if (addSize > 0) {
                for (var i = 0; i < addSize; i++) {
                    this._ptr.splice(dstSi + i, 0, null);
                }
            }
            for (var i = srcSi; i < srcEi; i++, dstSi++) {
                this._ptr[dstSi] = begin._vector._ptr[i];
            }
            this._size = this._size + addCount;
        };
        /**
         * コンテナからインデックスで指定した要素を削除する
         * @param index インデックス値
         * @return true 削除実行
         * @return false 削除範囲外
         */
        csmVector.prototype.remove = function (index) {
            if (index < 0 || this._size <= index) {
                return false; // 削除範囲外
            }
            this._ptr.splice(index, 1);
            --this._size;
            return true;
        };
        /**
         * コンテナから要素を削除して他の要素をシフトする
         * @param ite 削除する要素
         */
        csmVector.prototype.erase = function (ite) {
            var index = ite._index;
            if (index < 0 || this._size <= index) {
                return ite; // 削除範囲外
            }
            // 削除
            this._ptr.splice(index, 1);
            --this._size;
            var ite2 = new iterator(this, index); // 終了
            return ite2;
        };
        /**
         * コンテナのキャパシティを確保する
         * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない.
         */
        csmVector.prototype.prepareCapacity = function (newSize) {
            if (newSize > this._capacity) {
                if (this._capacity == 0) {
                    this._ptr = new Array(newSize);
                    this._capacity = newSize;
                }
                else {
                    this._ptr.length = newSize;
                    this._capacity = newSize;
                }
            }
        };
        /**
         * コンテナの先頭要素を返す
         */
        csmVector.prototype.begin = function () {
            var ite = (this._size == 0)
                ? this.end()
                : new iterator(this, 0);
            return ite;
        };
        /**
         * コンテナの終端要素を返す
         */
        csmVector.prototype.end = function () {
            var ite = new iterator(this, this._size);
            return ite;
        };
        csmVector.prototype.getOffset = function (offset) {
            var newVector = new csmVector();
            newVector._ptr = this.get(offset);
            newVector._size = this.get(offset).length;
            newVector._capacity = this.get(offset).length;
            return newVector;
        };
        csmVector.s_defaultSize = 10; // コンテナ初期化のデフォルトサイズ
        return csmVector;
    }());
    Live2DCubismFramework.csmVector = csmVector;
    var iterator = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function iterator(v, index) {
            this._vector = (v != undefined) ? v : null;
            this._index = (index != undefined) ? index : 0;
        }
        /**
         * 代入
         */
        iterator.prototype.set = function (ite) {
            this._index = ite._index;
            this._vector = ite._vector;
            return this;
        };
        /**
         * 前置き++演算
         */
        iterator.prototype.preIncrement = function () {
            ++this._index;
            return this;
        };
        /**
         * 前置き--演算
         */
        iterator.prototype.preDecrement = function () {
            --this._index;
            return this;
        };
        /**
         * 後置き++演算子
         */
        iterator.prototype.increment = function () {
            var iteold = new iterator(this._vector, this._index++);
            this._vector = iteold._vector;
            this._index = iteold._index;
            return this;
        };
        /**
         * 後置き--演算子
         */
        iterator.prototype.decrement = function () {
            var iteold = new iterator(this._vector, this._index--); // 古い値を保存
            this._vector = iteold._vector;
            this._index = iteold._index;
            return this;
        };
        /**
         * ptr
         */
        iterator.prototype.ptr = function () {
            return this._vector._ptr[this._index];
        };
        /**
         * =演算子のオーバーロード
         */
        iterator.prototype.substitution = function (ite) {
            this._index = ite._index;
            this._vector = ite._vector;
            return this;
        };
        /**
         * !=演算子のオーバーロード
         */
        iterator.prototype.notEqual = function (ite) {
            return (this._index != ite._index) || (this._vector != ite._vector);
        };
        return iterator;
    }());
    Live2DCubismFramework.iterator = iterator;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Framework/utils/cubismdebug.ts":
/*!****************************************!*\
  !*** ./Framework/utils/cubismdebug.ts ***!
  \****************************************/
/*! exports provided: CubismLogPrint, CubismLogPrintIn, CSM_ASSERT, CubismLogVerbose, CubismLogDebug, CubismLogInfo, CubismLogWarning, CubismLogError, Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubismLogPrint", function() { return CubismLogPrint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubismLogPrintIn", function() { return CubismLogPrintIn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSM_ASSERT", function() { return CSM_ASSERT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubismLogVerbose", function() { return CubismLogVerbose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubismLogDebug", function() { return CubismLogDebug; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubismLogInfo", function() { return CubismLogInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubismLogWarning", function() { return CubismLogWarning; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubismLogError", function() { return CubismLogError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/* harmony import */ var _cubismframeworkconfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cubismframeworkconfig */ "./Framework/cubismframeworkconfig.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */


var CubismLogPrint = function (level, fmt) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    Live2DCubismFramework.CubismDebug.print(level, "[CSM]" + fmt, args);
};
var CubismLogPrintIn = function (level, fmt) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    CubismLogPrint(level, fmt + "\n", args);
};
var CSM_ASSERT = function (expr) {
    console.assert(expr);
};
var CubismLogVerbose = function (fmt) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
};
var CubismLogDebug = function (fmt) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
};
var CubismLogInfo = function (fmt) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
};
var CubismLogWarning = function (fmt) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
};
var CubismLogError = function (fmt) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
};
if (_cubismframeworkconfig__WEBPACK_IMPORTED_MODULE_1__["CSM_LOG_LEVEL"] <= _cubismframeworkconfig__WEBPACK_IMPORTED_MODULE_1__["CSM_LOG_LEVEL_VERBOSE"]) {
    CubismLogVerbose = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Verbose, "[V]" + fmt, args);
    };
    CubismLogDebug = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Debug, "[D]" + fmt, args);
    };
    CubismLogInfo = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Info, "[I]" + fmt, args);
    };
    CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Warning, "[W]" + fmt, args);
    };
    CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Error, "[E]" + fmt, args);
    };
}
else if (_cubismframeworkconfig__WEBPACK_IMPORTED_MODULE_1__["CSM_LOG_LEVEL"] == _cubismframeworkconfig__WEBPACK_IMPORTED_MODULE_1__["CSM_LOG_LEVEL_DEBUG"]) {
    CubismLogDebug = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Debug, "[D]" + fmt, args);
    };
    CubismLogInfo = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Info, "[I]" + fmt, args);
    };
    CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Warning, "[W]" + fmt, args);
    };
    CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Error, "[E]" + fmt, args);
    };
}
else if (_cubismframeworkconfig__WEBPACK_IMPORTED_MODULE_1__["CSM_LOG_LEVEL"] == _cubismframeworkconfig__WEBPACK_IMPORTED_MODULE_1__["CSM_LOG_LEVEL_INFO"]) {
    CubismLogInfo = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Info, "[I]" + fmt, args);
    };
    CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Warning, "[W]" + fmt, args);
    };
    CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Error, "[E]" + fmt, args);
    };
}
else if (_cubismframeworkconfig__WEBPACK_IMPORTED_MODULE_1__["CSM_LOG_LEVEL"] == _cubismframeworkconfig__WEBPACK_IMPORTED_MODULE_1__["CSM_LOG_LEVEL_WARNING"]) {
    CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Warning, "[W]" + fmt, args);
    };
    CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Error, "[E]" + fmt, args);
    };
}
else if (_cubismframeworkconfig__WEBPACK_IMPORTED_MODULE_1__["CSM_LOG_LEVEL"] == _cubismframeworkconfig__WEBPACK_IMPORTED_MODULE_1__["CSM_LOG_LEVEL_ERROR"]) {
    CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        CubismLogPrintIn(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].LogLevel_Error, "[E]" + fmt, args);
    };
}
//------------ LIVE2D NAMESPACE ------------
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    /**
     * デバッグ用のユーティリティクラス。
     * ログの出力、バイトのダンプなど
     */
    var CubismDebug = /** @class */ (function () {
        /**
         * private コンストラクタ
         */
        function CubismDebug() {
        }
        /**
         * ログを出力する。第一引数にログレベルを設定する。
         * CubismFramework.initialize()時にオプションで設定されたログ出力レベルを下回る場合はログに出さない。
         *
         * @param logLevel ログレベルの設定
         * @param format 書式付き文字列
         * @param ... args 可変長引数
         */
        CubismDebug.print = function (logLevel, format) {
            // オプションで設定されたログ出力レベルを下回る場合はログに出さない
            // if(logLevel < CubismFramework.getLoggingLevel())
            // {
            //     return;
            // }
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            // TODO
            // const Core::csmLogFunction logPrint = CubismFramework::CoreLogFunction;
            // if (!logPrint)
            //     return;
            var buffer = format;
            buffer = buffer.replace(/\{(\d+)\}/g, function (m, k) {
                return args[k];
            });
            // logPrint(buffer);
        };
        /**
         * データから指定した長さだけダンプ出力する。
         * CubismFramework.initialize()時にオプションで設定されたログ出力レベルを下回る場合はログに出さない。
         *
         * @param logLevel ログレベルの設定
         * @param data ダンプするデータ
         * @param length ダンプする長さ
         */
        CubismDebug.dumpBytes = function (logLevel, data, length) {
            for (var i = 0; i < length; i++) {
                if (i % 16 == 0 && i > 0)
                    this.print(logLevel, "\n");
                else if (i % 8 == 0 && i > 0)
                    this.print(logLevel, "  ");
                this.print(logLevel, "{0} ", (data[i] & 0xFF));
            }
            this.print(logLevel, "\n");
        };
        return CubismDebug;
    }());
    Live2DCubismFramework.CubismDebug = CubismDebug;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));
//------------ LIVE2D NAMESPACE ------------


/***/ }),

/***/ "./Framework/utils/cubismjson.ts":
/*!***************************************!*\
  !*** ./Framework/utils/cubismjson.ts ***!
  \***************************************/
/*! exports provided: Live2DCubismFramework */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Live2DCubismFramework", function() { return Live2DCubismFramework; });
/* harmony import */ var _type_csmstring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../type/csmstring */ "./Framework/type/csmstring.ts");
/* harmony import */ var _type_csmmap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../type/csmmap */ "./Framework/type/csmmap.ts");
/* harmony import */ var _type_csmvector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../type/csmvector */ "./Framework/type/csmvector.ts");
/* harmony import */ var _cubismdebug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cubismdebug */ "./Framework/utils/cubismdebug.ts");
/* harmony import */ var _live2dcubismframework__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/*
 * Copyright(c) Live2D Inc. All rights reserved.
 *
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var csmVector = _type_csmvector__WEBPACK_IMPORTED_MODULE_2__["Live2DCubismFramework"].csmVector;
var csmMap = _type_csmmap__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].csmMap;
var csmString = _type_csmstring__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].csmString;
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    // StaticInitializeNotForClientCall()で初期化する
    var CSM_JSON_ERROR_TYPE_MISMATCH = "Error: type mismatch";
    var CSM_JSON_ERROR_INDEX_OF_BOUNDS = "Error: index out of bounds";
    /**
     * パースしたJSONエレメントの要素の基底クラス。
     */
    var Value = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function Value() {
        }
        /**
         * 要素を文字列型で返す(string)
         */
        Value.prototype.getRawString = function (defaultValue, indent) {
            return this.getString(defaultValue, indent);
        };
        /**
         * 要素を数値型で返す(number)
         */
        Value.prototype.toInt = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = 0; }
            return defaultValue;
        };
        /**
         * 要素を数値型で返す(number)
         */
        Value.prototype.toFloat = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = 0; }
            return defaultValue;
        };
        /**
         * 要素を真偽値で返す(boolean)
         */
        Value.prototype.toBoolean = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = false; }
            return defaultValue;
        };
        /**
         * サイズを返す
         */
        Value.prototype.getSize = function () {
            return 0;
        };
        /**
         * 要素を配列で返す(Value[])
         */
        Value.prototype.getArray = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = null; }
            return defaultValue;
        };
        /**
         * 要素をコンテナで返す(array)
         */
        Value.prototype.getVector = function (defaultValue) {
            return defaultValue;
        };
        /**
         * 要素をマップで返す(csmMap<csmString, Value>)
         */
        Value.prototype.getMap = function (defaultValue) {
            return defaultValue;
        };
        /**
         * マップのキー一覧をコンテナで返す
         *
         * @return マップのキーの一覧
         */
        Value.prototype.getKeys = function () {
            return Value.s_dummyKeys;
        };
        /**
         * Valueの種類がエラー値ならtrue
         */
        Value.prototype.isError = function () {
            return false;
        };
        /**
         * Valueの種類がnullならtrue
         */
        Value.prototype.isNull = function () {
            return false;
        };
        /**
         * Valueの種類が真偽値ならtrue
         */
        Value.prototype.isBool = function () {
            return false;
        };
        /**
         * Valueの種類が数値型ならtrue
         */
        Value.prototype.isFloat = function () {
            return false;
        };
        /**
         * Valueの種類が文字列ならtrue
         */
        Value.prototype.isString = function () {
            return false;
        };
        /**
         * Valueの種類が配列ならtrue
         */
        Value.prototype.isArray = function () {
            return false;
        };
        /**
         * Valueの種類がマップ型ならtrue
         */
        Value.prototype.isMap = function () {
            return false;
        };
        Value.prototype.equals = function (value) {
            return false;
        };
        /**
         * Valueの値が静的ならtrue、静的なら解放しない
         */
        Value.prototype.isStatic = function () {
            return false;
        };
        /**
         * Valueにエラー値をセットする
         */
        Value.prototype.setErrorNotForClientCall = function (errorStr) {
            return Value.errorValue;
        };
        /**
         * 初期化用メソッド
         */
        Value.staticInitializeNotForClientCall = function () {
            JsonBoolean.trueValue = new JsonBoolean(true);
            JsonBoolean.falseValue = new JsonBoolean(false);
            JsonError.errorValue = new JsonError("ERROR", true);
            this.nullValue = new JsonNullvalue();
            Value.s_dummyKeys = new csmVector();
        };
        /**
         * リリース用メソッド
         */
        Value.staticReleaseNotForClientCall = function () {
            JsonBoolean.trueValue = void 0;
            JsonBoolean.falseValue = void 0;
            JsonError.errorValue = void 0;
            Value.nullValue = void 0;
            Value.s_dummyKeys = void 0;
            JsonBoolean.trueValue = null;
            JsonBoolean.falseValue = null;
            JsonError.errorValue = null;
            Value.nullValue = null;
            Value.s_dummyKeys = null;
        };
        return Value;
    }());
    Live2DCubismFramework.Value = Value;
    /**
     * Ascii文字のみ対応した最小限の軽量JSONパーサ。
     * 仕様はJSONのサブセットとなる。
     * 設定ファイル(model3.json)などのロード用
     *
     * [未対応項目]
     * ・日本語などの非ASCII文字
     * ・eによる指数表現
     */
    var CubismJson = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function CubismJson(buffer, length) {
            this._error = null;
            this._lineCount = 0;
            this._root = null;
            if (buffer != undefined) {
                this.parseBytes(buffer, length);
            }
        }
        /**
         * バイトデータから直接ロードしてパースする
         *
         * @param buffer バッファ
         * @param size バッファサイズ
         * @return CubismJsonクラスのインスタンス。失敗したらNULL
         */
        CubismJson.create = function (buffer, size) {
            var json = new CubismJson();
            var succeeded = json.parseBytes(buffer, size);
            if (!succeeded) {
                CubismJson.delete(json);
                console.log("parseBytes is failed");
                return null;
            }
            else {
                return json;
            }
        };
        /**
         * パースしたJSONオブジェクトの解放処理
         *
         * @param instance CubismJsonクラスのインスタンス
         */
        CubismJson.delete = function (instance) {
            instance = void 0;
            instance = null;
        };
        /**
         * パースしたJSONのルート要素を返す
         */
        CubismJson.prototype.getRoot = function () {
            return this._root;
        };
        /**
         *  UnicodeのバイナリをStringに変換
         *
         * @param buffer 変換するバイナリデータ
         * @return 変換後の文字列
         */
        CubismJson.prototype.arrayBufferToString = function (buffer) {
            var encodedString = String.fromCharCode.apply(null, new Uint8Array(buffer));
            var decodedString = decodeURIComponent(escape(encodedString));
            return decodedString;
        };
        /**
         * JSONのパースを実行する
         * @param buffer    パース対象のデータバイト
         * @param size      データバイトのサイズ
         * return true : 成功
         * return false: 失敗
         */
        CubismJson.prototype.parseBytes = function (buffer, size) {
            var endPos = new Array(1); // 参照渡しにするため配列
            var decodeBuffer = this.arrayBufferToString(buffer);
            this._root = this.parseValue(decodeBuffer, size, 0, endPos);
            if (this._error) {
                console.log(this._error);
                var strbuf = '\0';
                strbuf = "Json parse error : @line " + (this._lineCount + 1) + "\n";
                this._root = new JsonString(strbuf);
                Object(_cubismdebug__WEBPACK_IMPORTED_MODULE_3__["CubismLogInfo"])("{0}", this._root.getRawString());
                return false;
            }
            else if (this._root == null) {
                this._root = new JsonError(new csmString(this._error), false); // rootは解放されるのでエラーオブジェクトを別途作成する
                return false;
            }
            return true;
        };
        /**
         * パース時のエラー値を返す
         */
        CubismJson.prototype.getParseError = function () {
            return this._error;
        };
        /**
         * ルート要素の次の要素がファイルの終端だったらtrueを返す
         */
        CubismJson.prototype.checkEndOfFile = function () {
            return this._root.getArray()[1].equals("EOF");
        };
        /**
         * JSONエレメントからValue(float,String,Value*,Array,null,true,false)をパースする
         * エレメントの書式に応じて内部でParseString(), ParseObject(), ParseArray()を呼ぶ
         *
         * @param   buffer      JSONエレメントのバッファ
         * @param   length      パースする長さ
         * @param   begin       パースを開始する位置
         * @param   outEndPos   パース終了時の位置
         * @return      パースから取得したValueオブジェクト
         */
        CubismJson.prototype.parseValue = function (buffer, length, begin, outEndPos) {
            if (this._error)
                return null;
            var o = null;
            var i = begin;
            var f;
            for (; i < length; i++) {
                var c = buffer[i];
                switch (c) {
                    case '-':
                    case '.':
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                        {
                            var afterString = new Array(1); // 参照渡しにするため
                            f = Object(_live2dcubismframework__WEBPACK_IMPORTED_MODULE_4__["strtod"])(buffer.slice(i), afterString);
                            outEndPos[0] = buffer.indexOf(afterString[0]);
                            return new JsonFloat(f);
                        }
                    case '\"':
                        return new JsonString(this.parseString(buffer, length, i + 1, outEndPos)); // \"の次の文字から
                    case '[':
                        o = this.parseArray(buffer, length, i + 1, outEndPos);
                        return o;
                    case '{':
                        o = this.parseObject(buffer, length, i + 1, outEndPos);
                        return o;
                    case 'n': // null以外にない
                        if (i + 3 < length) {
                            o = new JsonNullvalue(); // 解放できるようにする
                            outEndPos[0] = i + 4;
                        }
                        else {
                            this._error = "parse null";
                        }
                        return o;
                    case 't': // true以外にない
                        if (i + 3 < length) {
                            o = JsonBoolean.trueValue;
                            outEndPos[0] = i + 4;
                        }
                        else {
                            this._error = "parse true";
                        }
                        return o;
                    case 'f': // false以外にない
                        if (i + 4 < length) {
                            o = JsonBoolean.falseValue;
                            outEndPos[0] = i + 5;
                        }
                        else {
                            this._error = "illegal ',' position";
                        }
                        return o;
                    case ',': // Array separator
                        this._error = "illegal ',' position";
                        return null;
                    case ']': // 不正な｝だがスキップする。配列の最後に不要な , があると思われる
                        outEndPos[0] = i; // 同じ文字を再処理
                        return null;
                    case '\n':
                        this._lineCount++;
                    case ' ':
                    case '\t':
                    case '\r':
                    default: // スキップ
                        break;
                }
            }
            this._error = "illegal end of value";
            return null;
        };
        /**
         * 次の「"」までの文字列をパースする。
         *
         * @param   string  ->  パース対象の文字列
         * @param   length  ->  パースする長さ
         * @param   begin   ->  パースを開始する位置
         * @param  outEndPos   ->  パース終了時の位置
         * @return      パースした文F字列要素
         */
        CubismJson.prototype.parseString = function (string, length, begin, outEndPos) {
            if (this._error)
                return null;
            var i = begin;
            var c, c2;
            var ret = new csmString("");
            var bufStart = begin; // sbufに登録されていない文字の開始位置
            for (; i < length; i++) {
                c = string[i];
                switch (c) {
                    case '\"': // 終端の”、エスケープ文字は別に処理されるのでここに来ない
                        {
                            outEndPos[0] = i + 1; // ”の次の文字
                            ret.append(string.slice(bufStart), (i - bufStart)); // 前の文字までを登録する
                            return ret.s;
                        }
                    case '//': // エスケープの場合
                        {
                            i++; // ２文字をセットで扱う
                            if (i - 1 > bufStart) {
                                ret.append(string.slice(bufStart), (i - bufStart)); // 前の文字までを登録する
                            }
                            bufStart = i + 1; // エスケープ（２文字)の次の文字から
                            if (i < length) {
                                c2 = string[i];
                                switch (c2) {
                                    case '\\':
                                        ret.expansion(1, '\\');
                                        break;
                                    case '\"':
                                        ret.expansion(1, '\"');
                                        break;
                                    case '/':
                                        ret.expansion(1, '/');
                                        break;
                                    case 'b':
                                        ret.expansion(1, '\b');
                                        break;
                                    case 'f':
                                        ret.expansion(1, '\f');
                                        break;
                                    case 'n':
                                        ret.expansion(1, '\n');
                                        break;
                                    case 'r':
                                        ret.expansion(1, '\r');
                                        break;
                                    case 't':
                                        ret.expansion(1, '\t');
                                        break;
                                    case 'u':
                                        this._error = "parse string/unicord escape not supported";
                                        break;
                                    default:
                                        break;
                                }
                            }
                            else {
                                this._error = "parse string/escape error";
                            }
                        }
                    default:
                        {
                            break;
                        }
                }
            }
            this._error = "parse string/illegal end";
            return null;
        };
        /**
         * JSONのオブジェクトエレメントをパースしてValueオブジェクトを返す
         *
         * @param buffer    JSONエレメントのバッファ
         * @param length    パースする長さ
         * @param begin     パースを開始する位置
         * @param outEndPos パース終了時の位置
         * @return パースから取得したValueオブジェクト
         */
        CubismJson.prototype.parseObject = function (buffer, length, begin, outEndPos) {
            if (this._error)
                return null;
            var ret = new JsonMap();
            // Key: Value
            var key = "";
            var i = begin;
            var c = "";
            var localRetEndPos2 = Array(1);
            var ok = false;
            // , が続く限りループ
            for (; i < length; i++) {
                FOR_LOOP: for (; i < length; i++) {
                    c = buffer[i];
                    switch (c) {
                        case '\"':
                            key = this.parseString(buffer, length, i + 1, localRetEndPos2);
                            if (this._error) {
                                return null;
                            }
                            i = localRetEndPos2[0];
                            ok = true;
                            break FOR_LOOP; //-- loopから出る
                        case '}': // 閉じカッコ
                            outEndPos[0] = i + 1;
                            return ret; // 空
                        case ':':
                            this._error = "illegal ':' position";
                            break;
                        case '\n':
                            this._lineCount++;
                        default:
                            break; // スキップする文字
                    }
                }
                if (!ok) {
                    this._error = "key not found";
                    return null;
                }
                ok = false;
                // : をチェック
                FOR_LOOP2: for (; i < length; i++) {
                    c = buffer[i];
                    switch (c) {
                        case ':':
                            ok = true;
                            i++;
                            break FOR_LOOP2;
                        case '}':
                            this._error = "illegal '}' position";
                            break;
                        case '\n': this._lineCount++;
                        // case ' ': case '\t' : case '\r':
                        default:
                            break; // スキップする文字
                    }
                }
                if (!ok) {
                    this._error = "':' not found";
                    return null;
                }
                // 値をチェック
                var value = this.parseValue(buffer, length, i, localRetEndPos2);
                if (this._error) {
                    return null;
                }
                i = localRetEndPos2[0];
                // ret.put(key, value);
                ret.put(key, value);
                FOR_LOOP3: for (; i < length; i++) {
                    c = buffer[i];
                    switch (c) {
                        case ',':
                            break FOR_LOOP3;
                        case '}':
                            outEndPos[0] = i + 1;
                            return ret; // 正常終了
                        case '\n':
                            this._lineCount++;
                        default:
                            break; // スキップ
                    }
                }
            }
            this._error = "illegal end of perseObject";
            return null;
        };
        /**
         * 次の「"」までの文字列をパースする。
         * @param buffer    JSONエレメントのバッファ
         * @param length    パースする長さ
         * @param begin     パースを開始する位置
         * @param outEndPos パース終了時の位置
         * @return パースから取得したValueオブジェクト
         */
        CubismJson.prototype.parseArray = function (buffer, length, begin, outEndPos) {
            if (this._error)
                return null;
            var ret = new JsonArray();
            // key : value
            var i = begin;
            var c;
            var localRetEndpos2 = new Array(1);
            // , が続く限りループ
            for (; i < length; i++) {
                // : をチェック
                var value = this.parseValue(buffer, length, i, localRetEndpos2);
                if (this._error) {
                    return null;
                }
                i = localRetEndpos2[0];
                if (value) {
                    ret.add(value);
                }
                // FOR_LOOP3:
                // boolean breakflag = false;
                FOR_LOOP: for (; i < length; i++) {
                    c = buffer[i];
                    switch (c) {
                        case ',':
                            // breakflag = true;
                            // break; // 次のKEY, VAlUEへ
                            break FOR_LOOP;
                        case ']':
                            outEndPos[0] = i + 1;
                            return ret; // 終了
                        case '\n':
                            ++this._lineCount;
                        //case ' ': case '\t': case '\r':
                        default:
                            break; // スキップ
                    }
                }
            }
            ret = void 0;
            this._error = "illegal end of parseObject";
            return null;
        };
        return CubismJson;
    }());
    Live2DCubismFramework.CubismJson = CubismJson;
    /**
     * パースしたJSONの要素をfloat値として扱う
     */
    var JsonFloat = /** @class */ (function (_super) {
        __extends(JsonFloat, _super);
        /**
         * コンストラクタ
         */
        function JsonFloat(v) {
            var _this = _super.call(this) || this;
            _this._value = v;
            return _this;
        }
        /**
         * Valueの種類が数値型ならtrue
         */
        JsonFloat.prototype.isFloat = function () {
            return true;
        };
        /**
         * 要素を文字列で返す(csmString型)
         */
        JsonFloat.prototype.getString = function (defaultValue, indent) {
            var strbuf = '\0';
            this._value = parseFloat(strbuf);
            this._stringBuffer = strbuf;
            return this._stringBuffer;
        };
        /**
         * 要素を数値型で返す(number)
         */
        JsonFloat.prototype.toInt = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = 0; }
            return parseInt(this._value.toString());
        };
        /**
         * 要素を数値型で返す(number)
         */
        JsonFloat.prototype.toFloat = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = 0.0; }
            return this._value;
        };
        JsonFloat.prototype.equals = function (value) {
            if ('number' === typeof (value)) {
                // int
                if (Math.round(value)) {
                    return false;
                }
                // float
                else {
                    return value == this._value;
                }
            }
            return false;
        };
        return JsonFloat;
    }(Value));
    Live2DCubismFramework.JsonFloat = JsonFloat;
    /**
     * パースしたJSONの要素を真偽値として扱う
     */
    var JsonBoolean = /** @class */ (function (_super) {
        __extends(JsonBoolean, _super);
        /**
         * 引数付きコンストラクタ
         */
        function JsonBoolean(v) {
            var _this = _super.call(this) || this;
            _this._boolValue = v;
            return _this;
        }
        /**
         * Valueの種類が真偽値ならtrue
         */
        JsonBoolean.prototype.isBool = function () {
            return true;
        };
        /**
         * 要素を真偽値で返す(boolean)
         */
        JsonBoolean.prototype.toBoolean = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = false; }
            return this._boolValue;
        };
        /**
         * 要素を文字列で返す(csmString型)
         */
        JsonBoolean.prototype.getString = function (defaultValue, indent) {
            this._stringBuffer = this._boolValue
                ? "true"
                : "false";
            return this._stringBuffer;
        };
        JsonBoolean.prototype.equals = function (value) {
            if ('boolean' === typeof (value)) {
                return value == this._boolValue;
            }
            return false;
        };
        /**
         * Valueの値が静的ならtrue, 静的なら解放しない
         */
        JsonBoolean.prototype.isStatic = function () {
            return true;
        };
        return JsonBoolean;
    }(Value));
    Live2DCubismFramework.JsonBoolean = JsonBoolean;
    /**
     * パースしたJSONの要素を文字列として扱う
     */
    var JsonString = /** @class */ (function (_super) {
        __extends(JsonString, _super);
        function JsonString(s) {
            var _this = _super.call(this) || this;
            if ('string' === typeof (s)) {
                _this._stringBuffer = s;
            }
            if (s instanceof csmString) {
                _this._stringBuffer = s.s;
            }
            return _this;
        }
        /**
         * Valueの種類が文字列ならtrue
         */
        JsonString.prototype.isString = function () {
            return true;
        };
        /**
         * 要素を文字列で返す(csmString型)
         */
        JsonString.prototype.getString = function (defaultValue, indent) {
            return this._stringBuffer;
        };
        JsonString.prototype.equals = function (value) {
            if ('string' === typeof (value)) {
                return this._stringBuffer == value;
            }
            if (value instanceof csmString) {
                return (this._stringBuffer == value.s);
            }
            return false;
        };
        return JsonString;
    }(Value));
    Live2DCubismFramework.JsonString = JsonString;
    /**
     * JSONパース時のエラー結果。文字列型のようにふるまう
     */
    var JsonError = /** @class */ (function (_super) {
        __extends(JsonError, _super);
        /**
         * 引数付きコンストラクタ
         */
        function JsonError(s, isStatic) {
            var _this = this;
            if ("string" === typeof (s)) {
                _this = _super.call(this, s) || this;
            }
            else {
                _this = _super.call(this, s) || this;
            }
            _this._isStatic = isStatic;
            return _this;
        }
        /**
         * Valueの値が静的ならtrue、静的なら解放しない
         */
        JsonError.prototype.isStatic = function () {
            return this._isStatic;
        };
        /**
         * エラー情報をセットする
         */
        JsonError.prototype.setErrorNotForClientCall = function (s) {
            this._stringBuffer = s;
            return this;
        };
        /**
         * Valueの種類がエラー値ならtrue
         */
        JsonError.prototype.isError = function () {
            return true;
        };
        return JsonError;
    }(JsonString));
    Live2DCubismFramework.JsonError = JsonError;
    /**
     * パースしたJSONの要素をNULL値として持つ
     */
    var JsonNullvalue = /** @class */ (function (_super) {
        __extends(JsonNullvalue, _super);
        /**
         * コンストラクタ
         */
        function JsonNullvalue() {
            var _this = _super.call(this) || this;
            _this._stringBuffer = "NullValue";
            return _this;
        }
        /**
         * Valueの種類がNULL値ならtrue
         */
        JsonNullvalue.prototype.isNull = function () {
            return true;
        };
        /**
         * 要素を文字列で返す(csmString型)
         */
        JsonNullvalue.prototype.getString = function (defaultValue, indent) {
            return this._stringBuffer;
        };
        /**
         * Valueの値が静的ならtrue, 静的なら解放しない
         */
        JsonNullvalue.prototype.isStatic = function () {
            return true;
        };
        return JsonNullvalue;
    }(Value));
    Live2DCubismFramework.JsonNullvalue = JsonNullvalue;
    /**
     * パースしたJSONの要素を配列として持つ
     */
    var JsonArray = /** @class */ (function (_super) {
        __extends(JsonArray, _super);
        /**
         * コンストラクタ
         */
        function JsonArray() {
            var _this = _super.call(this) || this;
            _this._array = new csmVector();
            return _this;
        }
        /**
         * デストラクタ相当の処理
         */
        JsonArray.prototype.release = function () {
            for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.preIncrement()) {
                var v = ite.ptr();
                if (v && !v.isStatic()) {
                    v = void 0;
                    v = null;
                }
            }
        };
        /**
         * Valueの種類が配列ならtrue
         */
        JsonArray.prototype.isArray = function () {
            return true;
        };
        /**
         * 要素を文字列で返す(csmString型)
         */
        JsonArray.prototype.getString = function (defaultValue, indent) {
            var stringBuffer = indent + "[\n";
            for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.increment()) {
                var v = ite.ptr();
                this._stringBuffer += indent + "" + v.getString(indent + " ") + "\n";
            }
            this._stringBuffer = stringBuffer + indent + "]\n";
            return this._stringBuffer;
        };
        /**
         * 配列要素を追加する
         * @param v 追加する要素
         */
        JsonArray.prototype.add = function (v) {
            this._array.pushBack(v);
        };
        /**
         * 要素をコンテナで返す(csmVector<Value>)
         */
        JsonArray.prototype.getVector = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = null; }
            return this._array;
        };
        /**
         * 要素の数を返す
         */
        JsonArray.prototype.getSize = function () {
            return this._array.getSize();
        };
        return JsonArray;
    }(Value));
    Live2DCubismFramework.JsonArray = JsonArray;
    /**
     * パースしたJSONの要素をマップとして持つ
     */
    var JsonMap = /** @class */ (function (_super) {
        __extends(JsonMap, _super);
        /**
         * コンストラクタ
         */
        function JsonMap() {
            var _this = _super.call(this) || this;
            //this._keys = new csmVector<string>();
            _this._map = new csmMap();
            return _this;
        }
        /**
         * デストラクタ相当の処理
         */
        JsonMap.prototype.release = function () {
            var ite = this._map.begin();
            while (ite.notEqual(this._map.end())) {
                var v = ite.ptr().second;
                if (v && !v.isStatic()) {
                    v = void 0;
                    v = null;
                }
                ite.preIncrement();
            }
        };
        /**
         * Valueの値がMap型ならtrue
         */
        JsonMap.prototype.isMap = function () {
            return true;
        };
        /**
         * 要素を文字列で返す(csmString型)
         */
        JsonMap.prototype.getString = function (defaultValue, indent) {
            this._stringBuffer = indent + "{\n";
            var ite = this._map.begin();
            while (ite.notEqual(this._map.end())) {
                var key = ite.ptr().first;
                var v = ite.ptr().second;
                this._stringBuffer += indent + " " + key + " : " + v.getString(indent + "   ") + " \n";
                ite.preIncrement();
            }
            this._stringBuffer += indent + "}\n";
            return this._stringBuffer;
        };
        /**
         * 要素をMap型で返す
         */
        JsonMap.prototype.getMap = function (defaultValue) {
            return this._map;
        };
        /**
         * Mapに要素を追加する
         */
        JsonMap.prototype.put = function (key, v) {
            this._map.setValue(key, v);
        };
        /**
         * Mapからキーのリストを取得する
         */
        JsonMap.prototype.getKeys = function () {
            if (!this._keys) {
                this._keys = new csmVector();
                var ite = this._map.begin();
                while (ite.notEqual(this._map.end())) {
                    var key = ite.ptr().first;
                    this._keys.pushBack(key);
                    ite.preIncrement();
                }
            }
            return this._keys;
        };
        /**
         * Mapの要素数を取得する
         */
        JsonMap.prototype.getSize = function () {
            return this._keys.getSize();
        };
        return JsonMap;
    }(Value));
    Live2DCubismFramework.JsonMap = JsonMap;
})(Live2DCubismFramework || (Live2DCubismFramework = {}));


/***/ }),

/***/ "./Samples/Sample_02/ts/class/AppCubismUserModel.ts":
/*!**********************************************************!*\
  !*** ./Samples/Sample_02/ts/class/AppCubismUserModel.ts ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Framework_model_cubismusermodel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Framework/model/cubismusermodel */ "./Framework/model/cubismusermodel.ts");
/* harmony import */ var _Framework_type_csmvector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Framework/type/csmvector */ "./Framework/type/csmvector.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var CubismUserModel = _Framework_model_cubismusermodel__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismUserModel;
// type

var csmVector = _Framework_type_csmvector__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].csmVector;
var AppCubismUserModel = /** @class */ (function (_super) {
    __extends(AppCubismUserModel, _super);
    function AppCubismUserModel() {
        var _this = _super.call(this) || this;
        _this.motions = new Map();
        _this.expressions = new Map();
        _this.lastUpdateTime = 0;
        return _this;
    }
    AppCubismUserModel.prototype.addMotion = function (motionResource) {
        var motion = this.loadMotion(motionResource.buffer, motionResource.buffer.byteLength, motionResource.motionName);
        if (!!motionResource.fadeInTime)
            motion.setFadeInTime(motionResource.fadeInTime);
        if (!!motionResource.fadeOutTime)
            motion.setFadeOutTime(motionResource.fadeOutTime);
        motion._eyeBlinkParameterIds = new csmVector();
        motion._lipSyncParameterIds = new csmVector();
        // 重複があったら削除
        if (this.motions.has(motionResource.motionName)) {
            this.motions.delete(motionResource.motionName);
        }
        this.motions.set(motionResource.motionName, motion);
    };
    AppCubismUserModel.prototype.addExpression = function (expressionResource) {
        var expression = this.loadExpression(expressionResource.buffer, expressionResource.buffer.byteLength, expressionResource.expressionName);
        if (this.expressions.has(expressionResource.expressionName)) {
            this.expressions.delete(expressionResource.expressionName);
        }
        this.expressions.set(expressionResource.expressionName, expression);
    };
    AppCubismUserModel.prototype.startMotion = function (motionName) {
        var motion = this.motions.get(motionName);
        if (motion === null || motion === undefined) {
            this._motionManager.stopAllMotions();
            return;
        }
        motion.setIsLoop(true);
        this._motionManager.startMotionPriority(motion, false, 2);
    };
    AppCubismUserModel.prototype.updateMotion = function (deltaTimeSeconds) {
        if (this._motionManager.isFinished())
            return;
        this._motionManager.updateMotion(this.getModel(), deltaTimeSeconds);
    };
    AppCubismUserModel.prototype.startExpression = function (expressionName) {
        var expression = this.expressions.get(expressionName);
        if (expression === null || expression === undefined) {
            this._expressionManager.stopAllMotions();
            return;
        }
        this._expressionManager.startMotionPriority(expression, false, 2);
    };
    AppCubismUserModel.prototype.updateExpression = function (deltaTimeSeconds) {
        if (this._expressionManager.isFinished())
            return;
        this._expressionManager.updateMotion(this.getModel(), deltaTimeSeconds);
    };
    AppCubismUserModel.prototype.update = function () {
        var currentTime = Date.now();
        var deltaTime = (currentTime - this.lastUpdateTime) / 1000;
        this.lastUpdateTime = currentTime;
        // モーション
        this.updateMotion(deltaTime);
        // 表情
        this.updateExpression(deltaTime);
        // ポーズ
        if (this._pose !== null)
            this._pose.updateParameters(this._model, deltaTime);
        this._model.update();
    };
    return AppCubismUserModel;
}(CubismUserModel));
/* harmony default export */ __webpack_exports__["default"] = (AppCubismUserModel);


/***/ }),

/***/ "./Samples/Sample_02/ts/class/AppCubismUserModelBuilder.ts":
/*!*****************************************************************!*\
  !*** ./Samples/Sample_02/ts/class/AppCubismUserModelBuilder.ts ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _AppCubismUserModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AppCubismUserModel */ "./Samples/Sample_02/ts/class/AppCubismUserModel.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var AppCubismUserModelBuilder = /** @class */ (function () {
    function AppCubismUserModelBuilder() {
        this.gl = null;
    }
    AppCubismUserModelBuilder.prototype.setGlContext = function (gl) {
        this.gl = gl;
        return this;
    };
    /**
     * ISampleResourceをもとにAppCubismUserModelのインスタンスを作成する
     * @param resource
     */
    AppCubismUserModelBuilder.prototype.fromSampleResourceAsync = function (resource) {
        return __awaiter(this, void 0, void 0, function () {
            var model;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        model = new _AppCubismUserModel__WEBPACK_IMPORTED_MODULE_0__["default"]();
                        // モデルデータをロード
                        model.loadModel(resource.moc3ArrayBuffer);
                        // モーションデータをロード
                        resource.motions.forEach(function (motionResource) {
                            return model.addMotion(motionResource);
                        });
                        // 表情のデータをロード
                        if (!!resource.expressions)
                            resource.expressions.forEach(function (expressionResource) {
                                return model.addExpression(expressionResource);
                            });
                        // 物理演算のデータをロード
                        if (!!resource.physics3ArrayBuffer)
                            model.loadPhysics(resource.physics3ArrayBuffer, resource.physics3ArrayBuffer.byteLength);
                        // ポーズデータをロード
                        if (resource.pose3ArrayBuffer !== null)
                            model.loadPose(resource.pose3ArrayBuffer, resource.pose3ArrayBuffer.byteLength);
                        // テクスチャを設定
                        return [4 /*yield*/, this.setUpTextureAsync(model, resource.texturePaths)];
                    case 1:
                        // テクスチャを設定
                        _a.sent();
                        return [2 /*return*/, model];
                }
            });
        });
    };
    /**
     * テクスチャを作成して、レンダラに設定する
     * @param model
     * @param paths
     */
    AppCubismUserModelBuilder.prototype.setUpTextureAsync = function (model, paths) {
        return __awaiter(this, void 0, void 0, function () {
            var textures, _i, paths_1, path, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this.gl === null)
                            return [2 /*return*/];
                        textures = [];
                        _i = 0, paths_1 = paths;
                        _c.label = 1;
                    case 1:
                        if (!(_i < paths_1.length)) return [3 /*break*/, 4];
                        path = paths_1[_i];
                        _b = (_a = textures).push;
                        return [4 /*yield*/, this.createAndBindTexture(path, this.gl)];
                    case 2:
                        _b.apply(_a, [_c.sent()]);
                        _c.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        // レンダラの作成（bindTextureより先にやっておく）
                        model.createRenderer();
                        // テクスチャをレンダラに設定
                        textures.forEach(function (texture, index) {
                            model.getRenderer()
                                .bindTexture(index, texture);
                        });
                        // そのほかレンダラの設定
                        model.getRenderer().setIsPremultipliedAlpha(false);
                        model.getRenderer().startUp(this.gl);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * WebGLTextureを作成して、バインドする
     * @param path
     * @param gl
     */
    AppCubismUserModelBuilder.prototype.createAndBindTexture = function (path, gl) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        // データのオンロードをトリガーにする
                        var img = new Image();
                        img.onload = function () {
                            // テクスチャオブジェクトの作成
                            var tex = gl.createTexture();
                            // テクスチャを選択
                            gl.bindTexture(gl.TEXTURE_2D, tex);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                            // 乗算済みアルファ方式を使用する
                            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
                            // テクスチャにピクセルを書き込む
                            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
                            // ミップマップを生成
                            gl.generateMipmap(gl.TEXTURE_2D);
                            return resolve(tex);
                        };
                        img.onerror = function (error) { return console.log("" + error); };
                        img.src = path;
                    })];
            });
        });
    };
    return AppCubismUserModelBuilder;
}());
/* harmony default export */ __webpack_exports__["default"] = (AppCubismUserModelBuilder);


/***/ }),

/***/ "./Samples/Sample_02/ts/class/SampleApplication.ts":
/*!*********************************************************!*\
  !*** ./Samples/Sample_02/ts/class/SampleApplication.ts ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Framework_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Framework/live2dcubismframework */ "./Framework/live2dcubismframework.ts");
/* harmony import */ var _Framework_math_cubismmatrix44__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Framework/math/cubismmatrix44 */ "./Framework/math/cubismmatrix44.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
// Framework

var CubismFramework = _Framework_live2dcubismframework__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismFramework;
// math

var CubismMatrix44 = _Framework_math_cubismmatrix44__WEBPACK_IMPORTED_MODULE_1__["Live2DCubismFramework"].CubismMatrix44;
var SampleApplication = /** @class */ (function () {
    function SampleApplication(canvas) {
        if (canvas === null) {
            this._canvas = document.createElement('canvas');
        }
        else {
            this._canvas = canvas;
        }
        this.viewport = [
            0,
            0,
            canvas.width,
            canvas.height
        ];
        this.model = null;
        this._gl = null;
        this.frameBuffer = null;
        this.requestId = 0;
        this.initGlContext();
        this.initCubismFramework();
    }
    Object.defineProperty(SampleApplication.prototype, "canvas", {
        get: function () {
            return this._canvas;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SampleApplication.prototype, "gl", {
        get: function () {
            return this._gl;
        },
        enumerable: true,
        configurable: true
    });
    SampleApplication.prototype.setModelAsync = function (model) {
        return __awaiter(this, void 0, void 0, function () {
            var modelMatrix, projectionMatrix, scale;
            return __generator(this, function (_a) {
                modelMatrix = model.getModelMatrix();
                projectionMatrix = new CubismMatrix44();
                scale = 4;
                // NOTE:
                // 1×1にしたモデルを、キャンバスの縦横比になるように引き延ばそうとする
                // 高さを調整してモデルを正しく表示するには、高さを canvas.width/canvas.height 倍する
                // 幅を調整してモデルを正しく表示するには、幅を canvas.height / canvas.width 倍する
                projectionMatrix.scale(1, this.canvas.width / this.canvas.height);
                // モデルが良い感じの大きさになるように拡大・縮小
                projectionMatrix.scaleRelative(scale, scale);
                projectionMatrix.multiplyByMatrix(modelMatrix);
                model.getRenderer().setMvpMatrix(projectionMatrix);
                this.model = model;
                return [2 /*return*/, this];
            });
        });
    };
    SampleApplication.prototype.run = function () {
        var _this = this;
        var draw = function () {
            if (_this.model === null)
                return;
            //  頂点の更新
            _this.model.update();
            // フレームバッファとビューポートを、フレームワーク設定
            _this.model.getRenderer().setRenderState(_this.frameBuffer, _this.viewport);
            // モデルの描画
            _this.model.getRenderer().drawModel();
            _this.requestId = requestAnimationFrame(draw);
        };
        this.requestId = requestAnimationFrame(draw);
    };
    /**
     * GLコンテキストの初期化
     */
    SampleApplication.prototype.initGlContext = function () {
        // WebGLコンテキストの初期化
        this._gl = this.canvas.getContext('webgl') ||
            this.canvas.getContext("experimental-webgl");
        if (this._gl === null) {
            alert("WebGL未対応のブラウザです。");
            return;
        }
        this._gl.enable(this._gl.BLEND);
        this._gl.blendFunc(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA);
        this._gl.clearColor(0.0, 0.0, 0.0, 0.0);
        this._gl.enable(this._gl.DEPTH_TEST);
        this._gl.depthFunc(this._gl.LEQUAL);
        this.frameBuffer = this._gl.getParameter(this._gl.FRAMEBUFFER_BINDING);
    };
    /**
     * CubismFramework
     */
    SampleApplication.prototype.initCubismFramework = function () {
        CubismFramework.startUp();
        CubismFramework.initialize();
    };
    return SampleApplication;
}());
/* harmony default export */ __webpack_exports__["default"] = (SampleApplication);


/***/ }),

/***/ "./Samples/Sample_02/ts/class/SampleResourceLoader.ts":
/*!************************************************************!*\
  !*** ./Samples/Sample_02/ts/class/SampleResourceLoader.ts ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Framework_cubismmodelsettingjson__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../Framework/cubismmodelsettingjson */ "./Framework/cubismmodelsettingjson.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};

var CubismModelSettingJson = _Framework_cubismmodelsettingjson__WEBPACK_IMPORTED_MODULE_0__["Live2DCubismFramework"].CubismModelSettingJson;
// import IMotionResource from '../interface/IMotionResource';
var SampleResourceLoader = /** @class */ (function () {
    function SampleResourceLoader() {
    }
    SampleResourceLoader.loadFromModel3JsonAsync = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var resource, dir, modelSetting, moc3ArrayBuffer, texturePaths, motions, expressions, physics3ArrayBuffer, pose3ArrayBuffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resource = {
                            moc3ArrayBuffer: null,
                            texturePaths: []
                        };
                        dir = path.split(/[\w]*.model3.json$/)[0];
                        return [4 /*yield*/, this.createCubismModelSettingJsonAsync(path)];
                    case 1:
                        modelSetting = _a.sent();
                        if (modelSetting === null)
                            return [2 /*return*/, null];
                        resource.cubismModelSetting = modelSetting;
                        return [4 /*yield*/, this.loadMoc3ArrayBufferFromModelSettingAsync(modelSetting, dir)];
                    case 2:
                        moc3ArrayBuffer = _a.sent();
                        if (moc3ArrayBuffer === null)
                            return [2 /*return*/, null];
                        resource.moc3ArrayBuffer = moc3ArrayBuffer;
                        texturePaths = this.getTexturePathsFromModelSetting(modelSetting, dir);
                        if (texturePaths.length === 0)
                            return [2 /*return*/, null];
                        resource.texturePaths = texturePaths;
                        return [4 /*yield*/, this.loadMotionsFromModelSettingAsync(modelSetting, dir)];
                    case 3:
                        motions = _a.sent();
                        resource.motions = motions;
                        return [4 /*yield*/, this.loadExpressionsFromModelSettingAsync(modelSetting, dir)];
                    case 4:
                        expressions = _a.sent();
                        resource.expressions = expressions;
                        return [4 /*yield*/, this.loadPhysics3ArrayBufferFromModelSettingAsync(modelSetting, dir)];
                    case 5:
                        physics3ArrayBuffer = _a.sent();
                        resource.physics3ArrayBuffer = physics3ArrayBuffer;
                        return [4 /*yield*/, this.loadPose3ArrayBufferFromModelSettingAsync(modelSetting, dir)];
                    case 6:
                        pose3ArrayBuffer = _a.sent();
                        resource.pose3ArrayBuffer = pose3ArrayBuffer;
                        return [2 /*return*/, resource];
                }
            });
        });
    };
    /**
     * CubismModelSettingJsonオブジェクトを作成
     * @param path
     */
    SampleResourceLoader.createCubismModelSettingJsonAsync = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var model3JsonArrayBuffer, modelSetting;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadAsArrayBufferAsync(path)
                            .catch(function (error) {
                            console.log(error);
                            return null;
                        })];
                    case 1:
                        model3JsonArrayBuffer = _a.sent();
                        if (model3JsonArrayBuffer === null)
                            return [2 /*return*/];
                        modelSetting = new CubismModelSettingJson(model3JsonArrayBuffer, model3JsonArrayBuffer.byteLength);
                        return [2 /*return*/, modelSetting];
                }
            });
        });
    };
    /**
     * モデルデータをArrayBufferとして返す
     * @param setting
     * @param dir
     */
    SampleResourceLoader.loadMoc3ArrayBufferFromModelSettingAsync = function (setting, dir) {
        if (dir === void 0) { dir = "./"; }
        return __awaiter(this, void 0, void 0, function () {
            var moc3FilePath, moc3ArrayBuffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (setting.getModelFileName() === '')
                            return [2 /*return*/, null];
                        moc3FilePath = "" + dir + setting.getModelFileName();
                        return [4 /*yield*/, this.loadAsArrayBufferAsync("" + moc3FilePath)
                                .catch(function (error) {
                                console.log(error);
                                return null;
                            })];
                    case 1:
                        moc3ArrayBuffer = _a.sent();
                        if (moc3ArrayBuffer === null)
                            return [2 /*return*/];
                        return [2 /*return*/, moc3ArrayBuffer];
                }
            });
        });
    };
    /**
     * テクスチャのパスを配列にして返す
     * @param setting
     * @param dir
     */
    SampleResourceLoader.getTexturePathsFromModelSetting = function (setting, dir) {
        if (dir === void 0) { dir = "./"; }
        var texturePaths = [];
        var textureCount = setting.getTextureCount();
        for (var i = 0; i < textureCount; i++) {
            texturePaths.push("" + dir + setting.getTextureFileName(i));
        }
        return texturePaths;
    };
    /**
     * モーションのデータをIMotionResourceの配列にして返す
     * @param setting
     * @param dir
     */
    SampleResourceLoader.loadMotionsFromModelSettingAsync = function (setting, dir) {
        if (dir === void 0) { dir = "./"; }
        return __awaiter(this, void 0, void 0, function () {
            var motionResources, motionGroupCount, i, groupName, motionCount, j, motionFilePath, buffer, fadeInTime, fadeOutTime;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        motionResources = [];
                        motionGroupCount = setting.getMotionGroupCount();
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < motionGroupCount)) return [3 /*break*/, 6];
                        groupName = setting.getMotionGroupName(i);
                        motionCount = setting.getMotionCount(groupName);
                        j = 0;
                        _a.label = 2;
                    case 2:
                        if (!(j < motionCount)) return [3 /*break*/, 5];
                        if (setting.getMotionFileName(groupName, j) === '')
                            return [3 /*break*/, 4];
                        motionFilePath = "" + dir + setting.getMotionFileName(groupName, j);
                        return [4 /*yield*/, this.loadAsArrayBufferAsync(motionFilePath)
                                .catch(function (error) {
                                console.log(error);
                                return null;
                            })];
                    case 3:
                        buffer = _a.sent();
                        fadeInTime = setting.getMotionFadeInTimeValue(groupName, j);
                        fadeOutTime = setting.getMotionFadeOutTimeValue(groupName, j);
                        motionResources.push({
                            motionName: motionFilePath,
                            buffer: buffer,
                            fadeInTime: fadeInTime,
                            fadeOutTime: fadeOutTime
                        });
                        _a.label = 4;
                    case 4:
                        j++;
                        return [3 /*break*/, 2];
                    case 5:
                        i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/, motionResources];
                }
            });
        });
    };
    /**
     * 表情のデータをIExpressionResourceの配列にして返す
     * @param setting
     * @param dir
     */
    SampleResourceLoader.loadExpressionsFromModelSettingAsync = function (setting, dir) {
        if (dir === void 0) { dir = "./"; }
        return __awaiter(this, void 0, void 0, function () {
            var expressionResources, expCount, i, expressionPath, buffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expressionResources = [];
                        expCount = setting.getExpressionCount();
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < expCount)) return [3 /*break*/, 4];
                        if (setting.getExpressionFileName(i) === '')
                            return [3 /*break*/, 3];
                        expressionPath = "" + dir + setting.getExpressionFileName(i);
                        return [4 /*yield*/, this.loadAsArrayBufferAsync(expressionPath)
                                .catch(function (error) {
                                console.log(error);
                                return null;
                            })];
                    case 2:
                        buffer = _a.sent();
                        expressionResources.push({
                            expressionName: setting.getExpressionName(i),
                            buffer: buffer
                        });
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, expressionResources];
                }
            });
        });
    };
    SampleResourceLoader.loadPhysics3ArrayBufferFromModelSettingAsync = function (setting, dir) {
        if (dir === void 0) { dir = "./"; }
        return __awaiter(this, void 0, void 0, function () {
            var physics3FilePath, physics3ArrayBuffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (setting.getPhysicsFileName() === '')
                            return [2 /*return*/, null];
                        physics3FilePath = "" + dir + setting.getPhysicsFileName();
                        return [4 /*yield*/, this.loadAsArrayBufferAsync("" + physics3FilePath)
                                .catch(function (error) {
                                console.log(error);
                                return null;
                            })];
                    case 1:
                        physics3ArrayBuffer = _a.sent();
                        if (physics3ArrayBuffer === null)
                            return [2 /*return*/, null];
                        return [2 /*return*/, physics3ArrayBuffer];
                }
            });
        });
    };
    /**
     * ポーズデータをArrayBufferとして返す
     * @param setting
     * @param dir
     */
    SampleResourceLoader.loadPose3ArrayBufferFromModelSettingAsync = function (setting, dir) {
        if (dir === void 0) { dir = "./"; }
        return __awaiter(this, void 0, void 0, function () {
            var pose3FilePath, pose3ArrayBuffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pose3FilePath = "" + dir + setting.getPoseFileName();
                        return [4 /*yield*/, this.loadAsArrayBufferAsync("" + pose3FilePath)
                                .catch(function (error) {
                                console.log(error);
                                return null;
                            })];
                    case 1:
                        pose3ArrayBuffer = _a.sent();
                        return [2 /*return*/, pose3ArrayBuffer];
                }
            });
        });
    };
    /**
     * ファイルを読み込んで、ArrayBufferとして返す
     * @param path
     */
    SampleResourceLoader.loadAsArrayBufferAsync = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var response, buffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch(path)
                            .catch(function (error) {
                            throw new Error("Network error: " + error);
                        })];
                    case 1:
                        response = _a.sent();
                        if (!response.ok) {
                            throw new Error("Failed to get \"" + path + "\".");
                        }
                        return [4 /*yield*/, response.arrayBuffer()
                                .catch(function () {
                                throw new Error("Failed to load \"" + path + "\" as ArrayBuffer.");
                            })];
                    case 2:
                        buffer = _a.sent();
                        return [2 /*return*/, buffer];
                }
            });
        });
    };
    return SampleResourceLoader;
}());
/* harmony default export */ __webpack_exports__["default"] = (SampleResourceLoader);


/***/ }),

/***/ "./Samples/Sample_02/ts/main.ts":
/*!**************************************!*\
  !*** ./Samples/Sample_02/ts/main.ts ***!
  \**************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _class_SampleResourceLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./class/SampleResourceLoader */ "./Samples/Sample_02/ts/class/SampleResourceLoader.ts");
/* harmony import */ var _class_SampleApplication__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./class/SampleApplication */ "./Samples/Sample_02/ts/class/SampleApplication.ts");
/* harmony import */ var _class_AppCubismUserModelBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./class/AppCubismUserModelBuilder */ "./Samples/Sample_02/ts/class/AppCubismUserModelBuilder.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = undefined;



document.addEventListener('DOMContentLoaded', function () { return __awaiter(_this, void 0, void 0, function () {
    var resourcesDir, canvas, resource, sampleApp, model, motionSelector, optionNoMotion, expressionSelector, optionNoExpression;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                resourcesDir = '../../Resources/Haru/';
                canvas = document.getElementById('canvas');
                return [4 /*yield*/, _class_SampleResourceLoader__WEBPACK_IMPORTED_MODULE_0__["default"]
                        .loadFromModel3JsonAsync(resourcesDir + "Haru.model3.json")];
            case 1:
                resource = _a.sent();
                sampleApp = new _class_SampleApplication__WEBPACK_IMPORTED_MODULE_1__["default"](canvas);
                return [4 /*yield*/, new _class_AppCubismUserModelBuilder__WEBPACK_IMPORTED_MODULE_2__["default"]()
                        .setGlContext(sampleApp.gl)
                        .fromSampleResourceAsync(resource)];
            case 2:
                model = _a.sent();
                return [4 /*yield*/, sampleApp.setModelAsync(model)];
            case 3:
                _a.sent();
                sampleApp.run();
                motionSelector = document.getElementById('motionSelector');
                if (!!motionSelector) {
                    motionSelector.innerHTML = '';
                    optionNoMotion = document.createElement('option');
                    optionNoMotion.value = '';
                    optionNoMotion.text = '--';
                    motionSelector.appendChild(optionNoMotion);
                    resource.motions.forEach(function (motionResource) {
                        var option = document.createElement('option');
                        option.value = motionResource.motionName;
                        option.text = motionResource.motionName;
                        motionSelector.appendChild(option);
                    });
                    motionSelector.addEventListener('change', function () {
                        model.startMotion(motionSelector.value);
                    });
                }
                expressionSelector = document.getElementById('expressionSelector');
                if (!!expressionSelector) {
                    expressionSelector.innerHTML = '';
                    optionNoExpression = document.createElement('option');
                    optionNoExpression.value = '';
                    optionNoExpression.text = '--';
                    expressionSelector.appendChild(optionNoExpression);
                    resource.expressions.forEach(function (expressionResource) {
                        var option = document.createElement('option');
                        option.value = expressionResource.expressionName;
                        option.text = expressionResource.expressionName;
                        expressionSelector.appendChild(option);
                    });
                    expressionSelector.addEventListener('change', function () {
                        model.startExpression(expressionSelector.value);
                    });
                }
                return [2 /*return*/];
        }
    });
}); });


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL2N1YmlzbWZyYW1ld29ya2NvbmZpZy50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvY3ViaXNtbW9kZWxzZXR0aW5nanNvbi50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvZWZmZWN0L2N1YmlzbWJyZWF0aC50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvZWZmZWN0L2N1YmlzbWV5ZWJsaW5rLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9lZmZlY3QvY3ViaXNtcG9zZS50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvaWN1YmlzbW1vZGVsc2V0dGluZy50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvaWQvY3ViaXNtaWQudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL2lkL2N1YmlzbWlkbWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvbGl2ZTJkY3ViaXNtZnJhbWV3b3JrLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9tYXRoL2N1YmlzbW1hdGgudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL21hdGgvY3ViaXNtbWF0cml4NDQudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL21hdGgvY3ViaXNtbW9kZWxtYXRyaXgudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL21hdGgvY3ViaXNtdGFyZ2V0cG9pbnQudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL21hdGgvY3ViaXNtdmVjdG9yMi50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvbW9kZWwvY3ViaXNtbW9jLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9tb2RlbC9jdWJpc21tb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvbW9kZWwvY3ViaXNtbW9kZWx1c2VyZGF0YS50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvbW9kZWwvY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24udHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL21vZGVsL2N1YmlzbXVzZXJtb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvbW90aW9uL2FjdWJpc21tb3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL21vdGlvbi9jdWJpc21leHByZXNzaW9ubW90aW9uLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9tb3Rpb24vY3ViaXNtbW90aW9uLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9tb3Rpb24vY3ViaXNtbW90aW9uaW50ZXJuYWwudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL21vdGlvbi9jdWJpc21tb3Rpb25qc29uLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay9tb3Rpb24vY3ViaXNtbW90aW9ubWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvbW90aW9uL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnkudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3BoeXNpY3MvY3ViaXNtcGh5c2ljcy50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvcGh5c2ljcy9jdWJpc21waHlzaWNzaW50ZXJuYWwudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3BoeXNpY3MvY3ViaXNtcGh5c2ljc2pzb24udHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlci50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyX1dlYkdMLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay90eXBlL2NzbW1hcC50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvdHlwZS9jc21yZWN0Zi50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvdHlwZS9jc21zdHJpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vRnJhbWV3b3JrL3R5cGUvY3NtdmVjdG9yLnRzIiwid2VicGFjazovLy8uL0ZyYW1ld29yay91dGlscy9jdWJpc21kZWJ1Zy50cyIsIndlYnBhY2s6Ly8vLi9GcmFtZXdvcmsvdXRpbHMvY3ViaXNtanNvbi50cyIsIndlYnBhY2s6Ly8vLi9TYW1wbGVzL1NhbXBsZV8wMi90cy9jbGFzcy9BcHBDdWJpc21Vc2VyTW9kZWwudHMiLCJ3ZWJwYWNrOi8vLy4vU2FtcGxlcy9TYW1wbGVfMDIvdHMvY2xhc3MvQXBwQ3ViaXNtVXNlck1vZGVsQnVpbGRlci50cyIsIndlYnBhY2s6Ly8vLi9TYW1wbGVzL1NhbXBsZV8wMi90cy9jbGFzcy9TYW1wbGVBcHBsaWNhdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9TYW1wbGVzL1NhbXBsZV8wMi90cy9jbGFzcy9TYW1wbGVSZXNvdXJjZUxvYWRlci50cyIsIndlYnBhY2s6Ly8vLi9TYW1wbGVzL1NhbXBsZV8wMi90cy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUEwQyxnQ0FBZ0M7QUFDMUU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnRUFBd0Qsa0JBQWtCO0FBQzFFO0FBQ0EseURBQWlELGNBQWM7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUF5QyxpQ0FBaUM7QUFDMUUsd0hBQWdILG1CQUFtQixFQUFFO0FBQ3JJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FB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QUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDM0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNsSCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUN6RixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUN6RixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RGLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDdEYsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBRTlDLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNsRCxJQUFJLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDdkgsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBRXBELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSwyQkFBMkIsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ2xGO1lBRUQsT0FBTyxHQUFHLENBQUM7UUFDZixDQUFDO1FBRUQ7OztXQUdHO1FBQ0ksMkNBQUssR0FBWixVQUFhLEVBQXlCO1lBRWxDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLENBQUM7UUFFRDs7OztXQUlHO1FBQ0ksZ0VBQTBCLEdBQWpDLFVBQWtDLEtBQWtCLEVBQUUsZUFBc0M7WUFFeEYsbUNBQW1DO1lBQ25DLElBQUksb0JBQW9CLEdBQVcsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUNwRCxJQUFJLG9CQUFvQixHQUFXLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDcEQsSUFBSSxvQkFBb0IsR0FBVyxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQ3BELElBQUksb0JBQW9CLEdBQVcsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUVwRCxtQkFBbUI7WUFDbkIscURBQXFEO1lBQ3JELElBQU0sZ0JBQWdCLEdBQVcsZUFBZSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQztZQUVsRixLQUFJLElBQUksb0JBQW9CLEdBQVcsQ0FBQyxFQUFFLG9CQUFvQixHQUFHLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLEVBQ3pHO2dCQUNJLCtCQUErQjtnQkFDL0IsSUFBTSxhQUFhLEdBQVcsZUFBZSxDQUFDLHlCQUF5QixDQUFDLG9CQUFvQixDQUFDLENBQUM7Z0JBRTlGLElBQU0sbUJBQW1CLEdBQVcsS0FBSyxDQUFDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUNoRixJQUFJLGdCQUFnQixHQUFpQixLQUFLLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBRTlFLElBQUksSUFBSSxHQUFXLE1BQU0sQ0FBQyxTQUFTLENBQUM7Z0JBQ3BDLElBQUksSUFBSSxHQUFXLE1BQU0sQ0FBQyxTQUFTLENBQUM7Z0JBQ3BDLElBQUksSUFBSSxHQUFXLE1BQU0sQ0FBQyxTQUFTLENBQUM7Z0JBQ3BDLElBQUksSUFBSSxHQUFXLE1BQU0sQ0FBQyxTQUFTLENBQUM7Z0JBRXBDLElBQUksSUFBSSxHQUFXLG1CQUFtQixHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7Z0JBQzdELEtBQUksSUFBSSxFQUFFLEdBQVcsUUFBUSxDQUFDLFlBQVksRUFBRSxFQUFFLEdBQUcsSUFBSSxFQUFFLEVBQUUsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUNoRjtvQkFDSSxJQUFJLENBQUMsR0FBVyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDckMsSUFBSSxDQUFDLEdBQVcsZ0JBQWdCLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUV6QyxJQUFHLENBQUMsR0FBRyxJQUFJLEVBQ1g7d0JBQ0ksSUFBSSxHQUFHLENBQUMsQ0FBQztxQkFDWjtvQkFDRCxJQUFHLENBQUMsR0FBRyxJQUFJLEVBQ1g7d0JBQ0ksSUFBSSxHQUFHLENBQUMsQ0FBQztxQkFDWjtvQkFDRCxJQUFHLENBQUMsR0FBRyxJQUFJLEVBQ1g7d0JBQ0ksSUFBSSxHQUFHLENBQUMsQ0FBQztxQkFDWjtvQkFDRCxJQUFHLENBQUMsR0FBRyxJQUFJLEVBQ1g7d0JBQ0ksSUFBSSxHQUFHLENBQUMsQ0FBQztxQkFDWjtpQkFDSjtnQkFFRCx1QkFBdUI7Z0JBQ3ZCLElBQUcsSUFBSSxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQzNCO29CQUNJLFNBQVM7aUJBQ1o7Z0JBRUQsV0FBVztnQkFDWCxJQUFHLElBQUksR0FBRyxvQkFBb0IsRUFDOUI7b0JBQ0ksb0JBQW9CLEdBQUcsSUFBSSxDQUFDO2lCQUMvQjtnQkFDRCxJQUFHLElBQUksR0FBRyxvQkFBb0IsRUFDOUI7b0JBQ0ksb0JBQW9CLEdBQUcsSUFBSSxDQUFDO2lCQUMvQjtnQkFDRCxJQUFHLElBQUksR0FBRyxvQkFBb0IsRUFDOUI7b0JBQ0ksb0JBQW9CLEdBQUcsSUFBSSxDQUFDO2lCQUMvQjtnQkFDRCxJQUFHLElBQUksR0FBRyxvQkFBb0IsRUFDOUI7b0JBQ0ksb0JBQW9CLEdBQUcsSUFBSSxDQUFDO2lCQUMvQjtnQkFFRCxJQUFHLG9CQUFvQixJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQzNDO29CQUNJLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO29CQUM1QyxlQUFlLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztvQkFDNUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7b0JBQ2hELGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO29CQUNqRCxlQUFlLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztpQkFDcEM7cUJBRUQ7b0JBQ0ksZUFBZSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7b0JBQ2hDLElBQUksQ0FBQyxHQUFXLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO29CQUM1RCxJQUFJLENBQUMsR0FBVyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztvQkFDNUQsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMsR0FBRyxvQkFBb0IsQ0FBQztvQkFDN0QsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUMsR0FBRyxvQkFBb0IsQ0FBQztvQkFDN0QsZUFBZSxDQUFDLG1CQUFtQixDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7b0JBQzlDLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2lCQUNsRDthQUVKO1FBQ0wsQ0FBQztRQWlERDs7V0FFRztRQUNJLDZDQUFPLEdBQWQ7WUFFSSxLQUFJLElBQUksQ0FBQyxHQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxFQUMxRTtnQkFDSSxJQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ3pDO29CQUNJLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7b0JBQ2pELElBQUksQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7aUJBQ25EO2dCQUNELElBQUksQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ2pEO1lBQ0QsSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQztZQUV4QyxpR0FBaUc7WUFDakcsS0FBSSxJQUFJLENBQUMsR0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFDMUU7Z0JBQ0ksSUFBSSxDQUFDLDJCQUEyQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDakQ7WUFDRCxJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDO1lBRXhDLElBQUcsSUFBSSxDQUFDLFlBQVksRUFDcEI7Z0JBQ0ksSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNyRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQzthQUM1QjtZQUVELEtBQUksSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxFQUM3RDtnQkFDSSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDcEM7WUFFRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztZQUUzQixVQUFVO1lBQ1YsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQzdCLENBQUM7UUFFRDs7Ozs7OztXQU9HO1FBQ0ksZ0RBQVUsR0FBakIsVUFBa0IsS0FBa0IsRUFBRSxhQUFxQixFQUFFLGFBQTJCLEVBQUUsa0JBQThCO1lBRXBILCtCQUErQjtZQUMvQixnQ0FBZ0M7WUFDaEMsS0FBSSxJQUFJLENBQUMsR0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsRUFBRSxDQUFDLEVBQUUsRUFDN0M7Z0JBQ0ksSUFBRyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQzdCO29CQUNJLHdDQUF3QztvQkFDeEMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDaEQsU0FBUztpQkFDWjtnQkFFRCw0QkFBNEI7Z0JBQzVCLElBQUksZUFBZSxHQUEwQixJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4RyxJQUFHLGVBQWUsSUFBSSxJQUFJLEVBQzFCO29CQUNJLHdCQUF3QjtvQkFDeEIsZUFBZSxHQUFHLElBQUkscUJBQXFCLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMzRixJQUFJLENBQUMsMkJBQTJCLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2lCQUM5RDtnQkFFRCxlQUFlLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRXRDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7YUFDOUQ7UUFDTCxDQUFDO1FBRUQ7Ozs7V0FJRztRQUNJLDBEQUFvQixHQUEzQixVQUE0QixLQUFrQixFQUFFLFFBQThCO1lBRTFFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUV2QixpQkFBaUI7WUFDakIsMENBQTBDO1lBQzFDLElBQUksY0FBYyxHQUFXLENBQUMsQ0FBQztZQUMvQixLQUFJLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUMxRjtnQkFDSSxtQkFBbUI7Z0JBQ25CLElBQUksRUFBRSxHQUEwQixJQUFJLENBQUMsMkJBQTJCLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUUvRSxpQ0FBaUM7Z0JBQ2pDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBRTNDLElBQUcsRUFBRSxDQUFDLFFBQVEsRUFDZDtvQkFDSSxjQUFjLEVBQUUsQ0FBQyxDQUFDLGFBQWE7aUJBQ2xDO2FBQ0o7WUFFRCxVQUFVO1lBQ1YsSUFBRyxjQUFjLEdBQUcsQ0FBQyxFQUNyQjtnQkFDSSxrQ0FBa0M7Z0JBQ2xDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2dCQUVuRixnQkFBZ0I7Z0JBQ2hCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztnQkFFdEQsMkNBQTJDO2dCQUMzQyxJQUFJLGFBQWEsR0FBbUIsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUU1RCxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxhQUFhO2dCQUVqQyxvQkFBb0I7Z0JBQ3BCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFFdkMsZ0NBQWdDO2dCQUNoQywrQkFBK0I7Z0JBQy9CLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2dCQUV0RSxZQUFZO2dCQUNaLDhFQUE4RTtnQkFDOUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ3ZDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFFeEMsY0FBYztnQkFDZCxrRUFBa0U7Z0JBQ2xFLEtBQUksSUFBSSxTQUFTLEdBQVcsQ0FBQyxFQUFFLFNBQVMsR0FBRyxJQUFJLENBQUMsMkJBQTJCLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQ2xHO29CQUNJLHVCQUF1QjtvQkFDdkIsSUFBSSxXQUFXLEdBQTBCLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQ3hGLElBQUksaUJBQWlCLEdBQVksV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUcsbUNBQW1DO29CQUN2RyxJQUFJLG1CQUFtQixHQUFZLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxjQUFjO29CQUU1RSwwQkFBMEI7b0JBQzFCLElBQU0sTUFBTSxHQUFXLElBQUksQ0FBQztvQkFDNUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO29CQUNsRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQUssR0FBRyxNQUFNLEVBQUUsaUJBQWlCLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO29CQUNuRyw0Q0FBNEM7b0JBRTVDLGtDQUFrQztvQkFDbEMsb0pBQW9KO29CQUNwSixJQUFNLE1BQU0sR0FBVyxtQkFBbUIsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQztvQkFDaEYsSUFBTSxNQUFNLEdBQVcsbUJBQW1CLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7b0JBRWxGLGtCQUFrQjtvQkFDbEI7d0JBQ0ksZ0VBQWdFO3dCQUNoRSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO3dCQUMvQjs0QkFDSSx3QkFBd0I7NEJBQ3hCLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQzs0QkFDOUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO3lCQUMzQzt3QkFDRDs0QkFDSSxxQkFBcUI7NEJBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxFQUFFLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUNoRixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBRSwyQkFBMkI7NEJBQzNFLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUN4RixzQ0FBc0M7eUJBQ3pDO3dCQUNELHdCQUF3Qjt3QkFDeEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7cUJBQ2hFO29CQUVELGdDQUFnQztvQkFDaEM7d0JBQ0ksZ0VBQWdFO3dCQUNoRSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO3dCQUMvQjs0QkFDSSxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDaEYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUUsMkJBQTJCOzRCQUMzRSxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDeEYsc0NBQXNDO3lCQUN6Qzt3QkFDRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztxQkFDaEU7b0JBQ0QsV0FBVyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7b0JBQ3hFLFdBQVcsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO29CQUV4RSxJQUFNLGFBQWEsR0FBVyxXQUFXLENBQUMsZ0JBQWdCLENBQUM7b0JBQzNELEtBQUksSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLEVBQUUsQ0FBQyxFQUFFLEVBQzdDO3dCQUNJLElBQU0sYUFBYSxHQUFXLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBRTdELGlDQUFpQzt3QkFDakMsSUFBRyxDQUFDLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxhQUFhLENBQUMsRUFDdkU7NEJBQ0ksU0FBUzt5QkFDWjt3QkFFRCxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQzt3QkFFeEUsaUJBQWlCO3dCQUNqQiw0QkFBNEI7d0JBQzVCLFFBQVEsQ0FBQywrQkFBK0IsQ0FBQyxXQUFXLENBQUMsQ0FBQzt3QkFDdEQsUUFBUSxDQUFDLFFBQVEsQ0FDYixLQUFLLENBQUMseUJBQXlCLENBQUMsYUFBYSxDQUFDLEVBQzlDLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxhQUFhLENBQUMsRUFDaEQsS0FBSyxDQUFDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxFQUMzQyxLQUFLLENBQUMsd0JBQXdCLENBQUMsYUFBYSxDQUFDLEVBQzdDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsRUFDeEMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxFQUN6QyxLQUFLLENBQUMsa0JBQWtCLENBQUMsYUFBYSxDQUFDLEVBQ3ZDLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBRyxpQkFBaUI7eUJBQzdELENBQUM7cUJBQ0w7aUJBQ0o7Z0JBRUQsY0FBYztnQkFDZCxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFHLFVBQVU7Z0JBQ2pFLFFBQVEsQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFL0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDaEY7UUFDTCxDQUFDO1FBRUQ7Ozs7Ozs7V0FPRztRQUNJLGtEQUFZLEdBQW5CLFVBQW9CLGFBQXlCLEVBQUUsa0JBQTBCO1lBRXJFLDhCQUE4QjtZQUM5QixLQUFJLElBQUksQ0FBQyxHQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxFQUMxRTtnQkFDSSxJQUFJLGVBQWUsR0FBMEIsSUFBSSxDQUFDLDJCQUEyQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEYsSUFBTSxLQUFLLEdBQVcsZUFBZSxDQUFDLGdCQUFnQixDQUFDO2dCQUV2RCxhQUFhO2dCQUNiLElBQUcsS0FBSyxJQUFJLGtCQUFrQixFQUM5QjtvQkFDSSxTQUFTO2lCQUNaO2dCQUVELElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztnQkFFbEIsNkNBQTZDO2dCQUM3QyxLQUFJLElBQUksQ0FBQyxHQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUNyQztvQkFDSSxJQUFNLE1BQU0sR0FBVyxlQUFlLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUUxRCxLQUFJLElBQUksQ0FBQyxHQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUNyQzt3QkFDSSxJQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLEVBQzdCOzRCQUNJLFNBQVMsRUFBRSxDQUFDOzRCQUNaLE1BQU07eUJBQ1Q7cUJBQ0o7aUJBQ0o7Z0JBRUQsSUFBRyxTQUFTLElBQUksS0FBSyxFQUNyQjtvQkFDSSxPQUFPLGVBQWUsQ0FBQztpQkFDMUI7YUFDSjtZQUVELE9BQU8sSUFBSSxDQUFDLENBQUMsV0FBVztRQUM1QixDQUFDO1FBRUQ7Ozs7OztXQU1HO1FBQ0ksdURBQWlCLEdBQXhCLFVBQXlCLGNBQXNCO1lBRTNDLDBDQUEwQztZQUMxQyxrRUFBa0U7WUFFbEUsZ0JBQWdCO1lBQ2hCLElBQUksR0FBRyxHQUFXLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLG9CQUFvQjtZQUMxRSxJQUFJLEdBQUcsR0FBVyxjQUFjLEdBQUcsaUJBQWlCLENBQUMsQ0FBQywyQkFBMkI7WUFFakYsWUFBWTtZQUNaLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQ1osR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFFWiw0Q0FBNEM7WUFDNUMsSUFBSSxZQUFZLEdBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWTtZQUUxQyxLQUFJLElBQUksU0FBUyxHQUFXLENBQUMsRUFBRSxTQUFTLEdBQUcsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEVBQ3pFO2dCQUNJLG1CQUFtQjtnQkFDbkIsSUFBSSxXQUFXLEdBQVcsR0FBRyxHQUFHLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFMUQsWUFBWTtnQkFDWixJQUFHLFdBQVcsSUFBSSxDQUFDLEVBQ25CO29CQUNJLFFBQVE7aUJBQ1g7cUJBQ0ksSUFBRyxXQUFXLElBQUksQ0FBQyxFQUN4QjtvQkFDSSxZQUFZO29CQUNaLElBQUksV0FBVyxHQUEwQixJQUFJLENBQUMsMkJBQTJCLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7b0JBQzdGLFdBQVcsQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7b0JBQ3pDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztvQkFDbEMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO29CQUNsQyxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7b0JBQ3RDLFdBQVcsQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztpQkFDMUM7cUJBQ0ksSUFBRyxXQUFXLElBQUksQ0FBQyxFQUN4QjtvQkFDSSxLQUFJLElBQUksQ0FBQyxHQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUMzQzt3QkFDSSxJQUFJLElBQUksR0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUV6QixZQUFZO3dCQUNaLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO3dCQUVkLElBQUksRUFBRSxHQUEwQixJQUFJLENBQUMsMkJBQTJCLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7d0JBQ3BGLEVBQUUsQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7d0JBRWhDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUM7d0JBQ2hDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQzt3QkFDekIsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO3dCQUM3QixFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7d0JBQzlCLGVBQWU7cUJBQ2xCO2lCQUNKO3FCQUNJLElBQUcsV0FBVyxJQUFJLENBQUMsRUFDeEI7b0JBQ0ksVUFBVTtvQkFDVixLQUFJLElBQUksQ0FBQyxHQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUMzQzt3QkFDSSxJQUFJLElBQUksR0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUN6QixJQUFJLElBQUksR0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUV6QixZQUFZO3dCQUNaLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO3dCQUNkLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO3dCQUVkLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQzt3QkFDN0QsRUFBRSxDQUFDLGdCQUFnQixHQUFHLFNBQVMsQ0FBQzt3QkFFaEMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQzt3QkFDaEMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQzt3QkFDaEMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO3dCQUM3QixFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7cUJBQ2pDO2lCQUNKO3FCQUNJLElBQUcsV0FBVyxJQUFJLENBQUMsRUFDeEI7b0JBQ0ksVUFBVTtvQkFDVixLQUFJLElBQUksQ0FBQyxHQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxFQUFFLENBQUMsRUFBRSxFQUMzQzt3QkFDSSxJQUFJLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNqQixJQUFJLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUVqQixZQUFZO3dCQUNaLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO3dCQUNkLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO3dCQUVkLElBQUksRUFBRSxHQUEwQixJQUFJLENBQUMsMkJBQTJCLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7d0JBQ3BGLEVBQUUsQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7d0JBRWhDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUM7d0JBQ2hDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUM7d0JBQ2hDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7d0JBQ25DLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7cUJBQ3ZDO2lCQUNKO3FCQUVEO29CQUNJLHlFQUFjLENBQUMsZ0NBQWdDLEVBQUUsV0FBVyxDQUFDLENBQUM7aUJBQ2pFO2FBQ0o7UUFFTCxDQUFDO1FBRUQ7OztXQUdHO1FBQ0ksb0RBQWMsR0FBckI7WUFFSSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDN0IsQ0FBQztRQUVEOzs7V0FHRztRQUNJLG1FQUE2QixHQUFwQztZQUVJLE9BQU8sSUFBSSxDQUFDLDJCQUEyQixDQUFDO1FBQzVDLENBQUM7UUFFRDs7O1dBR0c7UUFDSSwrREFBeUIsR0FBaEMsVUFBaUMsSUFBWTtZQUV6QyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDO1FBQ3hDLENBQUM7UUFFRDs7O1dBR0c7UUFDSSwrREFBeUIsR0FBaEM7WUFFSSxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztRQUN4QyxDQUFDO1FBa0JMLGtDQUFDO0lBQUQsQ0FBQztJQXBvQlksaURBQTJCLDhCQW9vQnZDO0lBRUQ7OztPQUdHO0lBQ0g7UUFFSTs7OztXQUlHO1FBQ0gscUNBQW1CLE9BQWUsRUFBRSxPQUF5QjtZQUV6RCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUMzQixDQUFDO1FBSUwsa0NBQUM7SUFBRCxDQUFDO0lBZlksaURBQTJCLDhCQWV2QztJQUVEOztPQUVHO0lBQ0g7UUFFSTs7V0FFRztRQUNILCtCQUFtQixPQUFvQyxFQUFFLHVCQUFtQyxFQUFFLFNBQWlCO1lBRTNHLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO1lBRXRCLHFDQUFxQztZQUNyQyxJQUFJLENBQUMsZUFBZSxHQUFHLHVCQUF1QixDQUFDO1lBRS9DLFFBQVE7WUFDUixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDO1lBRWxDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQ3pDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUVuQyxJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztZQUU3QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7WUFDM0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQy9DLENBQUM7UUFFRDs7V0FFRztRQUNJLHVDQUFPLEdBQWQ7WUFFSSxJQUFHLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxFQUM3QjtnQkFDSSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQzthQUM3QjtZQUVELElBQUcsSUFBSSxDQUFDLG1CQUFtQixJQUFJLElBQUksRUFDbkM7Z0JBQ0ksSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQzthQUNuQztZQUVELElBQUcsSUFBSSxDQUFDLHlCQUF5QixJQUFJLElBQUksRUFDekM7Z0JBQ0ksSUFBSSxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQzthQUN6QztRQUNMLENBQUM7UUFFRDs7OztXQUlHO1FBQ0ksa0RBQWtCLEdBQXpCLFVBQTBCLGFBQXFCO1lBRTNDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDdkQsQ0FBQztRQUVEOzs7V0FHRztRQUNJLGtEQUFrQixHQUF6QjtZQUVJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN2QixDQUFDO1FBRU0scUNBQUssR0FBWixVQUFhLEVBQXlCO1lBRWxDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLENBQUM7UUFhTCw0QkFBQztJQUFELENBQUM7SUFoRlksMkNBQXFCLHdCQWdGakM7SUFFRDs7O09BR0c7SUFDSDtRQThCSTs7V0FFRztRQUNIO1lBRUksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLFNBQVMsRUFBbUIsQ0FBQztRQUN4RCxDQUFDO1FBbENEOzs7V0FHRztRQUNXLDhCQUFXLEdBQXpCO1lBRUksSUFBRyxVQUFVLElBQUksSUFBSSxFQUNyQjtnQkFDSSxVQUFVLEdBQUcsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO2dCQUV0QyxPQUFPLFVBQVUsQ0FBQzthQUNyQjtZQUNELE9BQU8sVUFBVSxDQUFDO1FBQ3RCLENBQUM7UUFFRDs7V0FFRztRQUNXLGlDQUFjLEdBQTVCO1lBRUksSUFBRyxVQUFVLEVBQ2I7Z0JBQ0ksVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNyQixVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUM7Z0JBQ3BCLFVBQVUsR0FBRyxJQUFJLENBQUM7YUFDckI7UUFDTCxDQUFDO1FBVUQ7O1dBRUc7UUFDSSxvQ0FBTyxHQUFkO1lBRUksSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDaEMsQ0FBQztRQUVEOzs7Ozs7Ozs7Ozs7O1dBYUc7UUFDSSwrQ0FBa0IsR0FBekIsVUFBMEIsUUFBOEIsRUFDNUIsU0FBdUIsRUFDdkIsV0FBbUIsRUFDbkIsV0FBeUIsRUFDekIsVUFBdUIsRUFDdkIsT0FBcUIsRUFDckIsVUFJQyxFQUNELE9BQWUsRUFDZixjQUErQixFQUMvQixTQUE2QixFQUM3QixvQkFBNkIsRUFDN0IsU0FBeUI7WUFFakQsSUFBRyxDQUFDLG9CQUFvQixFQUN4QjtnQkFDSSx5RUFBYyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7YUFDekQ7WUFFRCxJQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUNsQztnQkFDSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7YUFDMUI7WUFFRCxXQUFXO1lBQ1gsSUFBSSxTQUFpQixDQUFDO1lBQ3RCLElBQUksU0FBaUIsQ0FBQztZQUN0QixJQUFJLFNBQWlCLENBQUM7WUFDdEIsSUFBSSxTQUFpQixDQUFDO1lBRXRCLElBQUcsUUFBUSxDQUFDLCtCQUErQixFQUFFLElBQUksSUFBSSxFQUFHLFNBQVM7YUFDakU7Z0JBQ0ksSUFBSSxTQUFTLEdBQW9CLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO2dCQUN4RixJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBRTVDLFVBQVU7Z0JBQ1YsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQ25ELElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFFeEQsZUFBZTtnQkFDZixJQUFHLFVBQVUsQ0FBQyxNQUFNLElBQUksSUFBSSxFQUM1QjtvQkFDSSxVQUFVLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7aUJBQzlDO2dCQUNELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDNUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQzVFLElBQUksQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUM7Z0JBQ3JFLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLHlCQUF5QixFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUVoRyxhQUFhO2dCQUNiLElBQUcsVUFBVSxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQ3hCO29CQUNJLFVBQVUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztpQkFDMUM7Z0JBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN4RCxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDeEUsSUFBSSxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztnQkFDckUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBRWhHLFFBQVE7Z0JBQ1IsSUFBTSxTQUFTLEdBQVcsUUFBUSxDQUFDLCtCQUErQixFQUFFLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ3RGLElBQUksWUFBWSxHQUF1QixRQUFRLENBQUMsK0JBQStCLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUN4SSxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsMEJBQTBCLEVBQUUsWUFBWSxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUV4SCxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLCtCQUErQixFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBRTNJLElBQUksSUFBSSxHQUFZLFFBQVEsQ0FBQywrQkFBK0IsRUFBRSxDQUFDLGFBQWEsQ0FBQztnQkFFN0UsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQ2IsU0FBUyxDQUFDLHdCQUF3QixFQUNsQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQ2xCLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFDbEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQzNCLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUMvQixDQUFDO2dCQUVGLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztnQkFDekIsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUM7Z0JBQ3hDLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztnQkFDekIsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUM7YUFDM0M7aUJBQ0ksYUFBYTthQUNsQjtnQkFDSSxJQUFNLE1BQU0sR0FBWSxRQUFRLENBQUMsK0JBQStCLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxvQkFBb0I7Z0JBQ2hHLElBQU0sTUFBTSxHQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUV4QyxJQUFJLFNBQVMsR0FBb0IsSUFBSSxlQUFlLEVBQUUsQ0FBQztnQkFFdkQsUUFBTyxjQUFjLEVBQ3JCO29CQUNJLEtBQUssZUFBZSxDQUFDLHNCQUFzQixDQUFDO29CQUM1Qzt3QkFDSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLG9DQUFvQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO3dCQUMzRixTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7d0JBQ3hCLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO3dCQUN4QyxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7d0JBQ3hCLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO3dCQUN4QyxNQUFNO29CQUVWLEtBQUssZUFBZSxDQUFDLHdCQUF3Qjt3QkFDekMsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxpQ0FBaUMsR0FBRyxNQUFNLENBQUMsQ0FBQzt3QkFDeEYsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO3dCQUN4QixTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7d0JBQ3hCLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQzt3QkFDekIsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO3dCQUN4QixNQUFNO29CQUVWLEtBQUssZUFBZSxDQUFDLDhCQUE4Qjt3QkFDL0MsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxrQ0FBa0MsR0FBRyxNQUFNLENBQUMsQ0FBQzt3QkFDekYsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDO3dCQUM5QixTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQzt3QkFDeEMsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO3dCQUN6QixTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7d0JBQ3hCLE1BQU07aUJBQ2I7Z0JBRUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUU1QyxVQUFVO2dCQUNWLElBQUcsVUFBVSxDQUFDLE1BQU0sSUFBSSxJQUFJLEVBQzVCO29CQUNJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztpQkFDOUM7Z0JBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUM1RCxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDNUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztnQkFDckUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBRWhHLGFBQWE7Z0JBQ2IsSUFBRyxVQUFVLENBQUMsRUFBRSxJQUFJLElBQUksRUFDeEI7b0JBQ0ksVUFBVSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO2lCQUMxQztnQkFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUN4RSxJQUFJLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO2dCQUNyRSxJQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFFaEcsSUFBRyxNQUFNLEVBQ1Q7b0JBQ0ksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDeEMsSUFBSSxHQUFHLEdBQWlCLFFBQVEsQ0FBQywrQkFBK0IsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7b0JBQ3pHLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUM3QyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBRXhELHlDQUF5QztvQkFDekMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMseUJBQXlCLEVBQUUsS0FBSyxFQUFDLFFBQVEsQ0FBQywrQkFBK0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO29CQUUxSSxrQkFBa0I7b0JBQ2xCLElBQU0sU0FBUyxHQUFXLFFBQVEsQ0FBQywrQkFBK0IsRUFBRSxDQUFDLGdCQUFnQixDQUFDO29CQUN0RixJQUFJLFlBQVksR0FBdUIsUUFBUSxDQUFDLCtCQUErQixFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDeEksSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLDBCQUEwQixFQUFFLFlBQVksQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDM0g7Z0JBRUQsVUFBVTtnQkFDVixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN4QyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUV4RCxPQUFPO2dCQUNQLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztnQkFFdkYsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLHdCQUF3QixFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM3RztZQUVELGlCQUFpQjtZQUNqQixJQUFHLFVBQVUsQ0FBQyxLQUFLLElBQUksSUFBSSxFQUMzQjtnQkFDSSxVQUFVLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDN0M7WUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuRSxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ25GLElBQUksQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDMUUsQ0FBQztRQUVEOztXQUVHO1FBQ0ksaURBQW9CLEdBQTNCO1lBRUksS0FBSSxJQUFJLENBQUMsR0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQzFEO2dCQUNJLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUM1RCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ2pDO1FBQ0wsQ0FBQztRQUVEOzs7O1dBSUc7UUFDSSw0Q0FBZSxHQUF0QjtZQUVJLEtBQUksSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQzNDO2dCQUNJLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksZUFBZSxFQUFFLENBQUMsQ0FBQzthQUNwRDtZQUVELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsOENBQXdCLEVBQUUsZ0RBQTBCLENBQUMsQ0FBQztZQUVwSCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLHFDQUFlLEVBQUUseURBQW1DLENBQUMsQ0FBQztZQUNwSCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLDJDQUFxQixFQUFFLDZEQUF1QyxDQUFDLENBQUM7WUFFOUgscUJBQXFCO1lBQ3JCLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7WUFDNUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUU1RSxxQkFBcUI7WUFDckIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUM1RSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDO1lBRTVFLFlBQVk7WUFDWixJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUNqSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUNqSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUNoSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUNwSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQywwQkFBMEIsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxlQUFlLENBQUMsQ0FBQztZQUN0SSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUVsSSx5QkFBeUI7WUFDekIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDakksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDakksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDaEksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDNUgsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFFbEksZ0NBQWdDO1lBQ2hDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ2pJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ2pJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ2hJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ2hJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzVILElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1lBQ3BJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQ3RJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBRWxJLHlCQUF5QjtZQUN6QixJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUNqSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUNqSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUNoSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUM1SCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUVsSSxnQ0FBZ0M7WUFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDakksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDakksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDaEksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDaEksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDNUgsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVB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NUQsa0JBQWtCLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztvQkFDOUIsa0JBQWtCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztvQkFDL0Isa0JBQWtCLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7b0JBRW5ELFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUMsa0JBQXVDO3dCQUVqRSxJQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUNoRCxNQUFNLENBQUMsS0FBSyxHQUFHLGtCQUFrQixDQUFDLGNBQWMsQ0FBQzt3QkFDakQsTUFBTSxDQUFDLElBQUksR0FBRyxrQkFBa0IsQ0FBQyxjQUFjLENBQUM7d0JBRWhELGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFFM0MsQ0FBQyxDQUFDLENBQUM7b0JBRUgsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFO3dCQUUxQyxLQUFLLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUVwRCxDQUFDLENBQUMsQ0FBQztpQkFFTjs7OztLQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vU2FtcGxlcy9TYW1wbGVfMDIvdHMvbWFpbi50c1wiKTtcbiIsIi8qXHJcbiogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbipcclxuKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4qIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuKi9cclxuXHJcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gIOODreOCsOWHuuWKm+mWouaVsOOBruioreWumlxyXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4vLy0tLS0tLS0tLS0g44Ot44Kw5Ye65Yqb44Os44OZ44OrIOmBuOaKnumgheebriDlrprnvqkgLS0tLS0tLS0tLVxyXG4vLy8g6Kmz57Sw44Ot44Kw5Ye65Yqb6Kit5a6aXHJcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX1ZFUkJPU0U6IG51bWJlciA9IDA7XHJcbi8vLyDjg4fjg5Djg4PjgrDjg63jgrDlh7rlipvoqK3lrppcclxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfREVCVUc6IG51bWJlciA9IDE7XHJcbi8vLyBJbmZv44Ot44Kw5Ye65Yqb6Kit5a6aXHJcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX0lORk86IG51bWJlciA9IDI7XHJcbi8vLyDorablkYrjg63jgrDlh7rlipvoqK3lrppcclxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfV0FSTklORzogbnVtYmVyID0gMztcclxuLy8vIOOCqOODqeODvOODreOCsOWHuuWKm+ioreWumlxyXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9FUlJPUjogbnVtYmVyID0gNDtcclxuLy8vIOODreOCsOWHuuWKm+OCquODleioreWumlxyXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9PRkY6IG51bWJlciA9IDU7XHJcblxyXG4vKipcclxuKiDjg63jgrDlh7rlipvjg6zjg5njg6voqK3lrprjgIJcclxuKlxyXG4qIOW8t+WItueahOOBq+ODreOCsOWHuuWKm+ODrOODmeODq+OCkuWkieOBiOOCi+aZguOBq+Wumue+qeOCkuacieWKueOBq+OBmeOCi+OAglxyXG4qIENTTV9MT0dfTEVWRUxfVkVSQk9TRSDvvZ4gQ1NNX0xPR19MRVZFTF9PRkYg44KS6YG45oqe44GZ44KL44CCXHJcbiovXHJcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMOiBudW1iZXIgPSBDU01fTE9HX0xFVkVMX1ZFUkJPU0U7IiwiLypcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21mcmFtZXdvcmt9IGZyb20gXCIuL2xpdmUyZGN1YmlzbWZyYW1ld29ya1wiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBpY3ViaXNtbW9kZWxzZXR0aW5nfSBmcm9tIFwiLi9pY3ViaXNtbW9kZWxzZXR0aW5nXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkfSBmcm9tIFwiLi9pZC9jdWJpc21pZFwiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21qc29ufSBmcm9tIFwiLi91dGlscy9jdWJpc21qc29uXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbW1hcH0gZnJvbVwiLi90eXBlL2NzbW1hcFwiO1xyXG5pbXBvcnQgY3NtTWFwID0gY3NtbWFwLmNzbU1hcDtcclxuaW1wb3J0IGl0ZXJhdG9yID0gY3NtbWFwLml0ZXJhdG9yO1xyXG5pbXBvcnQgQ3ViaXNtRnJhbWV3b3JrID0gY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yaztcclxuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XHJcbmltcG9ydCBDdWJpc21Kc29uID0gY3ViaXNtanNvbi5DdWJpc21Kc29uO1xyXG5pbXBvcnQgVmFsdWUgPSBjdWJpc21qc29uLlZhbHVlO1xyXG5pbXBvcnQgSUN1YmlzbU1vZGVsU2V0dGluZyA9IGljdWJpc21tb2RlbHNldHRpbmcuSUN1YmlzbU1vZGVsU2V0dGluZztcclxuXHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29ya1xyXG57XHJcbiAgICAvKipcclxuICAgICAqIE1vZGVsM0pzb27jga7jgq3jg7zmloflrZfliJdcclxuICAgICAqL1xyXG5cclxuICAgICAvLyBKU09OIEtleXNcclxuICAgICBjb25zdCBWZXJzaW9uOiBzdHJpbmcgPSBcIlZlcnNpb25cIjtcclxuICAgICBjb25zdCBGaWxlUmVmZXJlbmNlczogc3RyaW5nID0gXCJGaWxlUmVmZXJlbmNlc1wiO1xyXG4gICAgIGNvbnN0IEdyb3Vwczogc3RyaW5nID0gXCJHcm91cHNcIjtcclxuICAgICBjb25zdCBMYXlvdXQ6IHN0cmluZyA9IFwiTGF5b3V0XCI7XHJcbiAgICAgY29uc3QgSGl0QXJlYXM6IHN0cmluZyA9IFwiSGl0QXJlYXNcIjtcclxuICAgICBcclxuICAgICBjb25zdCBNb2M6IHN0cmluZyA9IFwiTW9jXCI7XHJcbiAgICAgY29uc3QgVGV4dHVyZXM6IHN0cmluZyA9IFwiVGV4dHVyZXNcIjtcclxuICAgICBjb25zdCBQaHlzaWNzOiBzdHJpbmcgPSBcIlBoeXNpY3NcIjtcclxuICAgICBjb25zdCBQb3NlOiBzdHJpbmcgPSBcIlBvc2VcIjtcclxuICAgICBjb25zdCBFeHByZXNzaW9uczogc3RyaW5nID0gXCJFeHByZXNzaW9uc1wiO1xyXG4gICAgIGNvbnN0IE1vdGlvbnM6IHN0cmluZyA9IFwiTW90aW9uc1wiO1xyXG4gICAgIFxyXG4gICAgIGNvbnN0IFVzZXJEYXRhOiBzdHJpbmcgPSBcIlVzZXJEYXRhXCI7XHJcbiAgICAgY29uc3QgTmFtZTogc3RyaW5nID0gXCJOYW1lXCI7XHJcbiAgICAgY29uc3QgRmlsZVBhdGg6IHN0cmluZyA9IFwiRmlsZVwiO1xyXG4gICAgIGNvbnN0IElkOiBzdHJpbmcgPSBcIklkXCI7XHJcbiAgICAgY29uc3QgSWRzOiBzdHJpbmcgPSBcIklkc1wiO1xyXG4gICAgIGNvbnN0IFRhcmdldDogc3RyaW5nID0gXCJUYXJnZXRcIjtcclxuICAgICBcclxuICAgICAvLyBNb3Rpb25zXHJcbiAgICAgY29uc3QgSWRsZTogc3RyaW5nID0gXCJJZGxlXCI7XHJcbiAgICAgY29uc3QgVGFwQm9keTogc3RyaW5nID0gXCJUYXBCb2R5XCI7XHJcbiAgICAgY29uc3QgUGluY2hJbjogc3RyaW5nID0gXCJQaW5jaEluXCI7XHJcbiAgICAgY29uc3QgUGluY2hPdXQ6IHN0cmluZyA9IFwiUGluY2hPdXRcIjtcclxuICAgICBjb25zdCBTaGFrZTogc3RyaW5nID0gXCJTaGFrZVwiO1xyXG4gICAgIGNvbnN0IEZsaWNrSGVhZDogc3RyaW5nID0gXCJGbGlja0hlYWRcIjtcclxuICAgICBjb25zdCBQYXJhbWV0ZXI6IHN0cmluZyA9IFwiUGFyYW1ldGVyXCI7XHJcbiAgICAgXHJcbiAgICAgY29uc3QgU291bmRQYXRoOiBzdHJpbmcgPSBcIlNvdW5kXCI7XHJcbiAgICAgY29uc3QgRmFkZUluVGltZTogc3RyaW5nID0gXCJGYWRlSW5UaW1lXCI7XHJcbiAgICAgY29uc3QgRmFkZU91dFRpbWU6IHN0cmluZyA9IFwiRmFkZU91dFRpbWVcIjtcclxuICAgICBcclxuICAgICAvLyBMYXlvdXRcclxuICAgICBjb25zdCBDZW50ZXJYOiBzdHJpbmcgPSBcIkNlbnRlclhcIjtcclxuICAgICBjb25zdCBDZW50ZXJZOiBzdHJpbmcgPSBcIkNlbnRlcllcIjtcclxuICAgICBjb25zdCBYOiBzdHJpbmcgPSBcIlhcIjtcclxuICAgICBjb25zdCBZOiBzdHJpbmcgPSBcIllcIjtcclxuICAgICBjb25zdCBXaWR0aDogc3RyaW5nID0gXCJXaWR0aFwiO1xyXG4gICAgIGNvbnN0IEhlaWdodDogc3RyaW5nID0gXCJIZWlnaHRcIjtcclxuICAgICBcclxuICAgICBjb25zdCBMaXBTeW5jOiBzdHJpbmcgPSBcIkxpcFN5bmNcIjtcclxuICAgICBjb25zdCBFeWVCbGluazogc3RyaW5nID0gXCJFeWVCbGlua1wiO1xyXG4gICAgIFxyXG4gICAgIGNvbnN0IEluaXRQYXJhbWV0ZXI6IHN0cmluZyA9IFwiaW5pdF9wYXJhbVwiO1xyXG4gICAgIGNvbnN0IEluaXRQYXJ0c1Zpc2libGU6IHN0cmluZyA9IFwiaW5pdF9wYXJ0c192aXNpYmxlXCI7XHJcbiAgICAgY29uc3QgVmFsOiBzdHJpbmcgPSBcInZhbFwiO1xyXG5cclxuXHJcbiAgICAgLyoqXHJcbiAgICAgICogTW9kZWwzSnNvbuODkeODvOOCteODvFxyXG4gICAgICAqIFxyXG4gICAgICAqIG1vZGVsMy5qc29u44OV44Kh44Kk44Or44KS44OR44O844K544GX44Gm5YCk44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICovXHJcbiAgICAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsU2V0dGluZ0pzb24gZXh0ZW5kcyBJQ3ViaXNtTW9kZWxTZXR0aW5nXHJcbiAgICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBidWZmZXIgICAgTW9kZWwzSnNvbuOCkuODkOOCpOODiOmFjeWIl+OBqOOBl+OBpuiqreOBv+i+vOOCk+OBoOODh+ODvOOCv+ODkOODg+ODleOCoVxyXG4gICAgICAgICAqIEBwYXJhbSBzaXplICAgICAgTW9kZWwzSnNvbuOBruODh+ODvOOCv+OCteOCpOOCulxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEN1YmlzbUpzb24uZGVsZXRlKHRoaXMuX2pzb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3ViaXNtSnNvbuOCquODluOCuOOCp+OCr+ODiOOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4gQ3ViaXNtSnNvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBHZXRKc29uKCk6IEN1YmlzbUpzb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTW9j44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW9kZWxGaWxlTmFtZSgpOiBzdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmlzRXhpc3RNb2RlbEZpbGUoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEZpbGVSZWZlcmVuY2VzKS5nZXRNYXAoKS5nZXRWYWx1ZShNb2MpLmdldFJhd1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5pWw44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICog44OG44Kv44K544OB44Oj44Gu5pWwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFRleHR1cmVDb3VudCgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmlzRXhpc3RUZXh0dXJlRmlsZXMoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoVGV4dHVyZXMpLmdldFNpemUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44GM6YWN572u44GV44KM44Gf44OH44Kj44Os44Kv44OI44Oq44Gu5ZCN5YmNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFRleHR1cmVEaXJlY3RvcnkoKTogc3RyaW5nXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoRmlsZVJlZmVyZW5jZXMpLmdldE1hcCgpLmdldFZhbHVlKFRleHR1cmVzKS5nZXRSYXdTdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODh+ODq+OBjOS9v+eUqOOBmeOCi+ODhuOCr+OCueODgeODo+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBruWQjeWJjVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRUZXh0dXJlRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZ1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEZpbGVSZWZlcmVuY2VzKS5nZXRNYXAoKS5nZXRWYWx1ZShUZXh0dXJlcykuZ2V0VmVjdG9yKCkuYXQoaW5kZXgpLmdldFJhd1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf5b2T44Gf44KK5Yik5a6a44Gu5pWw44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/lvZPjgZ/jgorliKTlrprjga7mlbBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0SGl0QXJlYXNDb3VudCgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmlzRXhpc3RIaXRBcmVhcygpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEhpdEFyZWFzKS5nZXRTaXplKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ9JROOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga5pbmRleFxyXG4gICAgICAgICAqIEByZXR1cm4g5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44GfSURcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0SGl0QXJlYUlkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZCh0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShIaXRBcmVhcykuZ2V0VmVjdG9yKCkuYXQoaW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKElkKS5nZXRSYXdTdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ/lkI3liY3jgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICAgICAgICogQHJldHVybiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ/lkI3liY1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0SGl0QXJlYU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZ1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEhpdEFyZWFzKS5nZXRWZWN0b3IoKS5hdChpbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoTmFtZSkuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDniannkIbmvJTnrpfoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRQaHlzaWNzRmlsZU5hbWUoKTogc3RyaW5nXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighdGhpcy5pc0V4aXN0UGh5c2ljc0ZpbGUoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoUGh5c2ljcykuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIOODkeODvOODhOWIh+OCiuabv+OBiOioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRQb3NlRmlsZU5hbWUoKTogc3RyaW5nXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighdGhpcy5pc0V4aXN0UG9zZUZpbGUoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoUG9zZSkuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIOihqOaDheioreWumuODleOCoeOCpOODq+OBruaVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRFeHByZXNzaW9uQ291bnQoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighdGhpcy5pc0V4aXN0RXhwcmVzc2lvbkZpbGUoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoRXhwcmVzc2lvbnMpLmdldFNpemUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OCkuitmOWIpeOBmeOCi+WQjeWJje+8iOWIpeWQje+8ieOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOihqOaDheOBruWQjeWJjVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRFeHByZXNzaW9uTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoRmlsZVJlZmVyZW5jZXMpLmdldE1hcCgpLmdldFZhbHVlKEV4cHJlc3Npb25zKS5nZXRWZWN0b3IoKS5hdChpbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoTmFtZSkuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICAgICAgICogQHJldHVybiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RXhwcmVzc2lvbkZpbGVOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoRXhwcmVzc2lvbnMpLmdldFZlY3RvcigpLmF0KGluZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUGF0aCkuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRNb3Rpb25Hcm91cENvdW50KCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIXRoaXMuaXNFeGlzdE1vdGlvbkdyb3VwcygpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEZpbGVSZWZlcmVuY2VzKS5nZXRNYXAoKS5nZXRWYWx1ZShNb3Rpb25zKS5nZXRNYXAoKS5nZXRTaXplKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY3jgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICAgICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW90aW9uR3JvdXBOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmlzRXhpc3RNb3Rpb25Hcm91cHMoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoTW90aW9ucykuZ2V0S2V5cygpLmF0KGluZGV4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBq+WQq+OBvuOCjOOCi+ODouODvOOCt+ODp+ODs+OBruaVsOOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXHJcbiAgICAgICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW90aW9uQ291bnQoZ3JvdXBOYW1lOiBzdHJpbmcpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmlzRXhpc3RNb3Rpb25Hcm91cE5hbWUoZ3JvdXBOYW1lKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoTW90aW9ucykuZ2V0TWFwKCkuZ2V0VmFsdWUoZ3JvdXBOYW1lKS5nZXRTaXplKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrDjg6vjg7zjg5flkI3jgajjgqTjg7Pjg4fjg4Pjgq/jgrnlgKTjgYvjgonjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vlkI3jgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCAgICAg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICAgICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vjga7lkI3liY1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW90aW9uRmlsZU5hbWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBzdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmlzRXhpc3RNb3Rpb25Hcm91cE5hbWUoZ3JvdXBOYW1lKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoTW90aW9ucykuZ2V0TWFwKCkuZ2V0VmFsdWUoZ3JvdXBOYW1lKS5nZXRWZWN0b3IoKS5hdChpbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoRmlsZVBhdGgpLmdldFJhd1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICAgICAgICogQHJldHVybiDjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7lkI3liY1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW90aW9uU291bmRGaWxlTmFtZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZ1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIXRoaXMuaXNFeGlzdE1vdGlvblNvdW5kRmlsZShncm91cE5hbWUsIGluZGV4KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoTW90aW9ucykuZ2V0TWFwKCkuZ2V0VmFsdWUoZ3JvdXBOYW1lKS5nZXRWZWN0b3IoKS5hdChpbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoU291bmRQYXRoKS5nZXRSYXdTdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+mWi+Wni+aZguOBruODleOCp+ODvOODieOCpOODs+WHpueQhuaZgumWk+OCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXHJcbiAgICAgICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAgICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz5Yem55CG5pmC6ZaTW+enkl1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW90aW9uRmFkZUluVGltZVZhbHVlKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighdGhpcy5pc0V4aXN0TW90aW9uRmFkZUluKGdyb3VwTmFtZSwgaW5kZXgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTEuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEZpbGVSZWZlcmVuY2VzKS5nZXRNYXAoKS5nZXRWYWx1ZShNb3Rpb25zKS5nZXRNYXAoKS5nZXRWYWx1ZShncm91cE5hbWUpLmdldFZlY3RvcigpLmF0KGluZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShGYWRlSW5UaW1lKS50b0Zsb2F0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7PntYLkuobmmYLjga7jg5Xjgqfjg7zjg4njgqLjgqbjg4jlh6bnkIbmmYLplpPjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOWHpueQhuaZgumWk1vnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE1vdGlvbkZhZGVPdXRUaW1lVmFsdWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmlzRXhpc3RNb3Rpb25GYWRlT3V0KGdyb3VwTmFtZSwgaW5kZXgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTEuMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEZpbGVSZWZlcmVuY2VzKS5nZXRNYXAoKS5nZXRWYWx1ZShNb3Rpb25zKS5nZXRNYXAoKS5nZXRWYWx1ZShncm91cE5hbWUpLmdldFZlY3RvcigpLmF0KGluZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShGYWRlT3V0VGltZSkudG9GbG9hdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCN44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jg5XjgqHjgqTjg6vlkI1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0VXNlckRhdGFGaWxlKCk6IHN0cmluZ1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIXRoaXMuaXNFeGlzdFVzZXJEYXRhRmlsZSgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEZpbGVSZWZlcmVuY2VzKS5nZXRNYXAoKS5nZXRWYWx1ZShVc2VyRGF0YSkuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gb3V0TGF5b3V0TWFwIGNzbU1hcOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYzlrZjlnKjjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOODrOOCpOOCouOCpuODiOaDheWgseOBjOWtmOWcqOOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRMYXlvdXRNYXAob3V0TGF5b3V0TWFwOiBjc21NYXA8c3RyaW5nLCBudW1iZXI+KTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8g5a2Y5Zyo44GX44Gq44GE6KaB57Sg44Gr44Ki44Kv44K744K544GZ44KL44Go44Ko44Op44O844Gr44Gq44KL44Gf44KBVmFsdWXjgYxudWxs44Gu5aC05ZCI44GvbnVsbOOCkuS7o+WFpeOBmeOCi1xyXG4gICAgICAgICAgICBsZXQgbWFwOiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4gPSAodGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuaXNFeGlzdChMYXlvdXQpKVxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShMYXlvdXQpLmdldE1hcCgpXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZihtYXAgPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmV0OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBmb3IoY29uc3QgaXRlOiBpdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IG1hcC5iZWdpbigpOyBpdGUubm90RXF1YWwobWFwLmVuZCgpKTsgaXRlLnByZUluY3JlbWVudCgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBvdXRMYXlvdXRNYXAuc2V0VmFsdWUoaXRlLnB0cigpLmZpcnN0LCBpdGUucHRyKCkuc2Vjb25kLnRvRmxvYXQoKSk7XHJcbiAgICAgICAgICAgICAgICByZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0V4aXN0RXllQmxpbmtQYXJhbWV0ZXJzKCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBudW06IG51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoR3JvdXBzKS5nZXRTaXplKCk7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEdyb3VwcykuZ2V0VmVjdG9yKCkuYXQoaSkuZ2V0TWFwKCkuZ2V0VmFsdWUoTmFtZSkuZ2V0UmF3U3RyaW5nKCkgPT0gRXllQmxpbmspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnVtID0gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoR3JvdXBzKS5nZXRWZWN0b3IoKS5hdChpKS5nZXRNYXAoKS5nZXRWYWx1ZShJZHMpLmdldFZlY3RvcigpLmdldFNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gbnVtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44GuSUTjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICAgICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRFeWVCbGlua1BhcmFtZXRlcklkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRXhpc3RFeWVCbGlua1BhcmFtZXRlcnMoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShHcm91cHMpLmdldFNpemUoKTsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoR3JvdXBzKS5nZXRWZWN0b3IoKS5hdChpKS5nZXRNYXAoKS5nZXRWYWx1ZShOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBFeWVCbGluaylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEdyb3VwcykuZ2V0VmVjdG9yKCkuYXQoaSkuZ2V0TWFwKCkuZ2V0VmFsdWUoSWRzKS5nZXRWZWN0b3IoKS5hdChpbmRleCkuZ2V0UmF3U3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TGlwU3luY1BhcmFtZXRlckNvdW50KCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRXhpc3RMaXBTeW5jUGFyYW1ldGVycygpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgbnVtOiBudW1iZXIgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoR3JvdXBzKS5nZXRTaXplKCk7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEdyb3VwcykuZ2V0VmVjdG9yKCkuYXQoaSkuZ2V0TWFwKCkuZ2V0VmFsdWUoTmFtZSkuZ2V0UmF3U3RyaW5nKCkgPT0gTGlwU3luYylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBudW0gPSB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShHcm91cHMpLmdldFZlY3RvcigpLmF0KGkpLmdldE1hcCgpLmdldFZhbHVlKElkcykuZ2V0VmVjdG9yKCkuZ2V0U2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiBudW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICAgICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRMaXBTeW5jUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNFeGlzdExpcFN5bmNQYXJhbWV0ZXJzKCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShHcm91cHMpLmdldFNpemUoKTsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoR3JvdXBzKS5nZXRWZWN0b3IoKS5hdChpKS5nZXRNYXAoKS5nZXRWYWx1ZShOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBMaXBTeW5jKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQodGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoR3JvdXBzKS5nZXRWZWN0b3IoKS5hdChpKS5nZXRNYXAoKS5nZXRWYWx1ZShJZHMpLmdldFZlY3RvcigpLmF0KGluZGV4KS5nZXRSYXdTdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg4fjg6vjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIGlzRXhpc3RNb2RlbEZpbGUoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEZpbGVSZWZlcmVuY2VzKS5nZXRNYXAoKS5pc0V4aXN0KE1vYyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4bjgq/jgrnjg4Hjg6Pjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIGlzRXhpc3RUZXh0dXJlRmlsZXMoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEZpbGVSZWZlcmVuY2VzKS5nZXRNYXAoKS5pc0V4aXN0KFRleHR1cmVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW9k+OBn+OCiuWIpOWumuOBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgaXNFeGlzdEhpdEFyZWFzKCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5pc0V4aXN0KEhpdEFyZWFzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeJqeeQhua8lOeul+ODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgaXNFeGlzdFBoeXNpY3NGaWxlKCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuaXNFeGlzdChQaHlzaWNzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODneODvOOCuuioreWumuODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgaXNFeGlzdFBvc2VGaWxlKCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuaXNFeGlzdChQb3NlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBpc0V4aXN0RXhwcmVzc2lvbkZpbGUoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEZpbGVSZWZlcmVuY2VzKS5nZXRNYXAoKS5pc0V4aXN0KEV4cHJlc3Npb25zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgaXNFeGlzdE1vdGlvbkdyb3VwcygpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoRmlsZVJlZmVyZW5jZXMpLmdldE1hcCgpLmlzRXhpc3QoTW90aW9ucyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lICDjgrDjg6vjg7zjg5flkI1cclxuICAgICAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIGlzRXhpc3RNb3Rpb25Hcm91cE5hbWUoZ3JvdXBOYW1lOiBzdHJpbmcpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoRmlsZVJlZmVyZW5jZXMpLmdldE1hcCgpLmlzRXhpc3QoTW90aW9ucykpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoRmlsZVJlZmVyZW5jZXMpLmdldE1hcCgpLmdldFZhbHVlKE1vdGlvbnMpLmdldE1hcCgpLmlzRXhpc3QoZ3JvdXBOYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+OCteOCpuODs+ODieODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBncm91cE5hbWUgIOOCsOODq+ODvOODl+WQjVxyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIGlzRXhpc3RNb3Rpb25Tb3VuZEZpbGUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoRmlsZVJlZmVyZW5jZXMpLmdldE1hcCgpLmdldFZhbHVlKE1vdGlvbnMpLmdldE1hcCgpLmdldFZhbHVlKGdyb3VwTmFtZSkuZ2V0VmVjdG9yKCkuYXQoaW5kZXgpLmdldE1hcCgpLmlzRXhpc3QoU291bmRQYXRoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+ODleOCp+ODvOODieOCpOODs+aZgumWk+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBncm91cE5hbWUgIOOCsOODq+ODvOODl+WQjVxyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIGlzRXhpc3RNb3Rpb25GYWRlSW4oZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoRmlsZVJlZmVyZW5jZXMpLmdldE1hcCgpLmdldFZhbHVlKE1vdGlvbnMpLmdldE1hcCgpLmdldFZhbHVlKGdyb3VwTmFtZSkuZ2V0VmVjdG9yKCkuYXQoaW5kZXgpLmdldE1hcCgpLmlzRXhpc3QoRmFkZUluVGltZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjgavlr77lv5zjgZnjgovjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lICDjgrDjg6vjg7zjg5flkI1cclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICAgICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uRmFkZU91dChncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoTW90aW9ucykuZ2V0TWFwKCkuZ2V0VmFsdWUoZ3JvdXBOYW1lKS5nZXRWZWN0b3IoKS5hdChpbmRleCkuZ2V0TWFwKCkuaXNFeGlzdChGYWRlT3V0VGltZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBVc2VyRGF0YeOBruODleOCoeOCpOODq+WQjeOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgaXNFeGlzdFVzZXJEYXRhRmlsZSgpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoRmlsZVJlZmVyZW5jZXMpLmdldE1hcCgpLmlzRXhpc3QoVXNlckRhdGEpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICF0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShGaWxlUmVmZXJlbmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoVXNlckRhdGEpLmlzTnVsbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55uu44Gx44Gh44Gr5a++5b+c5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJpdmF0ZSBpc0V4aXN0RXllQmxpbmtQYXJhbWV0ZXJzKCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5pc0V4aXN0KEdyb3VwcykpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoR3JvdXBzKS5nZXRTaXplKCk7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEdyb3VwcykuZ2V0VmVjdG9yKCkuYXQoaSkuZ2V0TWFwKCkuZ2V0VmFsdWUoTmFtZSkuZ2V0UmF3U3RyaW5nKCkgPT0gRXllQmxpbmspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODquODg+ODl+OCt+ODs+OCr+OBq+WvvuW/nOS7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgaXNFeGlzdExpcFN5bmNQYXJhbWV0ZXJzKCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5pc0V4aXN0KEdyb3VwcykpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoR3JvdXBzKS5nZXRTaXplKCk7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEdyb3VwcykuZ2V0VmVjdG9yKCkuYXQoaSkuZ2V0TWFwKCkuZ2V0VmFsdWUoTmFtZSkuZ2V0UmF3U3RyaW5nKCkgPT0gTGlwU3luYylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIHByaXZhdGUgX2pzb246IEN1YmlzbUpzb247XHJcbiAgICAgfVxyXG59IiwiLypcclxuKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuKlxyXG4qIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4qL1xyXG5cclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yfSBmcm9tIFwiLi4vdHlwZS9jc212ZWN0b3JcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWx9IGZyb20gXCIuLi9tb2RlbC9jdWJpc21tb2RlbFwiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZH0gZnJvbSBcIi4uL2lkL2N1YmlzbWlkXCI7XHJcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xyXG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcclxuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XHJcblxyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmtcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiDlkbzlkLjmqZ/og71cclxuICAgICAqIFxyXG4gICAgICog5ZG85ZC45qmf6IO944KS5o+Q5L6b44GZ44KL44CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBDdWJpc21CcmVhdGhcclxuICAgIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKTogQ3ViaXNtQnJlYXRoXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEN1YmlzbUJyZWF0aCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXHJcbiAgICAgICAgICogQHBhcmFtIGluc3RhbmNlIOWvvuixoeOBrkN1YmlzbUJyZWF0aFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKGluc3RhbmNlOiBDdWJpc21CcmVhdGgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihpbnN0YW5jZSAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWRvOWQuOOBruODkeODqeODoeODvOOCv+OBrue0kOOBpeOBkVxyXG4gICAgICAgICAqIEBwYXJhbSBicmVhdGhQYXJhbWV0ZXJzIOWRvOWQuOOCkue0kOOBpeOBkeOBn+OBhOODkeODqeODoeODvOOCv+OBruODquOCueODiFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRQYXJhbWV0ZXJzKGJyZWF0aFBhcmFtZXRlcnM6IGNzbVZlY3RvcjxCcmVhdGhQYXJhbWV0ZXJEYXRhPik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2JyZWF0aFBhcmFtZXRlcnMgPSBicmVhdGhQYXJhbWV0ZXJzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5ZG85ZC444Gr57SQ44Gl44GE44Gm44GE44KL44OR44Op44Oh44O844K/44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDlkbzlkLjjgavntJDjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7jg6rjgrnjg4hcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0UGFyYW1ldGVycygpOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXHJcbiAgICAgICAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xyXG4gICAgICAgICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHVwZGF0ZVBhcmFtZXRlcnMobW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50VGltZSArPSBkZWx0YVRpbWVTZWNvbmRzO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdDogbnVtYmVyID0gdGhpcy5fY3VycmVudFRpbWUgKiAyLjAgKiAzLjE0MTU5O1xyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fYnJlYXRoUGFyYW1ldGVycy5nZXRTaXplKCk7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGE6IEJyZWF0aFBhcmFtZXRlckRhdGEgPSB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzLmF0KGkpO1xyXG5cclxuICAgICAgICAgICAgICAgIG1vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZChcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnBhcmFtZXRlcklkLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEub2Zmc2V0ICsgKGRhdGEucGVhayAqIE1hdGguc2luKHQgLyBkYXRhLmN5Y2xlKSksXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS53ZWlnaHRcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSAwLjA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAgX2JyZWF0aFBhcmFtZXRlcnM6IGNzbVZlY3RvcjxCcmVhdGhQYXJhbWV0ZXJEYXRhPjsgLy8g5ZG85ZC444Gr44Gy44KC44Gl44GE44Gm44GE44KL44OR44Op44Oh44O844K/44Gu44Oq44K544OIXHJcbiAgICAgICAgIF9jdXJyZW50VGltZTogbnVtYmVyOyAgLy8g56mN566X5pmC6ZaTW+enkl1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDlkbzlkLjjga7jg5Hjg6njg6Hjg7zjgr/mg4XloLFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEJyZWF0aFBhcmFtZXRlckRhdGFcclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKiBAcGFyYW0gcGFyYW1ldGVySWQgICDlkbzlkLjjgpLjgbLjgoLjgaXjgZHjgovjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAgICAgICAqIEBwYXJhbSBvZmZzZXQgICAgICAgIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruOCquODleOCu+ODg+ODiFxyXG4gICAgICAgICAqIEBwYXJhbSBwZWFrICAgICAgICAgIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBrumrmOOBlVxyXG4gICAgICAgICAqIEBwYXJhbSBjeWNsZSAgICAgICAgIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruWRqOacn1xyXG4gICAgICAgICAqIEBwYXJhbSB3ZWlnaHQgICAgICAgIOODkeODqeODoeODvOOCv+OBuOOBrumHjeOBv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcklkPzogQ3ViaXNtSWRIYW5kbGUsIG9mZnNldD86IG51bWJlciwgcGVhaz86IG51bWJlciwgY3ljbGU/OiBudW1iZXIsIHdlaWdodD86IG51bWJlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVySWQgPSAocGFyYW1ldGVySWQgPT0gdW5kZWZpbmVkKSBcclxuICAgICAgICAgICAgICAgICAgICA/IG51bGwgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBwYXJhbWV0ZXJJZDtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSAob2Zmc2V0ID09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICA/IDAuMCBcclxuICAgICAgICAgICAgICAgICAgICA6IG9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5wZWFrID0gKHBlYWsgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgID8gMC4wXHJcbiAgICAgICAgICAgICAgICAgICAgOiBwZWFrO1xyXG4gICAgICAgICAgICB0aGlzLmN5Y2xlID0gKGN5Y2xlID09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICA/IDAuMFxyXG4gICAgICAgICAgICAgICAgICAgIDogY3ljbGU7XHJcbiAgICAgICAgICAgIHRoaXMud2VpZ2h0ID0gKHdlaWdodCA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgPyAwLjAgXHJcbiAgICAgICAgICAgICAgICAgICAgOiB3ZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGU7ICAvLyDlkbzlkLjjgpLjgbLjgoLjgaXjgZHjgovjg5Hjg6njg6Hjg7zjgr9JRFxcXHJcbiAgICAgICAgb2Zmc2V0OiBudW1iZXI7ICAgICAgICAgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu44Kq44OV44K744OD44OIXHJcbiAgICAgICAgcGVhazogbnVtYmVyOyAgICAgICAgICAgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu6auY44GVXHJcbiAgICAgICAgY3ljbGU6IG51bWJlcjsgICAgICAgICAgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu5ZGo5pyfXHJcbiAgICAgICAgd2VpZ2h0OiBudW1iZXI7ICAgICAgICAgLy8g44OR44Op44Oh44O844K/44G444Gu6YeN44G/XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3Rvcn0gZnJvbSBcIi4uL3R5cGUvY3NtdmVjdG9yXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGljdWJpc21tb2RlbHNldHRpbmd9IGZyb20gXCIuLi9pY3ViaXNtbW9kZWxzZXR0aW5nXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkfSBmcm9tIFwiLi4vaWQvY3ViaXNtaWRcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWx9IGZyb20gXCIuLi9tb2RlbC9jdWJpc21tb2RlbFwiO1xyXG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcclxuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XHJcbmltcG9ydCBJQ3ViaXNtTW9kZWxTZXR0aW5nID0gaWN1YmlzbW1vZGVsc2V0dGluZy5JQ3ViaXNtTW9kZWxTZXR0aW5nO1xyXG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8qKlxyXG4gICAgICog6Ieq5YuV44G+44Gw44Gf44GN5qmf6IO9XHJcbiAgICAgKiBcclxuICAgICAqIOiHquWLleOBvuOBsOOBn+OBjeapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtRXllQmxpbmtcclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gbW9kZWxTZXR0aW5nIOODouODh+ODq+OBruioreWumuaDheWgsVxyXG4gICAgICAgICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XHJcbiAgICAgICAgICogQG5vdGUg5byV5pWw44GMTlVMTOOBruWgtOWQiOOAgeODkeODqeODoeODvOOCv0lE44GM6Kit5a6a44GV44KM44Gm44GE44Gq44GE56m644Gu44Kk44Oz44K544K/44Oz44K544KS5L2c5oiQ44GZ44KL44CCXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUobW9kZWxTZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nID0gbnVsbCk6IEN1YmlzbUV5ZUJsaW5rXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEN1YmlzbUV5ZUJsaW5rKG1vZGVsU2V0dGluZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7noLTmo4RcclxuICAgICAgICAgKiBAcGFyYW0gZXllQmxpbmsg5a++6LGh44GuQ3ViaXNtRXllQmxpbmtcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShleWVCbGluazogQ3ViaXNtRXllQmxpbmspOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihleWVCbGluayAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBleWVCbGluayA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOBvuOBsOOBn+OBjeOBrumWk+malOOBruioreWumlxyXG4gICAgICAgICAqIEBwYXJhbSBibGlua2luZ0ludGVydmFsIOOBvuOBsOOBn+OBjeOBrumWk+malOOBruaZgumWk1vnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldEJsaW5raW5nSW50ZXJ2YWwoYmxpbmtpbmdJbnRlcnZhbDogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fYmxpbmtpbmdJbnRlcnZhbFNlY29uZHMgPSBibGlua2luZ0ludGVydmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44G+44Gw44Gf44GN44Gu44Oi44O844K344On44Oz44Gu6Kmz57Sw6Kit5a6aXHJcbiAgICAgICAgICogQHBhcmFtIGNsb3NpbmcgICDjgb7jgbbjgZ/jgpLplonjgZjjgovli5XkvZzjga7miYDopoHmmYLplpNb56eSXVxyXG4gICAgICAgICAqIEBwYXJhbSBjbG9zZWQgICAg44G+44G244Gf44KS6ZaJ44GY44Gm44GE44KL5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cclxuICAgICAgICAgKiBAcGFyYW0gb3BlbmluZyAgIOOBvuOBtuOBn+OCkumWi+OBj+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldEJsaW5raW5nU2V0dGluZyhjbG9zaW5nOiBudW1iZXIsIGNsb3NlZDogbnVtYmVyLCBvcGVuaW5nOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9jbG9zaW5nU2Vjb25kcyA9IGNsb3Npbmc7XHJcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlZFNlY29uZHMgPSBjbG9zZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuX29wZW5pbmdTZWNvbmRzID0gb3BlbmluZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOBvuOBsOOBn+OBjeOBleOBm+OCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OI44Gu6Kit5a6aXHJcbiAgICAgICAgICogQHBhcmFtIHBhcmFtZXRlcklkcyDjg5Hjg6njg6Hjg7zjgr/jga5JROOBruODquOCueODiFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRQYXJhbWV0ZXJJZHMocGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVySWRzID0gcGFyYW1ldGVySWRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44G+44Gw44Gf44GN44GV44Gb44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4jjga7lj5blvpdcclxuICAgICAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFBhcmFtZXRlcklkcygpOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyYW1ldGVySWRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXHJcbiAgICAgICAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xyXG4gICAgICAgICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHVwZGF0ZVBhcmFtZXRlcnMobW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKz0gZGVsdGFUaW1lU2Vjb25kcztcclxuICAgICAgICAgICAgbGV0IHBhcmFtZXRlclZhbHVlOiBudW1iZXI7XHJcbiAgICAgICAgICAgIGxldCB0OiBudW1iZXIgPSAwLjA7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2godGhpcy5fYmxpbmtpbmdTdGF0ZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9DbG9zaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgIHQgPSAoKHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcykgLyB0aGlzLl9jbG9zaW5nU2Vjb25kcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYodCA+PSAxLjApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfQ2xvc2VkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDEuMCAtIHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9DbG9zZWQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9ICgodGhpcy5fdXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzKSAvIHRoaXMuX2Nsb3NlZFNlY29uZHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZih0ID49IDEuMClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9PcGVuaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDAuMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEV5ZVN0YXRlLkV5ZVN0YXRlX09wZW5pbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9ICgodGhpcy5fdXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzKSAvIHRoaXMuX29wZW5pbmdTZWNvbmRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYodCA+PSAxLjApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfSW50ZXJ2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX25leHRCbGlua2luZ1RpbWUgPSB0aGlzLmRldGVybWluTmV4dEJsaW5raW5nVGltaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9JbnRlcnZhbDpcclxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLl9uZXh0QmxpbmtpbmdUaW1lIDwgdGhpcy5fdXNlclRpbWVTZWNvbmRzKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0Nsb3Npbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcyA9IHRoaXMuX3VzZXJUaW1lU2Vjb25kcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlclZhbHVlID0gMS4wO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfRmlyc3Q6XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9JbnRlcnZhbDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZXh0QmxpbmtpbmdUaW1lID0gdGhpcy5kZXRlcm1pbk5leHRCbGlua2luZ1RpbWluZygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDEuMDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoIUN1YmlzbUV5ZUJsaW5rLkNsb3NlSWZaZXJvKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IC1wYXJhbWV0ZXJWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fcGFyYW1ldGVySWRzLmdldFNpemUoKTsgKytpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5fcGFyYW1ldGVySWRzLmF0KGkpLCBwYXJhbWV0ZXJWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbFNldHRpbmcg44Oi44OH44Or44Gu6Kit5a6a5oOF5aCxXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKG1vZGVsU2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9GaXJzdDtcclxuICAgICAgICAgICAgdGhpcy5fbmV4dEJsaW5raW5nVGltZSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9ibGlua2luZ0ludGVydmFsU2Vjb25kcyA9IDQuMDtcclxuICAgICAgICAgICAgdGhpcy5fY2xvc2luZ1NlY29uZHMgPSAwLjE7XHJcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlZFNlY29uZHMgPSAwLjA1O1xyXG4gICAgICAgICAgICB0aGlzLl9vcGVuaW5nU2Vjb25kcyA9IDAuMTU7XHJcbiAgICAgICAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVySWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcclxuXHJcbiAgICAgICAgICAgIGlmKG1vZGVsU2V0dGluZyA9PSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgaTogbnVtYmVyID0gMDsgaSA8IG1vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCk7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVySWRzLnB1c2hCYWNrKG1vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlcklkKGkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5qyh44Gu556s44GN44Gu44K/44Kk44Of44Oz44Kw44Gu5rG65a6aXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHJldHVybiDmrKHjga7jgb7jgbDjgZ/jgY3jgpLooYzjgYbmmYLliLtb56eSXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBkZXRlcm1pbk5leHRCbGlua2luZ1RpbWluZygpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHI6IG51bWJlciA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2VyVGltZVNlY29uZHMgKyAociAqICgyLjAgKiB0aGlzLl9ibGlua2luZ0ludGVydmFsU2Vjb25kcyAtIDEuMCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgX2JsaW5raW5nU3RhdGU6IG51bWJlcjsgICAgICAgICAgICAgLy8g54++5Zyo44Gu54q25oWLXHJcbiAgICAgICAgX3BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjsgLy8g5pON5L2c5a++6LGh44Gu44OR44Op44Oh44O844K/44GuSUTjga7jg6rjgrnjg4hcclxuICAgICAgICBfbmV4dEJsaW5raW5nVGltZTogbnVtYmVyOyAgICAgICAgICAvLyDmrKHjga7jgb7jgbDjgZ/jgY3jga7mmYLliLtb56eSXVxyXG4gICAgICAgIF9zdGF0ZVN0YXJ0VGltZVNlY29uZHM6IG51bWJlcjsgICAgIC8vIOePvuWcqOOBrueKtuaFi+OBjOmWi+Wni+OBl+OBn+aZguWIu1vnp5JdXHJcbiAgICAgICAgX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzOiBudW1iZXI7ICAgLy8g44G+44Gw44Gf44GN44Gu6ZaT6ZqUW+enkl1cclxuICAgICAgICBfY2xvc2luZ1NlY29uZHM6IG51bWJlcjsgICAgICAgICAgICAvLyDjgb7jgbbjgZ/jgpLplonjgZjjgovli5XkvZzjga7miYDopoHmmYLplpNb56eSXVxyXG4gICAgICAgIF9jbG9zZWRTZWNvbmRzOiBudW1iZXI7ICAgICAgICAgICAgIC8vIOOBvuOBtuOBn+OCkumWieOBmOOBpuOBhOOCi+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXHJcbiAgICAgICAgX29wZW5pbmdTZWNvbmRzOiBudW1iZXI7ICAgICAgICAgICAgLy8g44G+44G244Gf44KS6ZaL44GP5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cclxuICAgICAgICBfdXNlclRpbWVTZWNvbmRzOiBudW1iZXI7ICAgICAgICAgICAvLyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJROOBp+aMh+WumuOBleOCjOOBn+ebruOBruODkeODqeODoeODvOOCv+OBjOOAgTDjga7jgajjgY3jgavplonjgZjjgovjgarjgokgdHJ1ZSDjgIEx44Gu5pmC44Gr6ZaJ44GY44KL44Gq44KJIGZhbHNlIOOAglxyXG4gICAgICAgICAqLyBcclxuICAgICAgICBzdGF0aWMgcmVhZG9ubHkgQ2xvc2VJZlplcm86IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44G+44Gw44Gf44GN44Gu54q25oWLXHJcbiAgICAgKiBcclxuICAgICAqIOOBvuOBsOOBn+OBjeOBrueKtuaFi+OCkuihqOOBmeWIl+aMmeWei1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgZW51bSBFeWVTdGF0ZVxyXG4gICAge1xyXG4gICAgICAgIEV5ZVN0YXRlX0ZpcnN0ID0gMCwgLy8g5Yid5pyf54q25oWLXHJcbiAgICAgICAgRXllU3RhdGVfSW50ZXJ2YWwsICAvLyDjgb7jgbDjgZ/jgY3jgZfjgabjgYTjgarjgYTnirbmhYtcclxuICAgICAgICBFeWVTdGF0ZV9DbG9zaW5nLCAgIC8vIOOBvuOBtuOBn+OBjOmWieOBmOOBpuOBhOOBj+mAlOS4reOBrueKtuaFi1xyXG4gICAgICAgIEV5ZVN0YXRlX0Nsb3NlZCwgICAgLy8g44G+44G244Gf44GM6ZaJ44GY44Gm44GE44KL54q25oWLXHJcbiAgICAgICAgRXllU3RhdGVfT3BlbmluZyAgICAvLyDjgb7jgbbjgZ/jgYzplovjgYTjgabjgYTjgY/pgJTkuK3jga7nirbmhYtcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwOi8vbGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWR9IGZyb20gXCIuLi9pZC9jdWJpc21pZFwiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3J9IGZyb20gXCIuLi90eXBlL2NzbXZlY3RvclwiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbH0gZnJvbSBcIi4uL21vZGVsL2N1YmlzbW1vZGVsXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29ya30gZnJvbSBcIi4uL2xpdmUyZGN1YmlzbWZyYW1ld29ya1wiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21qc29ufSBmcm9tIFwiLi4vdXRpbHMvY3ViaXNtanNvblwiO1xyXG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcclxuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XHJcbmltcG9ydCBpdGVyYXRvciA9IGNzbXZlY3Rvci5pdGVyYXRvcjtcclxuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XHJcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBjdWJpc21mcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xyXG5pbXBvcnQgQ3ViaXNtSnNvbiA9IGN1YmlzbWpzb24uQ3ViaXNtSnNvbjtcclxuaW1wb3J0IFZhbHVlID0gY3ViaXNtanNvbi5WYWx1ZTtcclxuXHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29ya1xyXG57XHJcbiAgICBjb25zdCBFcHNpbG9uOiBudW1iZXIgPSAwLjAwMTtcclxuICAgIGNvbnN0IERlZmF1bHRGYWRlSW5TZWNvbmRzOiBudW1iZXIgPSAwLjU7XHJcbiAgICBcclxuICAgIC8vIFBvc2UuanNvbuOBruOCv+OCsFxyXG4gICAgY29uc3QgRmFkZUluOiBzdHJpbmcgPSBcIkZhZGVJblRpbWVcIjtcclxuICAgIGNvbnN0IExpbms6IHN0cmluZyA9IFwiTGlua1wiO1xyXG4gICAgY29uc3QgR3JvdXBzOiBzdHJpbmcgPSBcIkdyb3Vwc1wiO1xyXG4gICAgY29uc3QgSWQ6IHN0cmluZyA9IFwiSWRcIjtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7oqK3lrppcclxuICAgICAqIFxyXG4gICAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu566h55CG44Go6Kit5a6a44KS6KGM44GG44CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBDdWJpc21Qb3NlXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kk44Oz44K544K/44Oz44K544Gu5L2c5oiQXHJcbiAgICAgICAgICogQHBhcmFtIHBvc2UzanNvbiBwb3NlMy5qc29u44Gu44OH44O844K/XHJcbiAgICAgICAgICogQHBhcmFtIHNpemUgcG9zZTMuanNvbuOBruODh+ODvOOCv+OBruOCteOCpOOCultieXRlXVxyXG4gICAgICAgICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUocG9zZTNqc29uOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogQ3ViaXNtUG9zZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHJldDogQ3ViaXNtUG9zZSA9IG5ldyBDdWJpc21Qb3NlKCk7XHJcbiAgICAgICAgICAgIGxldCBqc29uOiBDdWJpc21Kc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUocG9zZTNqc29uLCBzaXplKTtcclxuICAgICAgICAgICAgbGV0IHJvb3Q6IFZhbHVlID0ganNvbi5nZXRSb290KCk7XHJcblxyXG4gICAgICAgICAgICAvLyDjg5Xjgqfjg7zjg4nmmYLplpPjga7mjIflrppcclxuICAgICAgICAgICAgaWYocm9vdC5nZXRNYXAoKS5pc0V4aXN0KEZhZGVJbikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldC5fZmFkZVRpbWVTZWNvbmRzID0gcm9vdC5nZXRNYXAoKS5nZXRWYWx1ZShGYWRlSW4pLnRvRmxvYXQoRGVmYXVsdEZhZGVJblNlY29uZHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHJldC5fZmFkZVRpbWVTZWNvbmRzIDw9IDAuMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXQuX2ZhZGVUaW1lU2Vjb25kcyA9IERlZmF1bHRGYWRlSW5TZWNvbmRzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDjg5Hjg7zjg4TjgrDjg6vjg7zjg5dcclxuICAgICAgICAgICAgbGV0IHBvc2VMaXN0SW5mbzogVmFsdWUgPSByb290LmdldE1hcCgpLmdldFZhbHVlKEdyb3Vwcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvc2VDb3VudDogbnVtYmVyID0gcG9zZUxpc3RJbmZvLmdldFNpemUoKTtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgcG9zZUluZGV4OiBudW1iZXIgPSAwOyBwb3NlSW5kZXggPCBwb3NlQ291bnQ7ICsrcG9zZUluZGV4KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaWRMaXN0SW5mbzogVmFsdWUgPSBwb3NlTGlzdEluZm8uZ2V0VmVjdG9yKCkuYXQocG9zZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkQ291bnQ6IG51bWJlciA9IGlkTGlzdEluZm8uZ2V0U2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGdyb3VwQ291bnQ6IG51bWJlciA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBncm91cEluZGV4OiBudW1iZXIgPSAwOyBncm91cEluZGV4IDwgaWRDb3VudDsgKytncm91cEluZGV4KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXJ0SW5mbzogVmFsdWUgPSBpZExpc3RJbmZvLmdldFZlY3RvcigpLmF0KGdyb3VwSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXJ0RGF0YTogUGFydERhdGEgPSBuZXcgUGFydERhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQocGFydEluZm8uZ2V0TWFwKCkuZ2V0VmFsdWUoSWQpLmdldFJhd1N0cmluZygpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFydERhdGEucGFydElkID0gcGFyYW1ldGVySWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOODquODs+OCr+OBmeOCi+ODkeODvOODhOOBruioreWumlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHBhcnRJbmZvLmdldE1hcCgpLmlzRXhpc3QoTGluaykpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlua0xpc3RJbmZvOiBWYWx1ZSA9IHBhcnRJbmZvLmdldE1hcCgpLmdldFZhbHVlKExpbmspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5rQ291bnQ6IG51bWJlciA9IGxpbmtMaXN0SW5mby5nZXRTaXplKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGxpbmtJbmRleDogbnVtYmVyID0gMDsgbGlua0luZGV4IDwgbGlua0NvdW50OyArK2xpbmtJbmRleClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmtQYXJ0OiBQYXJ0RGF0YSA9IG5ldyBQYXJ0RGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlua0lkOiBDdWJpc21JZEhhbmRsZSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChsaW5rTGlzdEluZm8uZ2V0VmVjdG9yKCkuYXQobGlua0luZGV4KS5nZXRTdHJpbmcoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua1BhcnQucGFydElkID0gbGlua0lkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnREYXRhLmxpbmsucHVzaEJhY2sobGlua1BhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXQuX3BhcnRHcm91cHMucHVzaEJhY2socGFydERhdGEuY2xvbmUoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICsrZ3JvdXBDb3VudDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXQuX3BhcnRHcm91cENvdW50cy5wdXNoQmFjayhncm91cENvdW50KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQ3ViaXNtSnNvbi5kZWxldGUoanNvbik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kk44Oz44K544K/44Oz44K544KS56C05qOE44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIHBvc2Ug5a++6LGh44GuQ3ViaXNtUG9zZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKHBvc2U6IEN1YmlzbVBvc2UpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihwb3NlICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBvc2UgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrBcclxuICAgICAgICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXHJcbiAgICAgICAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgdXBkYXRlUGFyYW1ldGVycyhtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIOWJjeWbnuOBruODouODh+ODq+OBqOWQjOOBmOOBp+OBquOBhOWgtOWQiOOBr+WIneacn+WMluOBjOW/heimgVxyXG4gICAgICAgICAgICBpZihtb2RlbCAhPSB0aGlzLl9sYXN0TW9kZWwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIOODkeODqeODoeODvOOCv+OCpOODs+ODh+ODg+OCr+OCueOBruWIneacn+WMllxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldChtb2RlbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3RNb2RlbCA9IG1vZGVsO1xyXG5cclxuICAgICAgICAgICAgLy8g6Kit5a6a44GL44KJ5pmC6ZaT44KS5aSJ5pu044GZ44KL44Go44CB57WM6YGO5pmC6ZaT44GM44Oe44Kk44OK44K544Gr44Gq44KL5LqL44GM44GC44KL44Gu44Gn44CB57WM6YGO5pmC6ZaTMOOBqOOBl+OBpuWvvuW/nFxyXG4gICAgICAgICAgICBpZihkZWx0YVRpbWVTZWNvbmRzIDwgMC4wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkZWx0YVRpbWVTZWNvbmRzID0gMC4wO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgYmVnaW5JbmRleDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuZ2V0U2l6ZSgpOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRHcm91cENvdW50OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuYXQoaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5kb0ZhZGUobW9kZWwsIGRlbHRhVGltZVNlY29uZHMsIGJlZ2luSW5kZXgsIHBhcnRHcm91cENvdW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICBiZWdpbkluZGV4ICs9IHBhcnRHcm91cENvdW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvcHlQYXJ0T3BhY2l0aWVzKG1vZGVsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOihqOekuuOCkuWIneacn+WMllxyXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcclxuICAgICAgICAgKiBAbm90ZSDkuI3pgI/mmI7luqbjga7liJ3mnJ/lgKTjgYww44Gn44Gq44GE44OR44Op44Oh44O844K/44Gv44CB5LiN6YCP5piO5bqm44KS77yR44Gr6Kit5a6a44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJlc2V0KG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBiZWdpbkluZGV4OiBudW1iZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fcGFydEdyb3VwQ291bnRzLmdldFNpemUoKTsgKytpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBncm91cENvdW50OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBDb3VudHMuYXQoaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBqOiBudW1iZXIgPSBiZWdpbkluZGV4OyBqIDwgYmVnaW5JbmRleCArIGdyb3VwQ291bnQ7ICsrailcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLmluaXRpYWxpemUobW9kZWwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0c0luZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLnBhcnRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbUluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLnBhcmFtZXRlckluZGV4O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihwYXJ0c0luZGV4IDwgMClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgsIChqID09IGJlZ2luSW5kZXggPyAxLjAgOiAwLjApKTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1JbmRleCwgKGogPT0gYmVnaW5JbmRleCA/IDEuMDogMC4wKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgazogbnVtYmVyID0gMDsgayA8IHRoaXMuX3BhcnRHcm91cHMuYXQoaikubGluay5nZXRTaXplKCk7ICsraylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhcnRHcm91cHMuYXQoaikubGluay5hdChrKS5pbml0aWFsaXplKG1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYmVnaW5JbmRleCArPSBncm91cENvdW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjgpLjgrPjg5Tjg7xcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvcHlQYXJ0T3BhY2l0aWVzKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgZ3JvdXBJbmRleDogbnVtYmVyID0gMDsgZ3JvdXBJbmRleCA8IHRoaXMuX3BhcnRHcm91cHMuZ2V0U2l6ZSgpOyArK2dyb3VwSW5kZXgpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCBwYXJ0RGF0YTogUGFydERhdGEgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGdyb3VwSW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHBhcnREYXRhLmxpbmsuZ2V0U2l6ZSgpID09IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7ICAgLy8g6YCj5YuV44GZ44KL44OR44Op44Oh44O844K/44Gv44Gq44GEXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFydEluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGdyb3VwSW5kZXgpLnBhcnRJbmRleDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wYWNpdHk6IG51bWJlciA9IG1vZGVsLmdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcihsZXQgbGlua0luZGV4OiBudW1iZXIgPSAwOyBsaW5rSW5kZXggPCBwYXJ0RGF0YS5saW5rLmdldFNpemUoKTsgKytsaW5rSW5kZXgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmtQYXJ0OiBQYXJ0RGF0YSA9IHBhcnREYXRhLmxpbmsuYXQobGlua0luZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5rUGFydEluZGV4OiBudW1iZXIgPSBsaW5rUGFydC5wYXJ0SW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGxpbmtQYXJ0SW5kZXggPCAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgobGlua1BhcnRJbmRleCwgb3BhY2l0eSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODkeODvOODhOOBruODleOCp+ODvOODieaTjeS9nOOCkuihjOOBhuOAglxyXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcclxuICAgICAgICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxyXG4gICAgICAgICAqIEBwYXJhbSBiZWdpbkluZGV4IOODleOCp+ODvOODieaTjeS9nOOCkuihjOOBhuODkeODvOODhOOCsOODq+ODvOODl+OBruWFiOmgreOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEBwYXJhbSBwYXJ0R3JvdXBDb3VudCDjg5Xjgqfjg7zjg4nmk43kvZzjgpLooYzjgYbjg5Hjg7zjg4TjgrDjg6vjg7zjg5fjga7lgIvmlbBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZG9GYWRlKG1vZGVsOiBDdWJpc21Nb2RlbCwgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyLCBiZWdpbkluZGV4OiBudW1iZXIsIHBhcnRHcm91cENvdW50OiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgdmlzaWJsZVBhcnRJbmRleDogbnVtYmVyID0gLTE7XHJcbiAgICAgICAgICAgIGxldCBuZXdPcGFjaXR5OiBudW1iZXIgPSAxLjA7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwaGk6IG51bWJlciA9IDAuNTtcclxuICAgICAgICAgICAgY29uc3QgYmFja09wYWNpdHlUaHJlc2hvbGQ6IG51bWJlciA9IDAuMTU7XHJcblxyXG4gICAgICAgICAgICAvLyDnj77lnKjjgIHooajnpLrnirbmhYvjgavjgarjgaPjgabjgYTjgovjg5Hjg7zjg4TjgpLlj5blvpdcclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSBiZWdpbkluZGV4OyBpIDwgYmVnaW5JbmRleCArIHBhcnRHcm91cENvdW50OyArK2kpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChpKS5wYXJ0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbUluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGkpLnBhcmFtZXRlckluZGV4O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbUluZGV4KSA+IEVwc2lsb24pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodmlzaWJsZVBhcnRJbmRleCA+PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlUGFydEluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdPcGFjaXR5ID0gbW9kZWwuZ2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRJbmRleCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOaWsOOBl+OBhOS4jemAj+aYjuW6puOCkuioiOeul1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld09wYWNpdHkgKz0gKGRlbHRhVGltZVNlY29uZHMgLyB0aGlzLl9mYWRlVGltZVNlY29uZHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihuZXdPcGFjaXR5ID4gMS4wKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3T3BhY2l0eSA9IDEuMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHZpc2libGVQYXJ0SW5kZXggPCAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2aXNpYmxlUGFydEluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIG5ld09wYWNpdHkgPSAxLjA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOihqOekuuODkeODvOODhOOAgemdnuihqOekuuODkeODvOODhOOBruS4jemAj+aYjuW6puOCkuioreWumuOBmeOCi1xyXG4gICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IGJlZ2luSW5kZXg7IGkgPCBiZWdpbkluZGV4ICsgcGFydEdyb3VwQ291bnQ7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFydHNJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChpKS5wYXJ0SW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g6KGo56S644OR44O844OE44Gu6Kit5a6aXHJcbiAgICAgICAgICAgICAgICBpZih2aXNpYmxlUGFydEluZGV4ID09IGkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgsIG5ld09wYWNpdHkpOyAgIC8vIOWFiOOBq+ioreWumlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g6Z2e6KGo56S644OR44O844OE44Gu6Kit5a6aXHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9wYWNpdHk6IG51bWJlciA9IG1vZGVsLmdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0c0luZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYTE6IG51bWJlcjsgLy8g6KiI566X44Gr44KI44Gj44Gm5rGC44KB44KJ44KM44KL5LiN6YCP5piO5bqmXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKG5ld09wYWNpdHkgPCBwaGkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhMSA9IG5ld09wYWNpdHkgKiAocGhpIC0gMSkgLyBwaGkgKyAxLjA7ICAgIC8vICgwLDEpLChwaGkscGhpKeOCkumAmuOCi+ebtOe3muW8j1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhMSA9ICgxIC0gbmV3T3BhY2l0eSkgKiBwaGkgLyAoMS4wIC0gcGhpKTsgIC8vICgxLDApLChwaGkscGhpKeOCkumAmuOCi+ebtOe3muW8j1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6IOM5pmv44Gu6KaL44GI44KL5Ymy5ZCI44KS5Yi26ZmQ44GZ44KL5aC05ZCIXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFja09wYWNpdHk6IG51bWJlciA9ICgxLjAgLSBhMSkgKiAoMS4wIC0gbmV3T3BhY2l0eSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGJhY2tPcGFjaXR5ID4gYmFja09wYWNpdHlUaHJlc2hvbGQpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhMSA9IDEuMCAtIGJhY2tPcGFjaXR5VGhyZXNob2xkIC8gKDEuMCAtIG5ld09wYWNpdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYob3BhY2l0eSA+IGExKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eSA9IGExOyAgIC8vIOioiOeul+OBruS4jemAj+aYjuW6puOCiOOCiuOCguWkp+OBjeOBkeOCjOOBsO+8iOa/g+OBkeOCjOOBsO+8ieS4jemAj+aYjuW6puOCkuS4iuOBkuOCi1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgsIG9wYWNpdHkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fZmFkZVRpbWVTZWNvbmRzID0gRGVmYXVsdEZhZGVJblNlY29uZHM7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3RNb2RlbCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcnRHcm91cHMgPSBuZXcgY3NtVmVjdG9yPFBhcnREYXRhPigpO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJ0R3JvdXBDb3VudHMgPSBuZXcgY3NtVmVjdG9yPG51bWJlcj4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF9wYXJ0R3JvdXBzOiBjc21WZWN0b3I8UGFydERhdGE+OyAvLyDjg5Hjg7zjg4TjgrDjg6vjg7zjg5dcclxuICAgICAgICBfcGFydEdyb3VwQ291bnRzOiBjc21WZWN0b3I8bnVtYmVyPjsgICAgICAgICAvLyDjgZ3jgozjgZ7jgozjga7jg5Hjg7zjg4TjgrDjg6vjg7zjg5fjga7lgIvmlbBcclxuICAgICAgICBfZmFkZVRpbWVTZWNvbmRzOiBudW1iZXI7ICAgICAgICAgICAvLyDjg5Xjgqfjg7zjg4nmmYLplpNb56eSXVxyXG4gICAgICAgIF9sYXN0TW9kZWw6IEN1YmlzbU1vZGVsOyAgICAgICAgICAgIC8vIOWJjeWbnuaTjeS9nOOBl+OBn+ODouODh+ODq1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OR44O844OE44Gr44G+44Gk44KP44KL44OH44O844K/44KS566h55CGXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBQYXJ0RGF0YVxyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHY/OiBQYXJ0RGF0YSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVySW5kZXggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnBhcnRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMubGluayA9IG5ldyBjc21WZWN0b3I8UGFydERhdGE+KCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZih2ICE9IHVuZGVmaW5lZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJ0SWQgPSB2LnBhcnRJZDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IoY29uc3QgaXRlOiBpdGVyYXRvcjxQYXJ0RGF0YT4gPSB2LmxpbmsuYmVnaW4oKTsgaXRlLm5vdEVxdWFsKHYubGluay5lbmQoKSk7IGl0ZS5wcmVJbmNyZW1lbnQoKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmsucHVzaEJhY2soaXRlLnB0cigpLmNsb25lKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiA95ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFzc2lnbm1lbnQodjogUGFydERhdGEpOiBQYXJ0RGF0YVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJ0SWQgPSB2LnBhcnRJZDtcclxuXHJcbiAgICAgICAgICAgIGZvcihjb25zdCBpdGU6IGl0ZXJhdG9yPFBhcnREYXRhPiA9IHYubGluay5iZWdpbigpOyBpdGUubm90RXF1YWwodi5saW5rLmVuZCgpKTsgaXRlLnByZUluY3JlbWVudCgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmsucHVzaEJhY2soaXRlLnB0cigpLmNsb25lKCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneacn+WMllxyXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCDliJ3mnJ/ljJbjgavkvb/nlKjjgZnjgovjg6Ljg4fjg6tcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaW5pdGlhbGl6ZShtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgodGhpcy5wYXJ0SWQpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcnRJbmRleCA9IG1vZGVsLmdldFBhcnRJbmRleCh0aGlzLnBhcnRJZCk7XHJcblxyXG4gICAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgodGhpcy5wYXJhbWV0ZXJJbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqrjg5bjgrjjgqfjgq/jg4jjga7jgrPjg5Tjg7zjgpLnlJ/miJDjgZnjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY2xvbmUoKTogUGFydERhdGFcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBjbG9uZVBhcnREYXRhOiBQYXJ0RGF0YSA9IG5ldyBQYXJ0RGF0YSgpO1xyXG5cclxuICAgICAgICAgICAgY2xvbmVQYXJ0RGF0YS5wYXJ0SWQgPSB0aGlzLnBhcnRJZDtcclxuICAgICAgICAgICAgY2xvbmVQYXJ0RGF0YS5wYXJhbWV0ZXJJbmRleCA9IHRoaXMucGFyYW1ldGVySW5kZXg7XHJcbiAgICAgICAgICAgIGNsb25lUGFydERhdGEucGFydEluZGV4ID0gdGhpcy5wYXJ0SW5kZXg7XHJcbiAgICAgICAgICAgIGNsb25lUGFydERhdGEubGluayA9IG5ldyBjc21WZWN0b3I8UGFydERhdGE+KCk7XHJcblxyXG4gICAgICAgICAgICBmb3IobGV0IGl0ZTogaXRlcmF0b3I8UGFydERhdGE+ID0gdGhpcy5saW5rLmJlZ2luKCk7IGl0ZS5ub3RFcXVhbCh0aGlzLmxpbmsuZW5kKCkpOyBpdGUuaW5jcmVtZW50KCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNsb25lUGFydERhdGEubGluay5wdXNoQmFjayhpdGUucHRyKCkuY2xvbmUoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjbG9uZVBhcnREYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlOyAgIC8vIOODkeODvOODhElEXHJcbiAgICAgICAgcGFyYW1ldGVySW5kZXg6IG51bWJlcjsgLy8g44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgcGFydEluZGV4OiBudW1iZXI7ICAvLyDjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICBsaW5rOiBjc21WZWN0b3I8UGFydERhdGE+OyAgIC8vIOmAo+WLleOBmeOCi+ODkeODqeODoeODvOOCv1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZH0gZnJvbSAnLi9pZC9jdWJpc21pZCc7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbW1hcH0gZnJvbSAnLi90eXBlL2NzbW1hcCc7XHJcbmltcG9ydCBjc21NYXAgPSBjc21tYXAuY3NtTWFwO1xyXG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8qKlxyXG4gICAgICog44Oi44OH44Or6Kit5a6a5oOF5aCx44KS5Y+W44KK5omx44GG6Zai5pWw44KS5a6j6KiA44GX44Gf57SU57KL5Luu5oOz44Kv44Op44K544CCXHJcbiAgICAgKlxyXG4gICAgICog44GT44Gu44Kv44Op44K544KS57aZ5om/44GZ44KL44GT44Go44Gn44CB44Oi44OH44Or6Kit5a6a5oOF5aCx44KS5Y+W44KK5omx44GG44Kv44Op44K544Gr44Gq44KL44CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJQ3ViaXNtTW9kZWxTZXR0aW5nXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTW9j44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW9kZWxGaWxlTmFtZSgpOiBzdHJpbmc7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODh+ODq+OBjOS9v+eUqOOBmeOCi+ODhuOCr+OCueODgeODo+OBruaVsOOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIOODhuOCr+OCueODgeODo+OBruaVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRUZXh0dXJlQ291bnQoKTogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4bjgq/jgrnjg4Hjg6PjgYzphY3nva7jgZXjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6rjga7lkI3liY3jgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRUZXh0dXJlRGlyZWN0b3J5KCk6IHN0cmluZztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAgICAgICAqIEByZXR1cm4g44OG44Kv44K544OB44Oj44Gu5ZCN5YmNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldFRleHR1cmVGaWxlTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/lvZPjgZ/jgorliKTlrprjga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+W9k+OBn+OCiuWIpOWumuOBruaVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRIaXRBcmVhc0NvdW50KCk6IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44GfSUTjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44GuaW5kZXhcclxuICAgICAgICAgKiBAcmV0dXJuIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn0lEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldEhpdEFyZWFJZChpbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGU7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn+WQjeWJjeOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn+WQjeWJjVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRIaXRBcmVhTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDniannkIbmvJTnrpfoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRQaHlzaWNzRmlsZU5hbWUoKTogc3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg7zjg4TliIfjgormm7/jgYjoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIOODkeODvOODhOWIh+OCiuabv+OBiOioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRQb3NlRmlsZU5hbWUoKTogc3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIOihqOaDheioreWumuODleOCoeOCpOODq+OBruaVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRFeHByZXNzaW9uQ291bnQoKTogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjgpLorZjliKXjgZnjgovlkI3liY3vvIjliKXlkI3vvInjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICAgICAgICogQHJldHVybiDooajmg4Xjga7lkI3liY1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXhwcmVzc2lvbk5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAgICAgICAqIEByZXR1cm4g6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldEV4cHJlc3Npb25GaWxlTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25Hcm91cENvdW50KCk6IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAgICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkdyb3VwTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjgavlkKvjgb7jgozjgovjg6Ljg7zjgrfjg6fjg7Pjga7mlbDjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxyXG4gICAgICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkNvdW50KGdyb3VwTmFtZTogc3RyaW5nKTogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrDjg6vjg7zjg5flkI3jgajjgqTjg7Pjg4fjg4Pjgq/jgrnlgKTjgYvjgonjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vlkI3jgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCAgICAg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICAgICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vjga7lkI3liY1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uRmlsZU5hbWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBq+WvvuW/nOOBmeOCi+OCteOCpuODs+ODieODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXHJcbiAgICAgICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAgICAgICAqIEByZXR1cm4g44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu5ZCN5YmNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvblNvdW5kRmlsZU5hbWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+mWi+Wni+aZguOBruODleOCp+ODvOODieOCpOODs+WHpueQhuaZgumWk+OCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXHJcbiAgICAgICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAgICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz5Yem55CG5pmC6ZaTW+enkl1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uRmFkZUluVGltZVZhbHVlKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7PntYLkuobmmYLjga7jg5Xjgqfjg7zjg4njgqLjgqbjg4jlh6bnkIbmmYLplpPjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOWHpueQhuaZgumWk1vnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkZhZGVPdXRUaW1lVmFsdWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldFVzZXJEYXRhRmlsZSgpOiBzdHJpbmc7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODrOOCpOOCouOCpuODiOaDheWgseOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBvdXRMYXlvdXRNYXAgY3NtTWFw44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XHJcbiAgICAgICAgICogQHJldHVybiB0cnVlIOODrOOCpOOCouOCpuODiOaDheWgseOBjOWtmOWcqOOBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2Ug44Os44Kk44Ki44Km44OI5oOF5aCx44GM5a2Y5Zyo44GX44Gq44GEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldExheW91dE1hcChvdXRMYXlvdXRNYXA6IGNzbU1hcDxzdHJpbmcsIG51bWJlcj4pOiBib29sZWFuO1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiDnm67jg5Hjg4HjgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBrklE44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAgICAgICAqIEByZXR1cm4g44OR44Op44Oh44O844K/SURcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXllQmxpbmtQYXJhbWV0ZXJJZChpbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGU7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODquODg+ODl+OCt+ODs+OCr+OBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4g44Oq44OD44OX44K344Oz44Kv44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldExpcFN5bmNQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODquODg+ODl+OCt+ODs+OCr+OBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGdldExpcFN5bmNQYXJhbWV0ZXJJZChpbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGU7XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZ30gZnJvbSBcIi4uL3R5cGUvY3Ntc3RyaW5nXCI7XHJcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmtcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/lkI3jg7vjg5Hjg7zjg4TlkI3jg7tEcmF3YWJsZeWQjeOCkuS/neaMgVxyXG4gICAgICogXHJcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/lkI3jg7vjg5Hjg7zjg4TlkI3jg7tEcmF3YWJsZeWQjeOCkuS/neaMgeOBmeOCi+OCr+ODqeOCueOAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtSWRcclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJROWQjeOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRTdHJpbmcoKTogY3NtU3RyaW5nXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihpZDogc3RyaW5nIHwgY3NtU3RyaW5nKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYodHlwZW9mKGlkKSA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lkID0gbmV3IGNzbVN0cmluZyhpZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBpZOOCkuavlOi8g1xyXG4gICAgICAgICAqIEBwYXJhbSBjIOavlOi8g+OBmeOCi2lkXHJcbiAgICAgICAgICogQHJldHVybiDlkIzjgZjjgarjgonjgbB0cnVlLOeVsOOBquOBo+OBpuOBhOOCjOOBsGZhbHNl44KS6L+U44GZXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzRXF1YWwoYzogc3RyaW5nIHwgY3NtU3RyaW5nIHwgQ3ViaXNtSWQpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mKGMpID09PSAnc3RyaW5nJylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYyBpbnN0YW5jZW9mIGNzbVN0cmluZylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYy5zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjIGluc3RhbmNlb2YgQ3ViaXNtSWQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pZC5pc0VxdWFsKGMuX2lkLnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGlk44KS5q+U6LyDXHJcbiAgICAgICAgICogQHBhcmFtIGMg5q+U6LyD44GZ44KLaWRcclxuICAgICAgICAgKiBAcmV0dXJuIOWQjOOBmOOBquOCieOBsHRydWUs55Ww44Gq44Gj44Gm44GE44KM44GwZmFsc2XjgpLov5TjgZlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNOb3RFcXVhbChjOiBzdHJpbmcgfCBjc21TdHJpbmcgfCBDdWJpc21JZCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YoYykgPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjIGluc3RhbmNlb2YgY3NtU3RyaW5nKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYy5zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjIGluc3RhbmNlb2YgQ3ViaXNtSWQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjLl9pZC5zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIF9pZDogY3NtU3RyaW5nOyAvLyBJROWQjVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBkZWNsYXJlIHR5cGUgQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21JZDtcclxufSIsIi8qXHJcbiogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbipcclxuKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4qIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuKi9cclxuXHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3Rvcn0gZnJvbSBcIi4uL3R5cGUvY3NtdmVjdG9yXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkfSBmcm9tIFwiLi9jdWJpc21pZFwiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmd9IGZyb20gXCIuLi90eXBlL2NzbXN0cmluZ1wiO1xyXG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcclxuaW1wb3J0IEN1YmlzbUlkID0gY3ViaXNtaWQuQ3ViaXNtSWQ7XHJcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmtcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBJROWQjeOBrueuoeeQhlxyXG4gICAgICogXHJcbiAgICAgKiBJROWQjeOCkueuoeeQhuOBmeOCi+OAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtSWRNYW5hZ2VyXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWQ+KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLl9pZHMuZ2V0U2l6ZSgpOyArK2kpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lkcy5zZXQoaSwgdm9pZCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9pZHMgPSAgbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSUTlkI3jgpLjg6rjgrnjg4jjgYvjgonnmbvpjLJcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gaWRzIElE5ZCN44Oq44K544OIXHJcbiAgICAgICAgICogQHBhcmFtIGNvdW50IElE44Gu5YCL5pWwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJlZ2lzdGVySWRzKGlkczogc3RyaW5nW10gfCBjc21TdHJpbmdbXSk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaTogbnVtYmVyID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpc3RlcklkKGlkc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElE5ZCN44KS55m76YyyXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGlkIElE5ZCNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJlZ2lzdGVySWQoaWQ6IHN0cmluZyB8IGNzbVN0cmluZyk6IEN1YmlzbUlkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OiBDdWJpc21JZCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mKGlkKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKChyZXN1bHQgPSB0aGlzLmZpbmRJZChpZCkpICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgQ3ViaXNtSWQoaWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faWRzLnB1c2hCYWNrKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlcklkKGlkLnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSUTlkI3jgYvjgolJROOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBpZCBJROWQjVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRJZChpZDogY3NtU3RyaW5nIHwgc3RyaW5nKTogQ3ViaXNtSWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVySWQoaWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSUTlkI3jgYvjgolJROOBrueiuuiqjVxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc0V4aXN0KGlkOiBjc21TdHJpbmcgfCBzdHJpbmcpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mKGlkKSkgXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5maW5kSWQoaWQpICE9IG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzRXhpc3QoaWQucyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJROWQjeOBi+OCiUlE44KS5qSc57Si44GZ44KL44CCXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGlkIElE5ZCNXHJcbiAgICAgICAgICogQHJldHVybiDnmbvpjLLjgZXjgozjgabjgYTjgotJROOAguOBquOBkeOCjOOBsE5VTEzjgIJcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIGZpbmRJZChpZDogc3RyaW5nKTogQ3ViaXNtSWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaTogbnVtYmVyID0gMDsgaSA8IHRoaXMuX2lkcy5nZXRTaXplKCk7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5faWRzLmF0KGkpLmdldFN0cmluZygpLmlzRXF1YWwoaWQpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pZHMuYXQoaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfaWRzOiBjc21WZWN0b3I8Q3ViaXNtSWQ+OyAgIC8vIOeZu+mMsuOBleOCjOOBpuOBhOOCi0lE44Gu44Oq44K544OIXHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWpzb259IGZyb20gXCIuL3V0aWxzL2N1YmlzbWpzb25cIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWRtYW5hZ2VyfSBmcm9tIFwiLi9pZC9jdWJpc21pZG1hbmFnZXJcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtcmVuZGVyZXJ9IGZyb20gXCIuL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlclwiO1xyXG5pbXBvcnQge0N1YmlzbUxvZ0luZm8sIEN1YmlzbUxvZ1dhcm5pbmcsIENTTV9BU1NFUlR9IGZyb20gXCIuL3V0aWxzL2N1YmlzbWRlYnVnXCI7XHJcbmltcG9ydCBWYWx1ZSA9IGN1YmlzbWpzb24uVmFsdWU7XHJcbmltcG9ydCBDdWJpc21JZE1hbmFnZXIgPSBjdWJpc21pZG1hbmFnZXIuQ3ViaXNtSWRNYW5hZ2VyO1xyXG5pbXBvcnQgQ3ViaXNtUmVuZGVyZXIgPSBjdWJpc21yZW5kZXJlci5DdWJpc21SZW5kZXJlcjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJ0b2Qoczogc3RyaW5nLCBlbmRQdHI6IHN0cmluZ1tdKTogbnVtYmVyXHJcbntcclxuICAgIGxldCBpbmRleDogbnVtYmVyID0gMDtcclxuICAgIGZvcihsZXQgaTogbnVtYmVyID0gMTsgOyBpKyspXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHRlc3RDOiBzdHJpbmcgPSBzLnNsaWNlKGkgLSAxLCBpKTtcclxuXHJcbiAgICAgICAgLy8g5oyH5pWw44O744Oe44Kk44OK44K544Gu5Y+v6IO95oCn44GM44GC44KL44Gu44Gn44K544Kt44OD44OX44GZ44KLXHJcbiAgICAgICAgaWYodGVzdEM9PSdlJyB8fCB0ZXN0Qz09Jy0nIHx8IHRlc3RDID09ICdFJylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbuOAgOOAgOOAgCAgLy8g5paH5a2X5YiX44Gu56+E5Zuy44KS5bqD44GS44Gm44GE44GPXHJcbiAgICAgICAgbGV0IHRlc3Q6IHN0cmluZyA9IHMuc3Vic3RyaW5nKDAsIGkpO1xyXG4gICAgICAgIGxldCBudW1iZXI6IG51bWJlciA9IE51bWJlcih0ZXN0KTtcclxuICAgICAgICBpZihpc05hTihudW1iZXIpKVxyXG4gICAgICAgIHtcclxu44CA44CA44CA44CAICAgIC8vIOaVsOWApOOBqOOBl+OBpuiqjeitmOOBp+OBjeOBquOBj+OBquOBo+OBn+OBruOBp+e1guS6hlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG7jgIDjgIDjgIAgLy8g5pyA5b6M44Gr5pWw5YCk44Go44GX44Gm44Gn44GN44GfaW5kZXjjgpLmoLzntI3jgZfjgabjgYrjgY9cclxuICAgICAgICBpbmRleCA9IGk7XHJcbiAgICB9XHJcbiAgICBsZXQgZCA9IHBhcnNlRmxvYXQocyk7ICAvLyDjg5Hjg7zjgrnjgZfjgZ/mlbDlgKRcclxuXHJcbiAgICBpZihpc05hTihkKSlcclxuICAgIHtcclxu44CA44CA44CA44CAIC8vIOaVsOWApOOBqOOBl+OBpuiqjeitmOOBp+OBjeOBquOBj+OBquOBo+OBn+OBruOBp+e1guS6hlxyXG4gICAgICAgIGQgPSBOYU47XHJcbiAgICB9XHJcblxyXG4gICAgZW5kUHRyWzBdID0gcy5zbGljZShpbmRleCk744CALy8g5b6M57aa44Gu5paH5a2X5YiXXHJcblxyXG4gICAgcmV0dXJuIGQ7XHJcbn1cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8vIOODleOCoeOCpOODq+OCueOCs+ODvOODl+OBruWkieaVsOOCkuWIneacn+WMllxyXG4gICAgXHJcbiAgICBsZXQgc19pc1N0YXJ0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGxldCBzX2lzSW5pdGlhbGl6ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGxldCBzX29wdGlvbjogT3B0aW9uID0gbnVsbDtcclxuICAgIGxldCBzX2N1YmlzbUlkTWFuYWdlcjogQ3ViaXNtSWRNYW5hZ2VyID0gbnVsbDtcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBGcmFtZXdvcmvlhoXjgafkvb/jgYblrprmlbDjga7lrqPoqIBcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBDb25zdGFudFxyXG4gICAge1xyXG4gICAgICAgIGV4cG9ydCBjb25zdCB2ZXJ0ZXhPZmZzZXQ6IG51bWJlciA9IDA7ICAgICAvLyDjg6Hjg4Pjgrfjg6XpoILngrnjga7jgqrjg5Xjgrvjg4Pjg4jlgKRcclxuICAgICAgICBleHBvcnQgY29uc3QgdmVydGV4U3RlcDogbnVtYmVyID0gMjsgICAgICAgLy8g44Oh44OD44K344Ol6aCC54K544Gu44K544OG44OD44OX5YCkXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNzbURlbGV0ZTxUPihhZGRyZXNzOiBUKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIGlmKCFhZGRyZXNzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkcmVzcyA9IHZvaWQgMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExpdmUyRCBDdWJpc20zIE9yaWdpbmFsIFdvcmtmbG93IFNES+OBruOCqOODs+ODiOODquODneOCpOODs+ODiFxyXG4gICAgICog5Yip55So6ZaL5aeL5pmC44GvQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKeOCkuWRvOOBs+OAgUN1YmlzbUZyYW1ld29yay5kaXNwb3NlKCnjgafntYLkuobjgZnjgovjgIJcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbUZyYW1ld29ya1xyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBicmllZiAgICBDdWJpc20gRnJhbWV3b3Jr44GuQVBJ44KS5L2/55So5Y+v6IO944Gr44GZ44KL44CCPGJyPlxyXG4gICAgICAgICAqICAgICAgICAgICAgQVBJ44KS5a6f6KGM44GZ44KL5YmN44Gr5b+F44Ga44GT44Gu6Zai5pWw44KS5a6f6KGM44GZ44KL44GT44Go44CCPGJyPlxyXG4gICAgICAgICAqICAgICAgICAgICAg5byV5pWw44Gr5b+F44Ga44Oh44Oi44Oq44Ki44Ot44Kx44O844K/44KS5rih44GX44Gm44GP44Gg44GV44GE44CCPGJyPlxyXG4gICAgICAgICAqICAgICAgICAgICAg5LiA5bqm5rqW5YKZ44GM5a6M5LqG44GX44Gm5Lul6ZmN44Gv44CB5YaN44Gz5a6f6KGM44GX44Gm44KC5YaF6YOo5Yem55CG44GM44K544Kt44OD44OX44GV44KM44G+44GZ44CCXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gICAgYWxsb2NhdG9yICAgSUN1YmlzbUFsbG9jYXRvcuOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxyXG4gICAgICAgICAqIEBwYXJhbSAgICBvcHRpb24gICAgICBPcHRpb27jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZXR1cm4gICDmupblgpnlh6bnkIbjgYzlrozkuobjgZfjgZ/jgol0cnVl44GM6L+U44KK44G+44GZ44CCXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdGFydFVwKG9wdGlvbjogT3B0aW9uID0gbnVsbCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHNfaXNTdGFydGVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Mb2dJbmZvKFwiQ3ViaXNtRnJhbWV3b3JrOjpTdGFydFVwKCkgaXMgYWxyZWFkeSBkb25lLlwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzX2lzU3RhcnRlZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc19vcHRpb24gPSBvcHRpb247XHJcblxyXG4gICAgICAgICAgICBpZihzX29wdGlvbiAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPIENvcmU6OmNzbVNldExvZ0Z1bmN0aW9uKHNfb3B0aW9uLT5Mb2dGdW5jdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNfaXNTdGFydGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIExpdmUyRCBDdWJpc20gQ29yZeODkOODvOOCuOODp+ODs+aDheWgseOCkuihqOekulxyXG4gICAgICAgICAgICBpZihzX2lzU3RhcnRlZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmVyc2lvbjogbnVtYmVyID0gMTsgLy8gVE9ETyBDb3JlOjpjc21HZXRWZXJzaW9uKClcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1ham9yOiBudW1iZXIgPSAoKHZlcnNpb24gJiAweEZGMDAwMDAwKSA+PiAyNCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtaW5vcjogbnVtYmVyID0gKCh2ZXJzaW9uICYgMHgwMEZGMDAwMCkgPj4gMTYpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0Y2g6IG51bWJlciA9ICgodmVyc2lvbiAmIDB4MDAwMEZGRkYpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNpb25OdW1iZXI6IG51bWJlciA9IHZlcnNpb247XHJcblxyXG4gICAgICAgICAgICAgICAgQ3ViaXNtTG9nSW5mbyhcIkxpdmUyRCBDdWJpc20gQ29yZSB2ZXJzaW9uOiAlMDJkLiUwMmQuJTA0ZCAoJWQpXCIsIG1ham9yLCBtaW5vciwgcGF0Y2gsIHZlcnNpb25OdW1iZXIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBDdWJpc21Mb2dJbmZvKFwiQ3ViaXNtRnJhbWV3b3JrOjpTdGFydFVwKCkgaXMgY29tcGxldGUuXCIpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNfaXNTdGFydGVkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3RhcnRVcCgp44Gn5Yid5pyf5YyW44GX44GfQ3ViaXNtRnJhbWV3b3Jr44Gu5ZCE44OR44Op44Oh44O844K/44KS44Kv44Oq44Ki44GX44G+44GZ44CCXHJcbiAgICAgICAgICogRGlzcG9zZSgp44GX44GfQ3ViaXNtRnJhbWV3b3Jr44KS5YaN5Yip55So44GZ44KL6Zqb44Gr5Yip55So44GX44Gm44GP44Gg44GV44GE44CCXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBjbGVhblVwKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNfaXNTdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNfaXNJbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzX29wdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIHNfY3ViaXNtSWRNYW5hZ2VyID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEN1YmlzbSBGcmFtZXdvcmvlhoXjga7jg6rjgr3jg7zjgrnjgpLliJ3mnJ/ljJbjgZfjgabjg6Ljg4fjg6vjgpLooajnpLrlj6/og73jgarnirbmhYvjgavjgZfjgb7jgZnjgII8YnI+XHJcbiAgICAgICAgICogICAgIOWGjeW6pkluaXRpYWxpemUoKeOBmeOCi+OBq+OBr+WFiOOBq0Rpc3Bvc2UoKeOCkuWun+ihjOOBmeOCi+W/heimgeOBjOOBguOCiuOBvuOBmeOAglxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW5pdGlhbGl6ZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDU01fQVNTRVJUKHNfaXNTdGFydGVkKTtcclxuICAgICAgICAgICAgaWYoIXNfaXNTdGFydGVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Mb2dXYXJuaW5nKFwiQ3ViaXNtRnJhbWV3b3JrIGlzIG5vdCBzdGFydGVkLlwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gLS0tIHNfaXNJbml0aWFsaXplZOOBq+OCiOOCi+mAo+e2muWIneacn+WMluOCrOODvOODiSAtLS1cclxuICAgICAgICAgICAgLy8g6YCj57aa44GX44Gm44Oq44K944O844K556K65L+d44GM6KGM44KP44KM44Gq44GE44KI44GG44Gr44GZ44KL44CCXHJcbiAgICAgICAgICAgIC8vIOWGjeW6pkluaXRpYWxpemUoKeOBmeOCi+OBq+OBr+WFiOOBq0Rpc3Bvc2UoKeOCkuWun+ihjOOBmeOCi+W/heimgeOBjOOBguOCi+OAglxyXG4gICAgICAgICAgICBpZiAoc19pc0luaXRpYWxpemVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Mb2dXYXJuaW5nKFwiQ3ViaXNtRnJhbWV3b3JrOjpJbml0aWFsaXplKCkgc2tpcHBlZCwgYWxyZWFkeSBpbml0aWFsaXplZC5cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vLS0tLSBzdGF0aWMg5Yid5pyf5YyWIC0tLS1cclxuICAgICAgICAgICAgVmFsdWUuc3RhdGljSW5pdGlhbGl6ZU5vdEZvckNsaWVudENhbGwoKTtcclxuXHJcbiAgICAgICAgICAgIHNfY3ViaXNtSWRNYW5hZ2VyID0gbmV3IEN1YmlzbUlkTWFuYWdlcigpO1xyXG5cclxuICAgICAgICAgICAgc19pc0luaXRpYWxpemVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIEN1YmlzbUxvZ0luZm8oXCJDdWJpc21GcmFtZXdvcms6OkluaXRpYWxpemUoKSBpcyBjb21wbGV0ZS5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDdWJpc20gRnJhbWV3b3Jr5YaF44Gu5YWo44Gm44Gu44Oq44K944O844K544KS6Kej5pS+44GX44G+44GZ44CCXHJcbiAgICAgICAgICogICAgICDjgZ/jgaDjgZfjgIHlpJbpg6jjgafnorrkv53jgZXjgozjgZ/jg6rjgr3jg7zjgrnjgavjgaTjgYTjgabjga/op6PmlL7jgZfjgb7jgZvjgpPjgIJcclxuICAgICAgICAgKiAgICAgIOWklumDqOOBp+mBqeWIh+OBq+egtOajhOOBmeOCi+W/heimgeOBjOOBguOCiuOBvuOBmeOAglxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZGlzcG9zZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDU01fQVNTRVJUKHNfaXNTdGFydGVkKTtcclxuICAgICAgICAgICAgaWYoIXNfaXNTdGFydGVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Mb2dXYXJuaW5nKFwiQ3ViaXNtRnJhbWV3b3JrIGlzIG5vdCBzdGFydGVkLlwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gLS0tIHNfaXNJbml0aWFsaXplZOOBq+OCiOOCi+acquWIneacn+WMluino+aUvuOCrOODvOODiSAtLS1cclxuICAgICAgICAgICAgLy8gZGlzcG9zZSgp44GZ44KL44Gr44Gv5YWI44GraW5pdGlhbGl6ZSgp44KS5a6f6KGM44GZ44KL5b+F6KaB44GM44GC44KL44CCXHJcbiAgICAgICAgICAgIGlmKCFzX2lzSW5pdGlhbGl6ZWQpICAgIC8vIGZhbHNlLi4u44Oq44K944O844K55pyq56K65L+d44Gu5aC05ZCIXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoXCJDdWJpc21GcmFtZXdvcms6OkRpc3Bvc2UoKSBza2lwcGVkLCBub3QgaW5pdGlhbGl6ZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBWYWx1ZS5zdGF0aWNSZWxlYXNlTm90Rm9yQ2xpZW50Q2FsbCgpO1xyXG5cclxuICAgICAgICAgICAgc19jdWJpc21JZE1hbmFnZXIucmVsZWFzZSgpO1xyXG4gICAgICAgICAgICBzX2N1YmlzbUlkTWFuYWdlciA9IHZvaWQgMDtcclxuXHJcbiAgICAgICAgICAgIC8vIOODrOODs+ODgOODqeOBrumdmeeahOODquOCveODvOOCue+8iOOCt+OCp+ODvOODgOODl+ODreOCsOODqeODoOS7lu+8ieOCkuino+aUvuOBmeOCi1xyXG4gICAgICAgICAgICBDdWJpc21SZW5kZXJlci5TdGF0aWNSZWxlYXNlKCk7XHJcblxyXG4gICAgICAgICAgICBzX2lzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIEN1YmlzbUxvZ0luZm8oXCJDdWJpc21GcmFtZXdvcms6OkRpc3Bvc2UoKSBpcyBjb21wbGV0ZS5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnj77lnKjjga7jg63jgrDlh7rlipvjg6zjg5njg6voqK3lrprjga7lgKTjgpLov5TjgZnjgIJcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZXR1cm4gIOePvuWcqOOBruODreOCsOWHuuWKm+ODrOODmeODq+ioreWumuOBruWApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZ2V0TG9nZ2luZ0xldmVsKCk6IExvZ0xldmVsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoc19vcHRpb24gIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNfb3B0aW9uLmxvZ2dpbmdMZXZlbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gTG9nTGV2ZWwuTG9nTGV2ZWxfT2ZmO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3ViaXNtIEZyYW1ld29ya+OBrkFQSeOCkuS9v+eUqOOBmeOCi+a6luWCmeOBjOWujOS6huOBl+OBn+OBi+OBqeOBhuOBi1xyXG4gICAgICAgICAqIEByZXR1cm4gQVBJ44KS5L2/55So44GZ44KL5rqW5YKZ44GM5a6M5LqG44GX44Gm44GE44KM44GwdHJ1ZeOBjOi/lOOCiuOBvuOBmeOAglxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaXNTdGFydGVkKCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBzX2lzU3RhcnRlZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEN1YmlzbSBGcmFtZXdvcmvjga7jg6rjgr3jg7zjgrnliJ3mnJ/ljJbjgYzjgZnjgafjgavooYzjgo/jgozjgabjgYTjgovjgYvjganjgYbjgYtcclxuICAgICAgICAgKiBAcmV0dXJuIOODquOCveODvOOCueeiuuS/neOBjOWujOS6huOBl+OBpuOBhOOCjOOBsHRydWXjgYzov5Tjgorjgb7jgZlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGlzSW5pdGlhbGl6ZWQoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNfaXNJbml0aWFsaXplZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElE44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K544KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiBDdWJpc21NYW5hZ2Vy44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXRJZE1hbmFnZXIoKTogQ3ViaXNtSWRNYW5hZ2VyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gc19jdWJpc21JZE1hbmFnZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDpnZnnmoTjgq/jg6njgrnjgajjgZfjgabkvb/nlKjjgZnjgotcclxuICAgICAgICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnljJbjgZXjgZvjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE9wdGlvblxyXG57XHJcbiAgICBsb2dnaW5nTGV2ZWw6IExvZ0xldmVsOyAgLy8g44Ot44Kw5Ye65Yqb44Os44OZ44Or44Gu6Kit5a6aXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDjg63jgrDlh7rlipvjga7jg6zjg5njg6tcclxuICovXHJcbmV4cG9ydCBlbnVtIExvZ0xldmVsXHJcbntcclxuICAgIExvZ0xldmVsX1ZlcmJvc2UgPSAwLCAgIC8vIOips+e0sOODreOCsFxyXG4gICAgTG9nTGV2ZWxfRGVidWcsICAgICAgICAgLy8g44OH44OQ44OD44Kw44Ot44KwXHJcbiAgICBMb2dMZXZlbF9JbmZvLCAgICAgICAgICAvLyBJbmZv44Ot44KwXHJcbiAgICBMb2dMZXZlbF9XYXJuaW5nLCAgICAgICAvLyDorablkYrjg63jgrBcclxuICAgIExvZ0xldmVsX0Vycm9yLCAgICAgICAgIC8vIOOCqOODqeODvOODreOCsFxyXG4gICAgTG9nTGV2ZWxfT2ZmICAgICAgICAgICAgLy8g44Ot44Kw5Ye65Yqb54Sh5Yq5XHJcbn1cclxuIiwiLypcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc212ZWN0b3IyfSBmcm9tIFwiLi9jdWJpc212ZWN0b3IyXCI7XHJcbmltcG9ydCBDdWJpc21WZWN0b3IyID0gY3ViaXNtdmVjdG9yMi5DdWJpc21WZWN0b3IyO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmtcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiDmlbDlgKToqIjnrpfjgarjganjgavkvb/nlKjjgZnjgovjg6bjg7zjg4bjgqPjg6rjg4bjgqPjgq/jg6njgrlcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbU1hdGhcclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnrKzkuIDlvJXmlbDjga7lgKTjgpLmnIDlsI/lgKTjgajmnIDlpKflgKTjga7nr4Tlm7Ljgavlj47jgoHjgZ/lgKTjgpLov5TjgZlcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gdmFsdWUg5Y+O44KB44KJ44KM44KL5YCkXHJcbiAgICAgICAgICogQHBhcmFtIG1pbiAgIOevhOWbsuOBruacgOWwj+WApFxyXG4gICAgICAgICAqIEBwYXJhbSBtYXggICDnr4Tlm7Ljga7mnIDlpKflgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOacgOWwj+WApOOBqOacgOWkp+WApOOBruevhOWbsuOBq+WPjuOCgeOBn+WApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyByYW5nZSh2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IG1pbilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtaW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPiBtYXgpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gbWF4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCteOCpOODs+mWouaVsOOBruWApOOCkuaxguOCgeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB4IOinkuW6puWApO+8iOODqeOCuOOCouODs++8iVxyXG4gICAgICAgICAqIEByZXR1cm4g44K144Kk44Oz6Zai5pWwc2luKHgp44Gu5YCkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RhdGljIHNpbih4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNpbih4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+OCteOCpOODs+mWouaVsOOBruWApOOCkuaxguOCgeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB4IOinkuW6puWApCjjg6njgrjjgqLjg7MpXHJcbiAgICAgICAgICogQHJldHVybiDjgrPjgrXjgqTjg7PplqLmlbBjb3MoeCnjga7lgKRcclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWMgY29zKHg6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY29zKHgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5YCk44Gu57W25a++5YCk44KS5rGC44KB44KLXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIHgg57W25a++5YCk44KS5rGC44KB44KL5YCkXHJcbiAgICAgICAgICogQHJldHVybiDlgKTjga7ntbblr77lgKRcclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWMgYWJzKHg6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKHgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5bmz5pa55qC5KOODq+ODvOODiCnjgpLmsYLjgoHjgotcclxuICAgICAgICAgKiBAcGFyYW0geCAtPiDlubPmlrnmoLnjgpLmsYLjgoHjgovlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOWApOOBruW5s+aWueaguVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyBzcXJ0KHg6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydCh4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCpOODvOOCuOODs+OCsOWHpueQhuOBleOCjOOBn+OCteOCpOODs+OCkuaxguOCgeOCi1xyXG4gICAgICAgICAqIOODleOCp+ODvOODieOCpOODs+ODu+OCouOCpuODiOaZguOBruOCpOODvOOCuOODs+OCsOOBq+WIqeeUqOOBp+OBjeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSDjgqTjg7zjgrjjg7PjgrDjgpLooYzjgYblgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOOCpOODvOOCuOODs+OCsOWHpueQhuOBleOCjOOBn+OCteOCpOODs+WApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyBnZXRFYXNpbmdTaW5lKHZhbHVlOiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IDAuMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuMDtcclxuICAgICAgICAgICAgfSAgIFxyXG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA+IDEuMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDEuMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIDAuNSAtIDAuNSAqIHRoaXMuY29zKHZhbHVlICogTWF0aC5QSSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlpKfjgY3jgYTmlrnjga7lgKTjgpLov5TjgZlcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gbGVmdCDlt6bovrrjga7lgKRcclxuICAgICAgICAgKiBAcGFyYW0gcmlnaHQg5Y+z6L6644Gu5YCkXHJcbiAgICAgICAgICogQHJldHVybiDlpKfjgY3jgYTmlrnjga7lgKRcclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWMgbWF4KGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIChsZWZ0ID4gcmlnaHQpXHJcbiAgICAgICAgICAgICAgICA/IGxlZnRcclxuICAgICAgICAgICAgICAgIDogcmlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlsI/jgZXjgYTmlrnjga7lgKTjgpLov5TjgZlcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gbGVmdCAg5bem6L6644Gu5YCkXHJcbiAgICAgICAgICogQHBhcmFtIHJpZ2h0IOWPs+i+uuOBruWApOOAgFxyXG4gICAgICAgICAqIEByZXR1cm4g5bCP44GV44GE5pa544Gu5YCkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RhdGljIG1pbihsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAobGVmdCA+IHJpZ2h0KVxyXG4gICAgICAgICAgICAgICAgPyByaWdodFxyXG4gICAgICAgICAgICAgICAgOiBsZWZ0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6KeS5bqm5YCk44KS44Op44K444Ki44Oz5YCk44Gr5aSJ5o+b44GZ44KLXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGRlZ3JlZXMgICDop5LluqblgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOinkuW6puWApOOBi+OCieWkieaPm+OBl+OBn+ODqeOCuOOCouODs+WApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyBkZWdyZWVzVG9SYWRpYW4oZGVncmVlczogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKGRlZ3JlZXMgLyAxODAuMCkgKiBNYXRoLlBJO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Op44K444Ki44Oz5YCk44KS6KeS5bqm5YCk44Gr5aSJ5o+b44GZ44KLXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIHJhZGlhbiAgICDjg6njgrjjgqLjg7PlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOODqeOCuOOCouODs+WApOOBi+OCieWkieaPm+OBl+OBn+inkuW6puWApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyByYWRpYW5Ub0RlZ3JlZXMocmFkaWFuOiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAocmFkaWFuICogMTgwLjApIC8gTWF0aC5QSTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIO+8kuOBpOOBruODmeOCr+ODiOODq+OBi+OCieODqeOCuOOCouODs+WApOOCkuaxguOCgeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBmcm9tICDlp4vngrnjg5njgq/jg4jjg6tcclxuICAgICAgICAgKiBAcGFyYW0gdG8gICAg57WC54K544OZ44Kv44OI44OrXHJcbiAgICAgICAgICogQHJldHVybiDjg6njgrjjgqLjg7PlgKTjgYvjgonmsYLjgoHjgZ/mlrnlkJHjg5njgq/jg4jjg6tcclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWMgZGlyZWN0aW9uVG9SYWRpYW4oZnJvbTogQ3ViaXNtVmVjdG9yMiwgdG86IEN1YmlzbVZlY3RvcjIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHExOiBudW1iZXIgPSBNYXRoLmF0YW4yKHRvLnksIHRvLngpO1xyXG4gICAgICAgICAgICBjb25zdCBxMjogbnVtYmVyID0gTWF0aC5hdGFuMihmcm9tLnksIGZyb20ueCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgcmV0OiBudW1iZXIgPSBxMSAtIHEyO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUocmV0IDwgLU1hdGguUEkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldCArPSBNYXRoLlBJICogMi4wO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB3aGlsZShyZXQgPiBNYXRoLlBJKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXQgLT0gTWF0aC5QSSAqIDIuMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIO+8kuOBpOOBruODmeOCr+ODiOODq+OBi+OCieinkuW6puWApOOCkuaxguOCgeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBmcm9tICDlp4vngrnjg5njgq/jg4jjg6tcclxuICAgICAgICAgKiBAcGFyYW0gdG8gICAg57WC54K544OZ44Kv44OI44OrXHJcbiAgICAgICAgICogQHJldHVybiDop5LluqblgKTjgYvjgonmsYLjgoHjgZ/mlrnlkJHjg5njgq/jg4jjg6tcclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWMgZGlyZWN0aW9uVG9EZWdyZWVzKGZyb206IEN1YmlzbVZlY3RvcjIsIHRvOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCByYWRpYW46IG51bWJlciA9IHRoaXMuZGlyZWN0aW9uVG9SYWRpYW4oZnJvbSwgdG8pO1xyXG4gICAgICAgICAgICBsZXQgZGVncmVlOiBudW1iZXIgPSB0aGlzLnJhZGlhblRvRGVncmVlcyhyYWRpYW4pO1xyXG5cclxuICAgICAgICAgICAgaWYgKCh0by54IC0gZnJvbS54KSA+IDAuMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGVncmVlID0gLWRlZ3JlZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGRlZ3JlZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODqeOCuOOCouODs+WApOOCkuaWueWQkeODmeOCr+ODiOODq+OBq+WkieaPm+OBmeOCi+OAglxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB0b3RhbEFuZ2xlICAgIOODqeOCuOOCouODs+WApFxyXG4gICAgICAgICAqIEByZXR1cm4g44Op44K444Ki44Oz5YCk44GL44KJ5aSJ5o+b44GX44Gf5pa55ZCR44OZ44Kv44OI44OrXHJcbiAgICAgICAgICovXHJcblxyXG4gICAgICAgICBzdGF0aWMgcmFkaWFuVG9EaXJlY3Rpb24odG90YWxBbmdsZTogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMlxyXG4gICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigpO1xyXG5cclxuICAgICAgICAgICAgcmV0LnggPSB0aGlzLnNpbih0b3RhbEFuZ2xlKTtcclxuICAgICAgICAgICAgcmV0LnkgPSB0aGlzLmNvcyh0b3RhbEFuZ2xlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgIC8qKlxyXG4gICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgICovXHJcbiAgICAgICAgIHByaXZhdGUgY29uc3RydWN0b3IoKVxyXG4gICAgICAgICB7XHJcblxyXG4gICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogNHg044Gu6KGM5YiXXHJcbiAgICAgKiBcclxuICAgICAqIDR4NOihjOWIl+OBruS+v+WIqeOCr+ODqeOCueOAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtTWF0cml4NDRcclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fdHIgPSBuZXcgRmxvYXQzMkFycmF5KDE2KTsgICAgLy8gNCAqIDTjga7jgrXjgqTjgrpcclxuICAgICAgICAgICAgdGhpcy5sb2FkSWRlbnRpdHkoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWPl+OBkeWPluOBo+OBn++8kuOBpOOBruihjOWIl+OBruS5l+eul+OCkuihjOOBhuOAglxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBhIOihjOWIl2FcclxuICAgICAgICAgKiBAcGFyYW0gYiDooYzliJdiXHJcbiAgICAgICAgICogQHJldHVybiDkuZfnrpfntZDmnpzjga7ooYzliJdcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIG11bHRpcGx5KGE6IEZsb2F0MzJBcnJheSwgYjogRmxvYXQzMkFycmF5LCBkc3Q6IEZsb2F0MzJBcnJheSk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBjOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIDAuMCwgMC4wLCAwLjAsIDAuMCxcclxuICAgICAgICAgICAgICAgICAgICAwLjAsIDAuMCwgMC4wLCAwLjAsXHJcbiAgICAgICAgICAgICAgICAgICAgMC4wLCAwLjAsIDAuMCwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgIDAuMCwgMC4wLCAwLjAsIDAuMFxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgbGV0IG46IG51bWJlciA9IDQ7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgbjsgKytpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGo6IG51bWJlciA9IDA7IGogPCBuOyArK2opXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBrOiBudW1iZXIgPSAwOyBrIDwgbjsgKytrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY1tqICsgaSAqIDRdICs9IGFbayArIGkgKiA0XSAqIGJbaiArIGsgKiA0XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgaTogbnVtYmVyID0gMDsgaSA8IDE2OyArK2kpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGRzdFtpXSA9IGNbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWNmOS9jeihjOWIl+OBq+WIneacn+WMluOBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBsb2FkSWRlbnRpdHkoKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGM6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgMS4wLCAwLjAsIDAuMCwgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgIDAuMCwgMS4wLCAwLjAsIDAuMCxcclxuICAgICAgICAgICAgICAgICAgICAwLjAsIDAuMCwgMS4wLCAwLjAsXHJcbiAgICAgICAgICAgICAgICAgICAgMC4wLCAwLjAsIDAuMCwgMS4wXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldE1hdHJpeChjKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOihjOWIl+OCkuioreWumlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB0ciAxNuWAi+OBrua1ruWLleWwj+aVsOeCueaVsOOBp+ihqOOBleOCjOOCizR4NOOBruihjOWIl1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRNYXRyaXgodHI6IEZsb2F0MzJBcnJheSk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCAxNjsgKytpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cltpXSA9IHRyW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDooYzliJfjgpLmta7li5XlsI/mlbDngrnmlbDjga7phY3liJfjgaflj5blvpdcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcmV0dXJuIDE25YCL44Gu5rWu5YuV5bCP5pWw54K55pWw44Gn6KGo44GV44KM44KLNHg044Gu6KGM5YiXXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldEFycmF5KCk6IEZsb2F0MzJBcnJheVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogWOi7uOOBruaLoeWkp+eOh+OCkuWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4gWOi7uOOBruaLoeWkp+eOh1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRTY2FsZVgoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBZ6Lu444Gu5ouh5aSn546H44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHJldHVybiBZ6Lu444Gu5ouh5aSn546HXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFNjYWxlWSgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90cls1XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFjou7jjga7np7vli5Xph4/jgpLlj5blvpdcclxuICAgICAgICAgKiBAcmV0dXJuIFjou7jjga7np7vli5Xph49cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0VHJhbnNsYXRlWCgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90clsxMl07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBZ6Lu444Gu56e75YuV6YeP44KS5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiBZ6Lu444Gu56e75YuV6YePXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFRyYW5zbGF0ZVkoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJbMTNdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogWOi7uOOBruWApOOCkuePvuWcqOOBruihjOWIl+OBp+ioiOeul1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBzcmMgWOi7uOOBruWApFxyXG4gICAgICAgICAqIEByZXR1cm4g54++5Zyo44Gu6KGM5YiX44Gn6KiI566X44GV44KM44GfWOi7uOOBruWApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyB0cmFuc2Zvcm1YKHNyYzogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJbMF0gKiBzcmMgKyB0aGlzLl90clsxMl07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBZ6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6KiI566XXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIHNyYyBZ6Lu444Gu5YCkXHJcbiAgICAgICAgICogQHJldHVybuOAgOePvuWcqOOBruihjOWIl+OBp+ioiOeul+OBleOCjOOBn1nou7jjga7lgKRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgdHJhbnNmb3JtWShzcmM6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyWzVdICogc3JjICsgdGhpcy5fdHJbMTNdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogWOi7uOOBruWApOOCkuePvuWcqOOBruihjOWIl+OBp+mAhuioiOeul1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpbnZlcnRUcmFuc2Zvcm1YKHNyYzogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKHNyYyAtIHRoaXMuX3RyWzEyXSkgLyB0aGlzLl90clswXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFnou7jjga7lgKTjgpLnj77lnKjjga7ooYzliJfjgafpgIboqIjnrpdcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaW52ZXJ0VHJhbnNmb3JtWShzcmM6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIChzcmMgLSB0aGlzLl90clsxM10pIC8gdGhpcy5fdHJbNV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLotbfngrnjgavjgZfjgabnp7vli5VcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLotbfngrnjgavjgZfjgabnm7jlr77nmoTjgavnp7vli5XjgZnjgovjgIJcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0geCBY6Lu444Gu56e75YuV6YePXHJcbiAgICAgICAgICogQHBhcmFtIHkgWei7uOOBruenu+WLlemHj1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyB0cmFuc2xhdGVSZWxhdGl2ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCB0cjE6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgMS4wLCAgICAwLjAsICAgIDAuMCwgICAgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgIDAuMCwgICAgMS4wLCAgICAwLjAsICAgIDAuMCxcclxuICAgICAgICAgICAgICAgICAgICAwLjAsICAgIDAuMCwgICAgMS4wLCAgICAwLjAsXHJcbiAgICAgICAgICAgICAgICAgICAgeCwgICAgICB5LCAgICAgIDAuMCwgICAgMS4wXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseSh0cjEsIHRoaXMuX3RyLCB0aGlzLl90cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLnp7vli5VcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLmjIflrprjgZfjgZ/kvY3nva7jgbjnp7vli5XjgZnjgotcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0geCBY6Lu444Gu56e75YuV6YePXHJcbiAgICAgICAgICogQHBhcmFtIHkgeei7uOOBruenu+WLlemHj1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyB0cmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl90clsxMl0gPSB4O1xyXG4gICAgICAgICAgICB0aGlzLl90clsxM10gPSB5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog54++5Zyo44Gu6KGM5YiX44GuWOi7uOOBruS9jee9ruOCkuaMh+WumuOBl+OBn+S9jee9ruOBuOenu+WLleOBmeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB4IFjou7jjga7np7vli5Xph49cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgdHJhbnNsYXRlWCh4OiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl90clsxMl0gPSB4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog54++5Zyo44Gu6KGM5YiX44GuWei7uOOBruS9jee9ruOCkuaMh+WumuOBl+OBn+S9jee9ruOBuOenu+WLleOBmeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB5IFnou7jjga7np7vli5Xph49cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgdHJhbnNsYXRlWSh5OiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl90clsxM10gPSB5O1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOePvuWcqOOBruihjOWIl+OBruaLoeWkp+eOh+OCkuebuOWvvueahOOBq+ioreWumuOBmeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB4IFjou7jjga7mi6HlpKfnjodcclxuICAgICAgICAgKiBAcGFyYW0geSBZ6Lu444Gu5ouh5aSn546HXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNjYWxlUmVsYXRpdmUoeDogbnVtYmVyLCB5Om51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCB0cjE6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgeCwgICAgICAwLjAsICAgIDAuMCwgICAgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgIDAuMCwgICAgeSwgICAgICAwLjAsICAgIDAuMCwgXHJcbiAgICAgICAgICAgICAgICAgICAgMC4wLCAgICAwLjAsICAgIDEuMCwgICAgMC4wLFxyXG4gICAgICAgICAgICAgICAgICAgIDAuMCwgICAgMC4wLCAgICAwLjAsICAgIDEuMFxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog54++5Zyo44Gu6KGM5YiX44Gu5ouh5aSn546H44KS5oyH5a6a44GX44Gf5YCN546H44Gr6Kit5a6a44GZ44KLXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIHggWOi7uOOBruaLoeWkp+eOh1xyXG4gICAgICAgICAqIEBwYXJhbSB5IFnou7jjga7mi6HlpKfnjodcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2NhbGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl90clswXSA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyWzVdID0geTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOePvuWcqOOBruihjOWIl+OBq+ihjOWIl+OCkuS5l+eul1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIG0g6KGM5YiXXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIG11bHRpcGx5QnlNYXRyaXgobTogQ3ViaXNtTWF0cml4NDQpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseShtLmdldEFycmF5KCksIHRoaXMuX3RyLCB0aGlzLl90cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqrjg5bjgrjjgqfjgq/jg4jjga7jgrPjg5Tjg7zjgpLnlJ/miJDjgZnjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY2xvbmUoKTogQ3ViaXNtTWF0cml4NDRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBjbG9uZU1hdHJpeDogQ3ViaXNtTWF0cml4NDQgPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgaTogbnVtYmVyID0gMDsgaSA8IHRoaXMuX3RyLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjbG9uZU1hdHJpeC5fdHJbaV0gPSB0aGlzLl90cltpXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNsb25lTWF0cml4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIF90cjogRmxvYXQzMkFycmF5OyAgICAvLyA0eDTooYzliJfjg4fjg7zjgr9cclxuICAgIH1cclxufSIsIi8qXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwOi8vbGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtbWFwfSBmcm9tIFwiLi4vdHlwZS9jc21tYXBcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0cml4NDR9IGZyb20gXCIuL2N1YmlzbW1hdHJpeDQ0XCI7XHJcbmltcG9ydCBjc21NYXAgPSBjc21tYXAuY3NtTWFwO1xyXG5pbXBvcnQgaXRlcmF0b3IgPSBjc21tYXAuaXRlcmF0b3I7XHJcbmltcG9ydCBDdWJpc21NYXRyaXg0NCA9IGN1YmlzbW1hdHJpeDQ0LkN1YmlzbU1hdHJpeDQ0O1xyXG5cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8qKlxyXG4gICAgICog44Oi44OH44Or5bqn5qiZ6Kit5a6a55So44GuNHg06KGM5YiXXHJcbiAgICAgKiBcclxuICAgICAqIOODouODh+ODq+W6p+aomeioreWumueUqOOBrjR4NOihjOWIl+OCr+ODqeOCuVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxNYXRyaXggZXh0ZW5kcyBDdWJpc21NYXRyaXg0NFxyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB3IOaoquW5hVxyXG4gICAgICAgICAqIEBwYXJhbSBoIOe4puW5hVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHc/OiBudW1iZXIsIGg/OiBudW1iZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fd2lkdGggPSAodyAhPT0gdW5kZWZpbmVkKSBcclxuICAgICAgICAgICAgICAgID8gd1xyXG4gICAgICAgICAgICAgICAgOiAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlaWdodCA9IChoICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICA/IGhcclxuICAgICAgICAgICAgICAgIDogMC4wO1xyXG5cclxuICAgICAgICAgICAgLy8g5Y6f54K5KDAsIDAp44KS5Lit5b+D44Gr44GX44Gm44CB55S76Z2i44Gr57SN44G+44KL44KI44GG44Gq5aSn44GN44GV44Gn5Yid5pyf5YyWXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl93aWR0aCA+IHRoaXMuX2hlaWdodClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRXaWR0aCh0aGlzLl9oZWlnaHQgLyB0aGlzLl93aWR0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEhlaWdodCgxLjApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmqKrluYXjgpLoqK3lrppcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gdyDmqKrluYVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0V2lkdGgodzogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3Qgc2NhbGVYOiBudW1iZXIgPSB3IC8gdGhpcy5fd2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlWTogbnVtYmVyID0gc2NhbGVYO1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlKHNjYWxlWCwgc2NhbGVZKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOe4puW5heOCkuioreWumlxyXG4gICAgICAgICAqIEBwYXJhbSBoIOe4puW5hVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRIZWlnaHQoaDogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3Qgc2NhbGVYOiBudW1iZXIgPSBoIC8gdGhpcy5faGVpZ2h0O1xyXG4gICAgICAgICAgICBjb25zdCBzY2FsZVk6IG51bWJlciA9IHNjYWxlWDtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZShzY2FsZVgsIHNjYWxlWSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDkvY3nva7jgpLoqK3lrppcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0geCBY6Lu444Gu5L2N572uXHJcbiAgICAgICAgICogQHBhcmFtIHkgWei7uOOBruS9jee9rlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlKHgsIHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Lit5b+D5L2N572u44KS6Kit5a6aXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIHggWOi7uOOBruS4reW/g+S9jee9rlxyXG4gICAgICAgICAqIEBwYXJhbSB5IFnou7jjga7kuK3lv4PkvY3nva5cclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAbm90ZSB3aWR0aOOBi2hlaWdodOOCkuioreWumuOBl+OBn+OBguOBqOOBp+OBquOBhOOBqOOAgeaLoeWkp+eOh+OBjOato+OBl+OBj+WPluW+l+OBp+OBjeOBquOBhOOBn+OCgeOBmuOCjOOCi+OAglxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRDZW50ZXJQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY2VudGVyWCh4KTtcclxuICAgICAgICAgICAgdGhpcy5jZW50ZXJZKHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5LiK6L6644Gu5L2N572u44KS6Kit5a6a44GZ44KLXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIHkg5LiK6L6644GuWei7uOS9jee9rlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyB0b3AoeTogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRZKHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDkuIvovrrjga7kvY3nva7jgpLoqK3lrprjgZnjgotcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0geSDkuIvovrrjga5Z6Lu45L2N572uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGJvdHRvbSh5OiBudW1iZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBoOiBudW1iZXIgPSB0aGlzLl9oZWlnaHQgKiB0aGlzLmdldFNjYWxlWSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGVZKHkgLSBoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW3pui+uuOBruS9jee9ruOCkuioreWumlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB4IOW3pui+uuOBrljou7jkvY3nva5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgbGVmdCh4OiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnNldFgoeCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlj7Povrrjga7kvY3nva7jgpLoqK3lrppcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0geCDlj7Povrrjga5Y6Lu45L2N572uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJpZ2h0KHg6IG51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHcgPSB0aGlzLl93aWR0aCAqIHRoaXMuZ2V0U2NhbGVYKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVgoeCAtIHcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogWOi7uOOBruS4reW/g+S9jee9ruOCkuioreWumlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB4IFjou7jjga7kuK3lv4PkvY3nva5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY2VudGVyWCh4OiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCB3ID0gdGhpcy5fd2lkdGggKiB0aGlzLmdldFNjYWxlWCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGVYKHggLSAodyAvIDIuMCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogWOi7uOOBruS9jee9ruOCkuioreWumlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB4IFjou7jjga7kvY3nva5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0WCh4OiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVgoeCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBZ6Lu444Gu5Lit5b+D5L2N572u44KS6Kit5a6aXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIHkgWei7uOOBruS4reW/g+S9jee9rlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBjZW50ZXJZKHk6IG51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGg6IG51bWJlciA9IHRoaXMuX2hlaWdodCAqIHRoaXMuZ2V0U2NhbGVZKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZVkoeSAtIChoIC8gMi4wKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBZ6Lu444Gu5L2N572u44KS6Kit5a6a44GZ44KLXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIHkgWei7uOOBruS9jee9rlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRZKHk6IG51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlWSh5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODrOOCpOOCouOCpuODiOaDheWgseOBi+OCieS9jee9ruOCkuioreWumlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBsYXlvdXQg44Os44Kk44Ki44Km44OI5oOF5aCxXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldHVwRnJvbUxheW91dChsYXlvdXQ6IGNzbU1hcDxzdHJpbmcsIG51bWJlcj4pOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBrZXlXaWR0aCA9IFwid2lkdGhcIjtcclxuICAgICAgICAgICAgY29uc3Qga2V5SGVpZ2h0ID0gXCJoZWlnaHRcIjtcclxuICAgICAgICAgICAgY29uc3Qga2V5WCA9IFwieFwiO1xyXG4gICAgICAgICAgICBjb25zdCBrZXlZID0gXCJ5XCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleUNlbnRlclggPSBcImNlbnRlcl94XCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleUNlbnRlclkgPSBcImNlbnRlcl95XCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleVRvcCA9IFwidG9wXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleUJvdHRvbSA9IFwiYm90dG9tXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleUxlZnQgPSBcImxlZnRcIjtcclxuICAgICAgICAgICAgY29uc3Qga2V5UmlnaHQgPSBcInJpZ2h0XCI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IoY29uc3QgaXRlOiBpdGVyYXRvcjxzdHJpbmcsIG51bWJlcj4gPSBsYXlvdXQuYmVnaW4oKTsgaXRlLm5vdEVxdWFsKGxheW91dC5lbmQoKSk7IGl0ZS5wcmVJbmNyZW1lbnQoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5OiBzdHJpbmcgPSBpdGUucHRyKCkuZmlyc3Q7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZTogbnVtYmVyID0gaXRlLnB0cigpLnNlY29uZDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihrZXkgPT0ga2V5V2lkdGgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRXaWR0aCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGtleSA9PSBrZXlIZWlnaHQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRIZWlnaHQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IoY29uc3QgaXRlOiBpdGVyYXRvcjxzdHJpbmcsIG51bWJlcj4gPSBsYXlvdXQuYmVnaW4oKTsgaXRlLm5vdEVxdWFsKGxheW91dC5lbmQoKSk7IGl0ZS5wcmVJbmNyZW1lbnQoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5OiBzdHJpbmcgPSBpdGUucHRyKCkuZmlyc3Q7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZTogbnVtYmVyID0gaXRlLnB0cigpLnNlY29uZDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihrZXkgPT0ga2V5WClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFgodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihrZXkgPT0ga2V5WSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihrZXkgPT0ga2V5Q2VudGVyWClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNlbnRlclgodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihrZXkgPT0ga2V5Q2VudGVyWSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNlbnRlclkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihrZXkgPT0ga2V5VG9wKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9wKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYoa2V5ID09IGtleUJvdHRvbSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvdHRvbSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGtleSA9PSBrZXlMZWZ0KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGtleSA9PSBrZXlSaWdodClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlcjsgICAgIC8vIOaoquW5hVxyXG4gICAgICAgIHByaXZhdGUgX2hlaWdodDogbnVtYmVyOyAgICAvLyDnuKbluYVcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwOi8vbGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0aH0gZnJvbSBcIi4vY3ViaXNtbWF0aFwiO1xyXG5pbXBvcnQgQ3ViaXNtTWF0aCA9IGN1YmlzbW1hdGguQ3ViaXNtTWF0aDtcclxuXHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29ya1xyXG57XHJcbiAgICBjb25zdCBGcmFtZVJhdGU6IG51bWJlciA9IDMwO1xyXG4gICAgY29uc3QgRXBzaWxvbjogbnVtYmVyID0gMC4wMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOmhlOOBruWQkeOBjeOBruWItuW+oeapn+iDvVxyXG4gICAgICogXHJcbiAgICAgKiDpoZTjga7lkJHjgY3jga7liLblvqHmqZ/og73jgpLmj5DkvpvjgZnjgovjgq/jg6njgrnjgIJcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbVRhcmdldFBvaW50XHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZhY2VUYXJnZXRYID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9mYWNlVGFyZ2V0WSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fZmFjZVggPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZhY2VZID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9mYWNlVlggPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZhY2VWWSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fbGFzdFRpbWVTZWNvbmRzID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOabtOaWsOWHpueQhlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8g44OH44Or44K/5pmC6ZaT44KS5Yqg566X44GZ44KLXHJcbiAgICAgICAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xyXG5cclxuICAgICAgICAgICAgLy8g6aaW44KS5Lit5aSu44GL44KJ5bem5Y+z44Gr5oyv44KL44Go44GN44Gu5bmz5Z2H55qE44Gq6YCf44GV44Gv44CA56eS6YCf5bqm44CC5Yqg6YCf44O75rib6YCf44KS6ICD5oWu44GX44Gm44CB44Gd44Gu77yS5YCN44KS5pyA6auY6YCf5bqm44Go44GZ44KLXHJcbiAgICAgICAgICAgIC8vIOmhlOOBruaMr+OCiuWFt+WQiOOCkuOAgeS4reWkru+8iDAuMO+8ieOBi+OCieOAgeW3puWPs+OBr++8iCstMS4w77yJ44Go44GZ44KLXHJcbiAgICAgICAgICAgIGNvbnN0IGZhY2VQYXJhbU1heFY6IG51bWJlciA9IDQwLjAgLyAxMC4wOyAgICAgICAgICAgICAgLy8gNy4156eS6ZaT44GrNDDliIbnp7vli5UoNS4zL3NjKVxyXG4gICAgICAgICAgICBjb25zdCBtYXhWOiBudW1iZXIgPSBmYWNlUGFyYW1NYXhWICogMS4wIC8gRnJhbWVSYXRlOyAgIC8vIDFmcmFtZeOBguOBn+OCiuOBq+WkieWMluOBp+OBjeOCi+mAn+W6puOBruS4iumZkFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYodGhpcy5fbGFzdFRpbWVTZWNvbmRzID09IDAuMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkZWx0YVRpbWVXZWlnaHQ6IG51bWJlciA9ICh0aGlzLl91c2VyVGltZVNlY29uZHMgLSB0aGlzLl9sYXN0VGltZVNlY29uZHMpICogRnJhbWVSYXRlO1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XHJcblxyXG4gICAgICAgICAgICAvLyDmnIDpq5jpgJ/luqbjgavjgarjgovjgb7jgafjga7mmYLplpPjgpJcclxuICAgICAgICAgICAgY29uc3QgdGltZVRvTWF4U3BlZWQ6IG51bWJlciA9IDAuMTU7XHJcbiAgICAgICAgICAgIGNvbnN0IGZyYW1lVG9NYXhTcGVlZDogbnVtYmVyID0gdGltZVRvTWF4U3BlZWQgKiBGcmFtZVJhdGU7ICAgICAvLyBzZWMgKiBmcmFtZS9zZWNcclxuICAgICAgICAgICAgY29uc3QgbWF4QTogbnVtYmVyID0gZGVsdGFUaW1lV2VpZ2h0ICogbWF4ViAvIGZyYW1lVG9NYXhTcGVlZDsgIC8vIDFmcmFtZeOBguOBn+OCiuOBruWKoOmAn+W6plxyXG5cclxuICAgICAgICAgICAgLy8g55uu5oyH44GZ5ZCR44GN44Gv44CB77yIZHgsIGR577yJ5pa55ZCR44Gu44OZ44Kv44OI44Or44Go44Gq44KLXHJcbiAgICAgICAgICAgIGNvbnN0IGR4OiBudW1iZXIgPSB0aGlzLl9mYWNlVGFyZ2V0WCAtIHRoaXMuX2ZhY2VYO1xyXG4gICAgICAgICAgICBjb25zdCBkeTogbnVtYmVyID0gdGhpcy5fZmFjZVRhcmdldFkgLSB0aGlzLl9mYWNlWTtcclxuXHJcbiAgICAgICAgICAgIGlmKEN1YmlzbU1hdGguYWJzKGR4KSA8PSBFcHNpbG9uICYmIEN1YmlzbU1hdGguYWJzKGR5KSA8PSBFcHNpbG9uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIOWkieWMluOBquOBl1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDpgJ/luqbjga7mnIDlpKfjgojjgorjgoLlpKfjgY3jgYTloLTlkIjjga/jgIHpgJ/luqbjgpLokL3jgajjgZlcclxuICAgICAgICAgICAgY29uc3QgZDogbnVtYmVyID0gQ3ViaXNtTWF0aC5zcXJ0KChkeCAqIGR4KSArIChkeSAqIGR5KSk7XHJcblxyXG4gICAgICAgICAgICAvLyDpgLLooYzmlrnlkJHjga7mnIDlpKfpgJ/luqbjg5njgq/jg4jjg6tcclxuICAgICAgICAgICAgY29uc3Qgdng6IG51bWJlciA9IG1heFYgKiBkeCAvIGQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHZ5OiBudW1iZXIgPSBtYXhWICogZHkgLyBkO1xyXG5cclxuICAgICAgICAgICAgLy8g54++5Zyo44Gu6YCf5bqm44GL44KJ44CB5paw6KaP6YCf5bqm44G444Gu5aSJ5YyW77yI5Yqg6YCf5bqm77yJ44KS5rGC44KB44KLXHJcbiAgICAgICAgICAgIGxldCBheDogbnVtYmVyID0gdnggLSB0aGlzLl9mYWNlVlg7XHJcbiAgICAgICAgICAgIGxldCBheTogbnVtYmVyID0gdnkgLSB0aGlzLl9mYWNlVlk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhOiBudW1iZXIgPSBDdWJpc21NYXRoLnNxcnQoKGF4ICogYXgpICsgKGF5ICogYXkpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOWKoOmAn+OBruOBqOOBjVxyXG4gICAgICAgICAgICBpZihhIDwgLW1heEEgfHwgYSA+IG1heEEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGF4ICo9IG1heEEgLyBhO1xyXG4gICAgICAgICAgICAgICAgYXkgKj0gbWF4QSAvIGE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOWKoOmAn+W6puOCkuWFg+OBrumAn+W6puOBq+i2s+OBl+OBpuOAgeaWsOmAn+W6puOBqOOBmeOCi1xyXG4gICAgICAgICAgICB0aGlzLl9mYWNlVlggKz0gYXg7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZhY2VWWSArPSBheTtcclxuXHJcbiAgICAgICAgICAgIC8vIOebrueahOOBruaWueWQkeOBq+i/keOBpeOBhOOBn+OBqOOBjeOAgea7keOCieOBi+OBq+a4m+mAn+OBmeOCi+OBn+OCgeOBruWHpueQhlxyXG4gICAgICAgICAgICAvLyDoqK3lrprjgZXjgozjgZ/liqDpgJ/luqbjgafmraLjgb7jgovkuovjga7lh7rmnaXjgovot53pm6LjgajpgJ/luqbjga7plqLkv4LjgYvjgolcclxuICAgICAgICAgICAgLy8g54++5Zyo44Go44KK44GG44KL5pyA6auY6YCf5bqm44KS6KiI566X44GX44CB44Gd44KM5Lul5LiK44Gu5pmC44Gv6YCf5bqm44KS6JC944Go44GZXHJcbiAgICAgICAgICAgIC8vIOKAu+acrOadpeOAgeS6uumWk+OBr+eti+WKm+OBp+WKm++8iOWKoOmAn+W6pu+8ieOCkuiqv+aVtOOBp+OBjeOCi+OBn+OCgeOAgeOCiOOCiuiHqueUseW6puOBjOmrmOOBhOOBjOOAgeewoeWNmOOBquWHpueQhuOBp+a4iOOBvuOBm+OBpuOBhOOCi1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyDliqDpgJ/luqbjgIHpgJ/luqbjgIHot53pm6Ljga7plqLkv4LlvI/jgIJcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgMiAgNiAgICAgICAgICAgMiAgICAgICAgICAgICAgIDNcclxuICAgICAgICAgICAgICAgIC8vICAgICAgc3FydChhICB0ICArIDE2IGEgaCB0ICAtIDggYSBoKSAtIGEgdFxyXG4gICAgICAgICAgICAgICAgLy8gdiA9IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgMlxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIDQgdCAgLSAyXHJcbiAgICAgICAgICAgICAgICAvLyAodD0xKVxyXG4gICAgICAgICAgICAgICAgLy8gXHTmmYLliLt044Gv44CB44GC44KJ44GL44GY44KB5Yqg6YCf5bqm44CB6YCf5bqm44KSMS82MCjjg5Xjg6zjg7zjg6Djg6zjg7zjg4jjgIHljZjkvY3jgarjgZcp44GnXHJcbiAgICAgICAgICAgICAgICAvLyBcdOiAg+OBiOOBpuOBhOOCi+OBruOBp+OAgXTvvJ3vvJHjgajjgZfjgabmtojjgZfjgabjgojjgYTvvIjigLvmnKrmpJzoqLzvvIlcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhWOiBudW1iZXIgPSAwLjUgKiAoQ3ViaXNtTWF0aC5zcXJ0KChtYXhBICogbWF4QSkgKyAxNi4wICogbWF4QSAqIGQgLSA4LjAgKiBtYXhBICogZCkgLSBtYXhBKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1clY6IG51bWJlciA9IEN1YmlzbU1hdGguc3FydCgodGhpcy5fZmFjZVZYICogdGhpcy5fZmFjZVZYKSArICh0aGlzLl9mYWNlVlkgKiB0aGlzLl9mYWNlVlkpKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYoY3VyViA+IG1heFYpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g54++5Zyo44Gu6YCf5bqmID4g5pyA6auY6YCf5bqm44Gu44Go44GN44CB5pyA6auY6YCf5bqm44G+44Gn5rib6YCfXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmFjZVZYICo9IG1heFYgLyBjdXJWO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZhY2VWWSAqPSBtYXhWIC8gY3VyVjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fZmFjZVggKz0gdGhpcy5fZmFjZVZYO1xyXG4gICAgICAgICAgICB0aGlzLl9mYWNlWSArPSB0aGlzLl9mYWNlVlk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBY6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk44KS5Y+W5b6XXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHJldHVybiBY6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRYKCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZhY2VYO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogWei7uOOBrumhlOOBruWQkeOBjeOBruWApOOCkuWPluW+l1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4gWei7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0WSgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mYWNlWTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOmhlOOBruWQkeOBjeOBruebruaomeWApOOCkuioreWumlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB4IFjou7jjga7poZTjga7lkJHjgY3jga7lgKTvvIgtMS4wIH4gMS4w77yJXHJcbiAgICAgICAgICogQHBhcmFtIHkgWei7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0KHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fZmFjZVRhcmdldFggPSB4O1xyXG4gICAgICAgICAgICB0aGlzLl9mYWNlVGFyZ2V0WSA9IHk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfZmFjZVRhcmdldFg6IG51bWJlcjsgICAgICAgLy8g6aGU44Gu5ZCR44GN44GuWOebruaomeWApO+8iOOBk+OBruWApOOBq+i/keOBpeOBhOOBpuOBhOOBj++8iVxyXG4gICAgICAgIHByaXZhdGUgX2ZhY2VUYXJnZXRZOiBudW1iZXI7ICAgICAgIC8vIOmhlOOBruWQkeOBjeOBrlnnm67mqJnlgKTvvIjjgZPjga7lgKTjgavov5HjgaXjgYTjgabjgYTjgY/vvIlcclxuICAgICAgICBwcml2YXRlIF9mYWNlWDogbnVtYmVyOyAgICAgICAgICAgICAvLyDpoZTjga7lkJHjgY1Y77yILTEuMCB+IDEuMO+8iVxyXG4gICAgICAgIHByaXZhdGUgX2ZhY2VZOiBudW1iZXI7ICAgICAgICAgICAgIC8vIOmhlOOBruWQkeOBjVnvvIgtMS4wIH4gMS4w77yJXHJcbiAgICAgICAgcHJpdmF0ZSBfZmFjZVZYOiBudW1iZXI7ICAgICAgICAgICAgLy8g6aGU44Gu5ZCR44GN44Gu5aSJ5YyW6YCf5bqmWFxyXG4gICAgICAgIHByaXZhdGUgX2ZhY2VWWTogbnVtYmVyOyAgICAgICAgICAgIC8vIOmhlOOBruWQkeOBjeOBruWkieWMlumAn+W6pllcclxuICAgICAgICBwcml2YXRlIF9sYXN0VGltZVNlY29uZHM6IG51bWJlcjsgICAvLyDmnIDlvozjga7lrp/ooYzmmYLplpNb56eSXVxyXG4gICAgICAgIHByaXZhdGUgX3VzZXJUaW1lU2Vjb25kczogbnVtYmVyOyAgIC8vIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXHJcblxyXG4gICAgfVxyXG59IiwiLypcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29ya1xyXG57XHJcbiAgICAvKipcclxuICAgICAqIDLmrKHlhYPjg5njgq/jg4jjg6vlnotcclxuICAgICAqIFxyXG4gICAgICogMuasoeWFg+ODmeOCr+ODiOODq+Wei+OBruapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtVmVjdG9yMlxyXG4gICAgeyAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyB4PzogbnVtYmVyLCBwdWJsaWMgeT86IG51bWJlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9ICh4ID09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgID8gMC4wXHJcbiAgICAgICAgICAgICAgICA6IHg7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLnkgPSAoeSA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICA/IDAuMFxyXG4gICAgICAgICAgICAgICAgOiB5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5njgq/jg4jjg6vjga7liqDnrpdcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gdmVjdG9yMiDliqDnrpfjgZnjgovjg5njgq/jg4jjg6vlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOWKoOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYWRkKHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xyXG4gICAgICAgICAgICByZXQueCA9IHRoaXMueCArIHZlY3RvcjIueDtcclxuICAgICAgICAgICAgcmV0LnkgPSB0aGlzLnkgKyB2ZWN0b3IyLnk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODmeOCr+ODiOODq+OBrua4m+eul1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSB2ZWN0b3IyIOa4m+eul+OBmeOCi+ODmeOCr+ODiOODq+WApFxyXG4gICAgICAgICAqIEByZXR1cm4g5rib566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdWJzdHJhY3QodmVjdG9yMjogQ3ViaXNtVmVjdG9yMik6IEN1YmlzbVZlY3RvcjJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICAgICAgICAgIHJldC54ID0gdGhpcy54IC0gdmVjdG9yMi54O1xyXG4gICAgICAgICAgICByZXQueSA9IHRoaXMueSAtIHZlY3RvcjIueTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OZ44Kv44OI44Or44Gu5LmX566XXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIHZlY3RvcjIg5LmX566X44GZ44KL44OZ44Kv44OI44Or5YCkXHJcbiAgICAgICAgICogQHJldHVybiDkuZfnrpfntZDmnpzjgIDjg5njgq/jg4jjg6vlgKRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgbXVsdGlwbHkodmVjdG9yMjogQ3ViaXNtVmVjdG9yMik6IEN1YmlzbVZlY3RvcjJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICAgICAgICAgIHJldC54ID0gdGhpcy54ICogdmVjdG9yMi54O1xyXG4gICAgICAgICAgICByZXQueSA9IHRoaXMueSAqIHZlY3RvcjIueTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OZ44Kv44OI44Or44Gu5LmX566XKOOCueOCq+ODqeODvClcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gc2NhbGFyIOS5l+eul+OBmeOCi+OCueOCq+ODqeODvOWApFxyXG4gICAgICAgICAqIEByZXR1cm4g5LmX566X57WQ5p6c44CA44OZ44Kv44OI44Or5YCkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIG11bHRpcGx5QnlTY2FsZXIoc2NhbGFyOiBudW1iZXIpOiBDdWJpc21WZWN0b3IyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBseShuZXcgQ3ViaXNtVmVjdG9yMihzY2FsYXIsIHNjYWxhcikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OZ44Kv44OI44Or44Gu6Zmk566XXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIHZlY3RvcjIg6Zmk566X44GZ44KL44OZ44Kv44OI44Or5YCkXHJcbiAgICAgICAgICogQHJldHVybiDpmaTnrpfntZDmnpzjgIDjg5njgq/jg4jjg6vlgKRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZGl2aXNpb24odmVjdG9yMjogQ3ViaXNtVmVjdG9yMik6IEN1YmlzbVZlY3RvcjJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICAgICAgICAgIHJldC54ID0gdGhpcy54IC8gdmVjdG9yMi54O1xyXG4gICAgICAgICAgICByZXQueSA9IHRoaXMueSAvIHZlY3RvcjIueTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODmeOCr+ODiOODq+OBrumZpOeulyjjgrnjgqvjg6njg7wpXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIHNjYWxhciDpmaTnrpfjgZnjgovjgrnjgqvjg6njg7zlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOmZpOeul+e1kOaenOOAgOODmeOCr+ODiOODq+WApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBkaXZpc2lvbkJ5U2NhbGFyKHNjYWxhcjogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGl2aXNpb24obmV3IEN1YmlzbVZlY3RvcjIoc2NhbGFyLCBzY2FsYXIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODmeOCr+ODiOODq+OBrumVt+OBleOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4g44OZ44Kv44OI44Or44Gu6ZW344GVXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldExlbmd0aCgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODmeOCr+ODiOODq+OBrui3nembouOBruWPluW+l1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBhIOeCuVxyXG4gICAgICAgICAqIEByZXR1cm4g44OZ44Kv44OI44Or44Gu6Led6ZuiXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldERpc3RhbmNlV2l0aChhOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KCgodGhpcy54IC0gYS54KSAqICh0aGlzLnggLSBhLngpKSArICgodGhpcy55IC0gYS55KSAqICh0aGlzLnkgLSBhLnkpKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4njg4Pjg4jnqY3jga7oqIjnrpdcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gYSDlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIOe1kOaenFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBkb3QoYTogQ3ViaXNtVmVjdG9yMik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnggKiBhLngpICsgKHRoaXMueSAqIGEueSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmraPopo/ljJbjga7pgannlKhcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgbm9ybWFsaXplKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aDogbnVtYmVyID0gTWF0aC5wb3coKHRoaXMueCAqIHRoaXMueCkgKyAodGhpcy55ICogdGhpcy55KSwgMC41KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMueCAvIGxlbmd0aDtcclxuICAgICAgICAgICAgdGhpcy55ID0gdGhpcy55IC8gbGVuZ3RoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog562J44GX44GV44Gu56K66KqN77yI562J44GX44GE44GL77yf77yJXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICog5YCk44GM562J44GX44GE44GL77yfXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIHJocyDnorroqo3jgZnjgovlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWUg5YCk44Gv562J44GX44GEXHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZSDlgKTjga/nrYnjgZfjgY/jgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNFcXVhbChyaHM6IEN1YmlzbVZlY3RvcjIpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMueCA9PSByaHMueCkgJiYgKHRoaXMueSA9PSByaHMueSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnrYnjgZfjgZXjga7norroqo3vvIjnrYnjgZfjgY/jgarjgYTjgYvvvJ/vvIlcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiDlgKTjgYznrYnjgZfjgY/jgarjgYTjgYvvvJ9cclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gcmhzIOeiuuiqjeOBmeOCi+WApFxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDlgKTjga/nrYnjgZfjgY/jgarjgYRcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOWApOOBr+etieOBl+OBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc05vdEVxdWFsKHJoczogQ3ViaXNtVmVjdG9yMik6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAhKHRoaXMuaXNFcXVhbChyaHMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsfSBmcm9tIFwiLi9jdWJpc21tb2RlbFwiO1xyXG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcclxuaW1wb3J0IHsgQ1NNX0FTU0VSVCB9IGZyb20gXCIuLi91dGlscy9jdWJpc21kZWJ1Z1wiO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmtcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiBNb2Pjg4fjg7zjgr/jga7nrqHnkIZcclxuICAgICAqIFxyXG4gICAgICogTW9j44OH44O844K/44Gu566h55CG44KS6KGM44GG44Kv44Op44K544CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBDdWJpc21Nb2NcclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNb2Pjg4fjg7zjgr/jga7kvZzmiJBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShtb2NCeXRlczogQXJyYXlCdWZmZXIpOiBDdWJpc21Nb2NcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBjdWJpc21Nb2M6IEN1YmlzbU1vYyA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBtb2M6IExpdmUyREN1YmlzbUNvcmUuTW9jID0gTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MuZnJvbUFycmF5QnVmZmVyKG1vY0J5dGVzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChtb2MpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGN1YmlzbU1vYyA9IG5ldyBDdWJpc21Nb2MobW9jKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGN1YmlzbU1vYztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1vY+ODh+ODvOOCv+OCkuWJiumZpFxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIE1vY+ODh+ODvOOCv+OCkuWJiumZpOOBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vYzogQ3ViaXNtTW9jKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbW9jLl9tb2MuX3JlbGVhc2UoKTtcclxuICAgICAgICAgICAgbW9jLl9tb2MgPSBudWxsO1xyXG4gICAgICAgICAgICBtb2MgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg4fjg6vjgpLkvZzmiJDjgZnjgotcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcmV0dXJuIE1vY+ODh+ODvOOCv+OBi+OCieS9nOaIkOOBleOCjOOBn+ODouODh+ODq1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNyZWF0ZU1vZGVsKCk6IEN1YmlzbU1vZGVsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAgbGV0IGN1YmlzbU1vZGVsOiBDdWJpc21Nb2RlbCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgbGV0IG1vZGVsOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsID0gTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbC5mcm9tTW9jKHRoaXMuX21vYyk7XHJcblxyXG4gICAgICAgICAgICAgaWYgKG1vZGVsKVxyXG4gICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY3ViaXNtTW9kZWwgPSBuZXcgQ3ViaXNtTW9kZWwobW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgY3ViaXNtTW9kZWwuaW5pdGlhbGl6ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICsrdGhpcy5fbW9kZWxDb3VudDtcclxuICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICByZXR1cm4gY3ViaXNtTW9kZWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg4fjg6vjgpLliYrpmaTjgZnjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBkZWxldGVNb2RlbChtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihtb2RlbCAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5yZWxlYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBtb2RlbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAtLXRoaXMuX21vZGVsQ291bnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwcml2YXRlIGNvbnN0cnVjdG9yKG1vYzogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9tb2MgPSBtb2M7XHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsQ291bnQgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJlbGVhc2UoKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ1NNX0FTU0VSVCh0aGlzLl9tb2RlbENvdW50ID09IDApO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fbW9jLl9yZWxlYXNlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX21vYyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfbW9jOiBMaXZlMkRDdWJpc21Db3JlLk1vYzsgLy8vPCBNb2Pjg4fjg7zjgr9cclxuICAgICAgICBfbW9kZWxDb3VudDogbnVtYmVyOyAgICAgICAgLy8vPCBNb2Pjg4fjg7zjgr/jgYvjgonkvZzjgonjgozjgZ/jg6Ljg4fjg6vjga7lgIvmlbBcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwOi8vbGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL0NvcmUvbGl2ZTJkY3ViaXNtY29yZVwiIC8+XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbXJlbmRlcmVyfSBmcm9tIFwiLi4vcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkfSBmcm9tIFwiLi4vaWQvY3ViaXNtaWRcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrfSBmcm9tIFwiLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbW1hcH0gZnJvbSBcIi4uL3R5cGUvY3NtbWFwXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3Rvcn0gZnJvbSBcIi4uL3R5cGUvY3NtdmVjdG9yXCI7XHJcbmltcG9ydCB7Q1NNX0FTU0VSVH0gZnJvbSBcIi4uL3V0aWxzL2N1YmlzbWRlYnVnXCI7XHJcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBjdWJpc21mcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xyXG5pbXBvcnQgQ3ViaXNtQmxlbmRNb2RlID0gY3ViaXNtcmVuZGVyZXIuQ3ViaXNtQmxlbmRNb2RlO1xyXG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcclxuaW1wb3J0IGNzbU1hcCA9IGNzbW1hcC5jc21NYXA7XHJcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmtcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiDjg6Ljg4fjg6tcclxuICAgICAqIFxyXG4gICAgICogTW9j44OH44O844K/44GL44KJ55Sf5oiQ44GV44KM44KL44Oi44OH44Or44Gu44Kv44Op44K544CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbFxyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyB1cGRhdGUoKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gVXBkYXRlIG1vZGVsXHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fbW9kZWwuZHJhd2FibGVzLnJlc2V0RHluYW1pY0ZsYWdzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgq3jg6Pjg7Pjg5Djgrnjga7luYXjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0Q2FudmFzV2lkdGgoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbW9kZWwgPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vZGVsLmNhbnZhc2luZm8uQ2FudmFzV2lkdGggLyB0aGlzLl9tb2RlbC5jYW52YXNpbmZvLlBpeGVsc1BlclVuaXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgq3jg6Pjg7Pjg5Djgrnjga7pq5jjgZXjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0Q2FudmFzSGVpZ2h0KCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX21vZGVsID09IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5jYW52YXNpbmZvLkNhbnZhc0hlaWdodCAvIHRoaXMuX21vZGVsLmNhbnZhc2luZm8uUGl4ZWxzUGVyVW5pdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODkeODqeODoeODvOOCv+OCkuS/neWtmOOBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzYXZlUGFyYW1ldGVycygpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcclxuICAgICAgICAgICAgY29uc3Qgc2F2ZWRQYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLmdldFNpemUoKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBwYXJhbWV0ZXJDb3VudDsgKytpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IHNhdmVkUGFyYW1ldGVyQ291bnQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLnNldChpLCB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NhdmVkUGFyYW1ldGVycy5wdXNoQmFjayh0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg4fjg6vjgpLlj5blvpdcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW9kZWwoKTogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vZGVsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K544KS5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIHBhcnRJZCDjg5Hjg7zjg4Tjga5JRFxyXG4gICAgICAgICAqIEByZXR1cm4g44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFBhcnRJbmRleChwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgcGFydEluZGV4OiBudW1iZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFydHMuY291bnQ7XHJcblxyXG4gICAgICAgICAgICBmb3IocGFydEluZGV4ID0gMDsgcGFydEluZGV4IDwgcGFydENvdW50OyArK3BhcnRJbmRleClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYocGFydElkID09IHRoaXMuX3BhcnRJZHMuYXQocGFydEluZGV4KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDjg6Ljg4fjg6vjgavlrZjlnKjjgZfjgabjgYTjgarjgYTloLTlkIjjgIHpnZ7lrZjlnKjjg5Hjg7zjg4RJROODquOCueODiOWGheOBq+OBguOCi+OBi+OCkuaknOe0ouOBl+OAgeOBneOBruOCpOODs+ODh+ODg+OCr+OCueOCkui/lOOBmVxyXG4gICAgICAgICAgICBpZih0aGlzLl9ub3RFeGlzdFBhcnRJZC5pc0V4aXN0KHBhcnRJZCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcnRJZC5nZXRWYWx1ZShwYXJ0SWQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDpnZ7lrZjlnKjjg5Hjg7zjg4RJROODquOCueODiOOBq+OBquOBhOWgtOWQiOOAgeaWsOOBl+OBj+imgee0oOOCkui/veWKoOOBmeOCi1xyXG4gICAgICAgICAgICBwYXJ0SW5kZXggPSBwYXJ0Q291bnQgKyB0aGlzLl9ub3RFeGlzdFBhcnRJZC5nZXRTaXplKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX25vdEV4aXN0UGFydElkLnNldFZhbHVlKHBhcnRJZCwgcGFydEluZGV4KTtcclxuICAgICAgICAgICAgdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmFwcGVuZEtleShwYXJ0SW5kZXgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnRJbmRleDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODkeODvOODhOOBruWAi+aVsOOBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4g44OR44O844OE44Gu5YCL5pWwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFBhcnRDb3VudCgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFydHMuY291bnQ7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJ0Q291bnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7oqK3lrpooSW5kZXgpXHJcbiAgICAgICAgICogQHBhcmFtIHBhcnRJbmRleCDjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcGFyYW0gb3BhY2l0eSDkuI3pgI/mmI7luqZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRJbmRleDogbnVtYmVyLCBvcGFjaXR5OiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZih0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuaXNFeGlzdChwYXJ0SW5kZXgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuc2V0VmFsdWUocGFydEluZGV4LG9wYWNpdHkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjga7nr4Tlm7LlhoXmpJznn6VcclxuICAgICAgICAgICAgQ1NNX0FTU0VSVCgwIDw9IHBhcnRJbmRleCAmJiBwYXJ0SW5kZXggPCB0aGlzLmdldFBhcnRDb3VudCgpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3BhcnRPcGFjaXRpZXNbcGFydEluZGV4XSA9IG9wYWNpdHk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7oqK3lrpooSWQpXHJcbiAgICAgICAgICogQHBhcmFtIHBhcnRJZCDjg5Hjg7zjg4Tjga5JRFxyXG4gICAgICAgICAqIEBwYXJhbSBvcGFjaXR5IOODkeODvOODhOOBruS4jemAj+aYjuW6plxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRQYXJ0T3BhY2l0eUJ5SWQocGFydElkOiBDdWJpc21JZEhhbmRsZSwgb3BhY2l0eTogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8g6auY6YCf5YyW44Gu44Gf44KB44GrUGFydEluZGV444KS5Y+W5b6X44Gn44GN44KL5qmf5qeL44Gr44Gq44Gj44Gm44GE44KL44GM44CB5aSW6YOo44GL44KJ44Gu6Kit5a6a44Gu5pmC44Gv5ZG844Gz5Ye644GX6aC75bqm44GM5L2O44GE44Gf44KB5LiN6KaBXHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcnRJbmRleChwYXJ0SWQpO1xyXG5cclxuICAgICAgICAgICAgaWYoaW5kZXggPCAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIOODkeODvOODhOOBjOOBquOBhOOBruOBp+OCueOCreODg+ODl1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldFBhcnRPcGFjaXR5QnlJbmRleChpbmRleCwgb3BhY2l0eSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7lj5blvpcoaW5kZXgpXHJcbiAgICAgICAgICogQHBhcmFtIHBhcnRJbmRleCDjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOODkeODvOODhOOBruS4jemAj+aYjuW6plxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydEluZGV4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX25vdEV4aXN0UGFydE9wYWNpdGllcy5pc0V4aXN0KHBhcnRJbmRleCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIOODouODh+ODq+OBq+WtmOWcqOOBl+OBquOBhOODkeODvOODhElE44Gu5aC05ZCI44CB6Z2e5a2Y5Zyo44OR44O844OE44Oq44K544OI44GL44KJ5LiN6YCP5piO5bqm44KS6L+U44GZ44CCXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmdldFZhbHVlKHBhcnRJbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOOCpOODs+ODh+ODg+OCr+OCueOBruevhOWbsuWGheaknOefpVxyXG4gICAgICAgICAgICBDU01fQVNTRVJUKDAgPD0gcGFydEluZGV4ICYmIHBhcnRJbmRleCA8IHRoaXMuZ2V0UGFydENvdW50KCkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRPcGFjaXRpZXNbcGFydEluZGV4XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruWPluW+lyhpZClcclxuICAgICAgICAgKiBAcGFyYW0gcGFydElkIOODkeODvOODhOOBru+8qe+9hFxyXG4gICAgICAgICAqIEByZXR1cm4g44OR44O844OE44Gu5LiN6YCP5piO5bqmXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFBhcnRPcGFjaXR5QnlJZChwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyDpq5jpgJ/ljJbjga7jgZ/jgoHjgatQYXJ0SW5kZXjjgpLlj5blvpfjgafjgY3jgovmqZ/mp4vjgavjgarjgaPjgabjgYTjgovjgYzjgIHlpJbpg6jjgYvjgonjga7oqK3lrprjga7mmYLjga/lkbzjgbPlh7rjgZfpoLvluqbjgYzkvY7jgYTjgZ/jgoHkuI3opoFcclxuICAgICAgICAgICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFydEluZGV4KHBhcnRJZCk7XHJcblxyXG4gICAgICAgICAgICBpZihpbmRleCA8IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwOyAgIC8vIOODkeODvOODhOOBjOeEoeOBhOOBruOBp+OCueOCreODg+ODl1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJ0T3BhY2l0eUJ5SW5kZXgoaW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K544Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIOODkeODqeODoeODvOOCv0lEXHJcbiAgICAgICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW1ldGVySW5kZXg6IG51bWJlcjtcclxuICAgICAgICAgICAgY29uc3QgaWRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcclxuXHJcbiAgICAgICAgICAgIGZvcihwYXJhbWV0ZXJJbmRleCA9IDA7IHBhcmFtZXRlckluZGV4IDwgaWRDb3VudDsgKytwYXJhbWV0ZXJJbmRleClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYocGFyYW1ldGVySWQgIT0gdGhpcy5fcGFyYW1ldGVySWRzLmF0KHBhcmFtZXRlckluZGV4KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1ldGVySW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOODouODh+ODq+OBq+WtmOWcqOOBl+OBpuOBhOOBquOBhOWgtOWQiOOAgemdnuWtmOWcqOODkeODqeODoeODvOOCv0lE44Oq44K544OI5YaF44KS5qSc57Si44GX44CB44Gd44Gu44Kk44Oz44OH44OD44Kv44K544KS6L+U44GZXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX25vdEV4aXN0UGFyYW1ldGVySWQuaXNFeGlzdChwYXJhbWV0ZXJJZCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkLmdldFZhbHVlKHBhcmFtZXRlcklkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g6Z2e5a2Y5Zyo44OR44Op44Oh44O844K/SUTjg6rjgrnjg4jjgavjgarjgYTloLTlkIjmlrDjgZfjgY/opoHntKDjgpLov73liqDjgZnjgotcclxuICAgICAgICAgICAgcGFyYW1ldGVySW5kZXggPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmNvdW50ICsgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZC5nZXRTaXplKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkLnNldFZhbHVlKHBhcmFtZXRlcklkLCBwYXJhbWV0ZXJJbmRleCk7XHJcbiAgICAgICAgICAgIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmFwcGVuZEtleShwYXJhbWV0ZXJJbmRleCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcGFyYW1ldGVySW5kZXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgIvmlbDjga7lj5blvpdcclxuICAgICAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWAi+aVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmNvdW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OR44Op44Oh44O844K/44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu5pyA5aSn5YCkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFBhcmFtZXRlck1heGltdW1WYWx1ZShwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApOOBruWPluW+l1xyXG4gICAgICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRQYXJhbWV0ZXJNaW5pbXVtVmFsdWUocGFyYW1ldGVySW5kZXg6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWluaW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7jg4fjg5Xjgqnjg6vjg4jlgKTjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7jg4fjg5Xjgqnjg6vjg4jlgKRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0UGFyYW1ldGVyRGVmYXVsdFZhbHVlKHBhcmFtZXRlckluZGV4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLmRlZmF1bHRWYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4ICAgIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g44OR44Op44Oh44O844K/44Gu5YCkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZih0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5pc0V4aXN0KHBhcmFtZXRlckluZGV4KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmdldFZhbHVlKHBhcmFtZXRlckluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXHJcbiAgICAgICAgICAgIENTTV9BU1NFUlQoMCA8PSBwYXJhbWV0ZXJJbmRleCAmJiBwYXJhbWV0ZXJJbmRleCA8IHRoaXMuZ2V0UGFyYW1ldGVyQ291bnQoKSk7XHJcbiAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJJbmRleF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gcGFyYW1ldGVySWQgICAg44OR44Op44Oh44O844K/44GuSURcclxuICAgICAgICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQocGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyDpq5jpgJ/ljJbjga7jgZ/jgoHjgatwYXJhbWV0ZXJJbmRleOOCkuWPluW+l+OBp+OBjeOCi+apn+ani+OBq+OBquOBo+OBpuOBhOOCi+OBjOOAgeWklumDqOOBi+OCieOBruioreWumuOBruaZguOBr+WRvOOBs+WHuuOBl+mgu+W6puOBjOS9juOBhOOBn+OCgeS4jeimgVxyXG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJJbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7oqK3lrppcclxuICAgICAgICAgKiBAcGFyYW0gcGFyYW1ldGVySW5kZXgg44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIOODkeODqeODoeODvOOCv+OBruWApFxyXG4gICAgICAgICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyLCB3ZWlnaHQ6IG51bWJlciA9IDEuMCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmlzRXhpc3QocGFyYW1ldGVySW5kZXgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5zZXRWYWx1ZShcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAod2VpZ2h0ID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAodGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuZ2V0VmFsdWUocGFyYW1ldGVySW5kZXgpICogKDEgLSB3ZWlnaHQpKSArICh2YWx1ZSAqIHdlaWdodClcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjga7nr4Tlm7LlhoXmpJznn6VcclxuICAgICAgICAgICAgQ1NNX0FTU0VSVCgwIDw9IHBhcmFtZXRlckluZGV4ICYmIHBhcmFtZXRlckluZGV4IDwgdGhpcy5nZXRQYXJhbWV0ZXJDb3VudCgpKTtcclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPCB2YWx1ZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1heGltdW1WYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWluaW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPiB2YWx1ZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1pbmltdW1WYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbcGFyYW1ldGVySW5kZXhdID0gKHdlaWdodCA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbcGFyYW1ldGVySW5kZXhdID0gKHRoaXMuX3BhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJJbmRleF0gKiAoMSAtIHdlaWdodCkpICsgKHZhbHVlICogd2VpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruioreWumlxyXG4gICAgICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/jga5JRFxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSDjg5Hjg6njg6Hjg7zjgr/jga7lgKRcclxuICAgICAgICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQocGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLCB2YWx1ZTogbnVtYmVyLCB3ZWlnaHQ6IG51bWJlciA9IDEuMCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoaW5kZXgsIHZhbHVlLCB3ZWlnaHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5Yqg566XKGluZGV4KVxyXG4gICAgICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcGFyYW0gdmFsdWUg5Yqg566X44GZ44KL5YCkXHJcbiAgICAgICAgICogQHBhcmFtIHdlaWdodCDph43jgb9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYWRkUGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4OiBudW1iZXIsIHZhbHVlOiBudW1iZXIsIHdlaWdodDogbnVtYmVyID0gMS4wKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgsICh0aGlzLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCkgKyAodmFsdWUgKiB3ZWlnaHQpKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7liqDnrpcoaWQpXHJcbiAgICAgICAgICogQHBhcmFtIHBhcmFtZXRlcklkIOODkeODqeODoeODvOOCv++8qe+8pFxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSDliqDnrpfjgZnjgovlgKRcclxuICAgICAgICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQocGFyYW1ldGVySWQ6IGFueSwgdmFsdWU6IG51bWJlciwgd2VpZ2h0OiBudW1iZXIgPSAxLjApOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkUGFyYW1ldGVyVmFsdWVCeUluZGV4KGluZGV4LCB2YWx1ZSwgd2VpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruS5l+eul1xyXG4gICAgICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/jga5JRFxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSDkuZfnrpfjgZnjgovlgKRcclxuICAgICAgICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBtdWx0aXBseVBhcmFtZXRlclZhbHVlQnlJZChwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUsIHZhbHVlOiBudW1iZXIsIHdlaWdodDogbnVtYmVyID0gMS4wKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xyXG4gICAgICAgICAgICB0aGlzLm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUluZGV4KGluZGV4LCB2YWx1ZSwgd2VpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruS5l+eul1xyXG4gICAgICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcGFyYW0gdmFsdWXjgIDkuZfnrpfjgZnjgovlgKRcclxuICAgICAgICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBtdWx0aXBseVBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyLCB3ZWlnaHQ6IG51bWJlciA9IDEuMCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4LCAodGhpcy5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgpICogKDEuMCArICh2YWx1ZSAtIDEuMCkgKiB3ZWlnaHQpKSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gZHJhd2FibGVJZCBEcmF3YWJsZeOBrklEXHJcbiAgICAgICAgICogQHJldHVybiBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXREcmF3YWJsZUluZGV4KGRyYXdhYmxlSWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBkcmF3YWJsZUNvdW50ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBkcmF3YWJsZUluZGV4OiBudW1iZXIgPSAwOyBkcmF3YWJsZUluZGV4IDwgZHJhd2FibGVDb3VudDsgKytkcmF3YWJsZUluZGV4KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9kcmF3YWJsZUlkcy5hdChkcmF3YWJsZUluZGV4KSA9PSBkcmF3YWJsZUlkKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkcmF3YWJsZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEcmF3YWJsZeOBruWAi+aVsOOBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7lgIvmlbBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RHJhd2FibGVDb3VudCgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRyYXdhYmxlQ291bnQgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY291bnQ7XHJcbiAgICAgICAgICAgIHJldHVybiBkcmF3YWJsZUNvdW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRHJhd2FibGXjga5JROOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiBkcmF3YWJsZeOBrklEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldERyYXdhYmxlSWQoZHJhd2FibGVJbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcklkczogc3RyaW5nW10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuaWRzO1xyXG4gICAgICAgICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHBhcmFtZXRlcklkc1tkcmF3YWJsZUluZGV4XSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEcmF3YWJsZeOBruaPj+eUu+mghuODquOCueODiOOBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4gRHJhd2FibGXjga7mj4/nlLvpoIbjg6rjgrnjg4hcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RHJhd2FibGVSZW5kZXJPcmRlcnMoKTogSW50MzJBcnJheVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgcmVuZGVyT3JkZXJzOiBJbnQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnJlbmRlck9yZGVycztcclxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlck9yZGVycztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERyYXdhYmxl44Gu44OG44Kv44K544OB44Oj44Kk44Oz44OH44OD44Kv44K544Oq44K544OI44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu44OG44Kv44K544OB44Oj44Kk44Oz44OH44OD44Kv44K544Oq44K544OIXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldERyYXdhYmxlVGV4dHVyZUluZGljZXMoZHJhd2FibGVJbmRleDogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0dXJlSW5kaWNlczogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy50ZXh0dXJlSW5kaWNlcztcclxuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmVJbmRpY2VzW2RyYXdhYmxlSW5kZXhdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRHJhd2FibGXjga5WZXJ0ZXhQb3NpdGlvbnPjga7lpInljJbmg4XloLHjga7lj5blvpdcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp0RyYXdhYmxl44Gu6aCC54K55oOF5aCx44GM5aSJ5YyW44GX44Gf44GL44KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gICBkcmF3YWJsZUluZGV4ICAgRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dmFsICB0cnVlICAgIERyYXdhYmxl44Gu6aCC54K55oOF5aCx44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXHJcbiAgICAgICAgICogQHJldHZhbCAgZmFsc2UgICBEcmF3YWJsZeOBrumggueCueaDheWgseOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBpuOBhOOBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnVmVydGV4UG9zaXRpb25zRGlkQ2hhbmdlKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XHJcbiAgICAgICAgICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZUJpdChkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjga7lgIvmlbDjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjga7lgIvmlbBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhJbmRleENvdW50KGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXhDb3VudHM6IEludDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuaW5kZXhDb3VudHM7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleENvdW50c1tkcmF3YWJsZUluZGV4XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERyYXdhYmxl44Gu6aCC54K544Gu5YCL5pWw44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6aCC54K544Gu5YCL5pWwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldERyYXdhYmxlVmVydGV4Q291bnQoZHJhd2FibGVJbmRleDogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCB2ZXJ0ZXhDb3VudHMgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMudmVydGV4Q291bnRzO1xyXG4gICAgICAgICAgICByZXR1cm4gdmVydGV4Q291bnRzW2RyYXdhYmxlSW5kZXhdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRHJhd2FibGXjga7poILngrnjg6rjgrnjg4jjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBkcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjg6rjgrnjg4hcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0aWNlcyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBGbG9hdDMyQXJyYXlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERyYXdhYmxlVmVydGV4UG9zaXRpb25zKGRyYXdhYmxlSW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4jjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gZHJhcmFibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4hcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhJbmRpY2VzKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IFVpbnQxNkFycmF5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRpY2VzQXJyYXk6IFVpbnQxNkFycmF5W10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuaW5kaWNlcztcclxuICAgICAgICAgICAgcmV0dXJuIGluZGljZXNBcnJheVtkcmF3YWJsZUluZGV4XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERyYXdhYmxl44Gu6aCC54K544Oq44K544OI44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6aCC54K544Oq44K544OIXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldERyYXdhYmxlVmVydGV4UG9zaXRpb25zKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEZsb2F0MzJBcnJheVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgdmVydGljZXNBcnJheTogRmxvYXQzMkFycmF5W10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMudmVydGV4UG9zaXRpb25zO1xyXG4gICAgICAgICAgICByZXR1cm4gdmVydGljZXNBcnJheVtkcmF3YWJsZUluZGV4XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERyYXdhYmxl44Gu6aCC54K544GuVVbjg6rjgrnjg4jjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrlVVuODquOCueODiFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleFV2cyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBGbG9hdDMyQXJyYXlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHV2c0FycmF5OiBGbG9hdDMyQXJyYXlbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy52ZXJ0ZXhVdnM7XHJcbiAgICAgICAgICAgIHJldHVybiB1dnNBcnJheVtkcmF3YWJsZUluZGV4XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu5LiN6YCP5piO5bqmXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldERyYXdhYmxlT3BhY2l0eShkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wYWNpdGllczogRmxvYXQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLm9wYWNpdGllcztcclxuICAgICAgICAgICAgcmV0dXJuIG9wYWNpdGllc1tkcmF3YWJsZUluZGV4XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERyYXdhYmxl44Gu44Kr44Oq44Oz44Kw5oOF5aCx44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu44Kr44Oq44Oz44Kw5oOF5aCxXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldERyYXdhYmxlQ3VsbGluZyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBjb25zdGFudEZsYWdzID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvbnN0YW50RmxhZ3M7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gIUxpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzSXNEb3VibGVTaWRlZEJpdChjb25zdGFudEZsYWdzW2RyYXdhYmxlSW5kZXhdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRHJhd2FibGXjga7jg5bjg6zjg7Pjg4njg6Ljg7zjg4njgpLlj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4gZHJhd2FibGXjga7jg5bjg6zjg7Pjg4njg6Ljg7zjg4lcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RHJhd2FibGVCbGVuZE1vZGUoZHJhd2FibGVJbmRleDogbnVtYmVyKTogQ3ViaXNtQmxlbmRNb2RlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBjb25zdGFudEZsYWdzID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvbnN0YW50RmxhZ3M7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gKExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzQmxlbmRBZGRpdGl2ZUJpdChjb25zdGFudEZsYWdzW2RyYXdhYmxlSW5kZXhdKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX0FkZGl0aXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogKExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzQmxlbmRNdWx0aXBsaWNhdGl2ZUJpdChjb25zdGFudEZsYWdzW2RyYXdhYmxlSW5kZXhdKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEcmF3YWJsZeOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODquOCueODiOOBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4gRHJhd2FibGXjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg6rjgrnjg4hcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RHJhd2FibGVNYXNrcygpOiBJbnQzMkFycmF5W11cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hc2tzOiBJbnQzMkFycmF5W10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMubWFza3M7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXNrcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERyYXdhYmxl44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5YCL5pWw44Oq44K544OI44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiBEcmF3YWJsZeOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruWAi+aVsOODquOCueODiFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXREcmF3YWJsZU1hc2tDb3VudHMoKTogSW50MzJBcnJheVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgbWFza0NvdW50czogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tYXNrQ291bnRzO1xyXG4gICAgICAgICAgICByZXR1cm4gbWFza0NvdW50cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruS9v+eUqOeKtuaFi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLkvb/nlKjjgZfjgabjgYTjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+eUqOOBl+OBpuOBhOOBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc1VzaW5nTWFza2luZygpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IobGV0IGQ6IG51bWJlciA9IDA7IGQgPCB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY291bnQ7ICsrZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5fbW9kZWwuZHJhd2FibGVzLm1hc2tDb3VudHNbZF0gPD0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERyYXdhYmxl44Gu6KGo56S65oOF5aCx44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWUgRHJhd2FibGXjgYzooajnpLpcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIERyYXdhYmxl44GM6Z2e6KGo56S6XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldERyYXdhYmxlRHluYW1pY0ZsYWdJc1Zpc2libGUoZHJhd2FibGVJbmRleDogbnVtYmVyKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcclxuICAgICAgICAgICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzSXNWaXNpYmxlQml0KGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEcmF3YWJsZeOBrkRyYXdPcmRlcuOBruWkieWMluaDheWgseOBruWPluW+l1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp2RyYXdhYmxl44GuZHJhd09yZGVy44GM5aSJ5YyW44GX44Gf44GL44KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICAgICAgICogZHJhd09yZGVy44GvYXJ0TWVzaOS4iuOBp+aMh+WumuOBmeOCizDjgYvjgokxMDAw44Gu5oOF5aCxXHJcbiAgICAgICAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggZHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWUgZHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgZ9cclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIGRyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44Gm44GE44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldERyYXdhYmxlRHluYW1pY0ZsYWdWaXNpYmlsaXR5RGlkQ2hhbmdlKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XHJcbiAgICAgICAgICAgIHJldHVybiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc1Zpc2liaWxpdHlEaWRDaGFuZ2VCaXQoZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44Gu5aSJ5YyW5oOF5aCx44Gu5Y+W5b6XXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnZHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBkcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSBEcmF3YWJsZeOBruS4jemAj+aYjuW6puOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBn1xyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2UgRHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgabjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ09wYWNpdHlEaWRDaGFuZ2UoZHJhd2FibGVJbmRleDogbnVtYmVyKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcclxuICAgICAgICAgICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzT3BhY2l0eURpZENoYW5nZUJpdChkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRHJhd2FibGXjga7mj4/nlLvpoIbluo/jga7lpInljJbmg4XloLHjga7lj5blvpdcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiDnm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgadEcmF3YWJsZeOBruaPj+eUu+OBrumghuW6j+OBjOWkieWMluOBl+OBn+OBi+OCkuWPluW+l+OBmeOCi+OAglxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44Gu5o+P55S744Gu6aCG5bqP44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZSBEcmF3YWJsZeOBruaPj+eUu+OBrumghuW6j+OBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBpuOBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnUmVuZGVyT3JkZXJEaWRDaGFuZ2UoZHJhd2FibGVJbmRleDogbnVtYmVyKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcclxuICAgICAgICAgICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzUmVuZGVyT3JkZXJEaWRDaGFuZ2VCaXQoZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOS/neWtmOOBleOCjOOBn+ODkeODqeODoeODvOOCv+OBruiqreOBv+i+vOOBv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBsb2FkUGFyYW1ldGVycygpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHNhdmVkUGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX3NhdmVkUGFyYW1ldGVycy5nZXRTaXplKCk7XHJcblxyXG4gICAgICAgICAgICBpZihwYXJhbWV0ZXJDb3VudCA+IHNhdmVkUGFyYW1ldGVyQ291bnQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtZXRlckNvdW50ID0gc2F2ZWRQYXJhbWV0ZXJDb3VudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgcGFyYW1ldGVyQ291bnQ7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW2ldID0gdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLmF0KGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDliJ3mnJ/ljJbjgZnjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaW5pdGlhbGl6ZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDU01fQVNTRVJUKHRoaXMuX21vZGVsKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmFtZXRlclZhbHVlcyA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMudmFsdWVzO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJ0T3BhY2l0aWVzID0gdGhpcy5fbW9kZWwucGFydHMub3BhY2l0aWVzO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJNYXhpbXVtVmFsdWVzID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzO1xyXG5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVySWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuaWRzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgcGFyYW1ldGVyQ291bnQ7ICsraSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJJZHMucHVzaEJhY2soQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHBhcmFtZXRlcklkc1tpXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0SWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLnBhcnRzLmlkcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFydHMuY291bnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgcGFydENvdW50OyArK2kpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFydElkcy5wdXNoQmFjayhDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQocGFydElkc1tpXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkcmF3YWJsZUlkczogc3RyaW5nW10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuaWRzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZHJhd2FibGVDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcihsZXQgaTogbnVtYmVyID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7ICsraSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcmF3YWJsZUlkcy5wdXNoQmFjayhDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoZHJhd2FibGVJZHNbaV0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICogQHBhcmFtIG1vZGVsIOODouODh+ODq1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihtb2RlbDogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsID0gbW9kZWw7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmFtZXRlclZhbHVlcyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmFtZXRlck1heGltdW1WYWx1ZXMgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fcGFydE9wYWNpdGllcyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3NhdmVkUGFyYW1ldGVycyA9IG5ldyBjc21WZWN0b3I8bnVtYmVyPigpO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xyXG4gICAgICAgICAgICB0aGlzLl9kcmF3YWJsZUlkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcnRJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fbm90RXhpc3RQYXJ0SWQgPSBuZXcgY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVySWQgPSBuZXcgY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzID0gbmV3IGNzbU1hcDxudW1iZXIsIG51bWJlcj4oKTtcclxuICAgICAgICAgICAgdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzID0gbmV3IGNzbU1hcDxudW1iZXIsIG51bWJlcj4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsLnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5fbW9kZWwgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfbm90RXhpc3RQYXJ0T3BhY2l0aWVzOiBjc21NYXA8bnVtYmVyLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7jg6rjgrnjg4hcclxuICAgICAgICBwcml2YXRlIF9ub3RFeGlzdFBhcnRJZDogY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+OyAgLy8g5a2Y5Zyo44GX44Gm44GE44Gq44GE44OR44O844OESUTjga7jg6rjgrnjg4hcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXM6IGNzbU1hcDxudW1iZXIsIG51bWJlcj47ICAgLy8g5a2Y5Zyo44GX44Gm44GE44Gq44GE44OR44Op44Oh44O844K/44Gu5YCk44Gu44Oq44K544OIXHJcbiAgICAgICAgcHJpdmF0ZSBfbm90RXhpc3RQYXJhbWV0ZXJJZDogY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiFxyXG5cclxuICAgICAgICBwcml2YXRlIF9zYXZlZFBhcmFtZXRlcnM6IGNzbVZlY3RvcjxudW1iZXI+OyAgICAgICAgICAgIC8vIOS/neWtmOOBleOCjOOBn+ODkeODqeODoeODvOOCv1xyXG5cclxuICAgICAgICBwcml2YXRlIF9tb2RlbDogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbDsgICAgICAgICAgICAgLy8g44Oi44OH44OrXHJcblxyXG4gICAgICAgIHByaXZhdGUgX3BhcmFtZXRlclZhbHVlczogRmxvYXQzMkFycmF5OyAgICAgICAgICAgIC8vIOODkeODqeODoeODvOOCv+OBruWApOOBruODquOCueODiFxyXG4gICAgICAgIHByaXZhdGUgX3BhcmFtZXRlck1heGltdW1WYWx1ZXM6IEZsb2F0MzJBcnJheTsgICAgIC8vIOODkeODqeODoeODvOOCv+OBruacgOWkp+WApOOBruODquOCueODiFxyXG4gICAgICAgIHByaXZhdGUgX3BhcmFtZXRlck1pbmltdW1WYWx1ZXM6IEZsb2F0MzJBcnJheTsgICAgIC8vIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApOOBruODquOCueODiFxyXG5cclxuICAgICAgICBwcml2YXRlIF9wYXJ0T3BhY2l0aWVzOiBGbG9hdDMyQXJyYXk7ICAgICAgICAgICAgICAgICAgICAgLy8g44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu44Oq44K544OIXHJcblxyXG4gICAgICAgIHByaXZhdGUgX3BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjtcclxuICAgICAgICBwcml2YXRlIF9wYXJ0SWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+O1xyXG4gICAgICAgIHByaXZhdGUgX2RyYXdhYmxlSWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+O1xyXG4gICAgfVxyXG59IiwiLypcclxuKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuKlxyXG4qIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4qL1xyXG5cclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWx1c2VyZGF0YWpzb259IGZyb20gXCIuL2N1YmlzbW1vZGVsdXNlcmRhdGFqc29uXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkfSBmcm9tIFwiLi4vaWQvY3ViaXNtaWRcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3Ntc3RyaW5nfSBmcm9tIFwiLi4vdHlwZS9jc21zdHJpbmdcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yfSBmcm9tIFwiLi4vdHlwZS9jc212ZWN0b3JcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrfSBmcm9tIFwiLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrXCI7XHJcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBjdWJpc21mcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xyXG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcclxuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XHJcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xyXG5pbXBvcnQgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gPSBjdWJpc21tb2RlbHVzZXJkYXRhanNvbi5DdWJpc21Nb2RlbFVzZXJEYXRhSnNvbjtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIGNvbnN0IEFydE1lc2g6IHN0cmluZyA9IFwiQXJ0TWVzaFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Om44O844K244O844OH44O844K/44Kk44Oz44K/44O844OV44Kn44O844K5XHJcbiAgICAgKiBcclxuICAgICAqIEpzb27jgYvjgonoqq3jgb/ovrzjgpPjgaDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgpLoqJjpjLLjgZfjgabjgYrjgY/jgZ/jgoHjga7mp4vpgKDkvZNcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlXHJcbiAgICB7XHJcbiAgICAgICAgdGFyZ2V0VHlwZTogQ3ViaXNtSWRIYW5kbGU7ICAgLy8g44Om44O844K244O844OH44O844K/44K/44O844Ky44OD44OI44K/44Kk44OXXHJcbiAgICAgICAgdGFyZ2V0SWQ6ICAgQ3ViaXNtSWRIYW5kbGU7ICAgLy8g44Om44O844K244O844OH44O844K/44K/44O844Ky44OD44OI44GuSURcclxuICAgICAgICB2YWx1ZTogICAgICBjc21TdHJpbmc7ICAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr9cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODpuODvOOCtuODh+ODvOOCv+OBrueuoeeQhuOCr+ODqeOCuVxyXG4gICAgICogXHJcbiAgICAgKiDjg6bjg7zjgrbjg4fjg7zjgr/jgpLjg63jg7zjg4njgIHnrqHnkIbjgIHmpJzntKLjgqTjg7Pjgr/jg7zjg5XjgqfjgqTjgrnjgIHop6PmlL7jgb7jgafjgpLooYzjgYbjgIJcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGFcclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7kvZzmiJBcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICAgICAgICogQHBhcmFtIHNpemUgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAgICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IEN1YmlzbU1vZGVsVXNlckRhdGFcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCByZXQ6IEN1YmlzbU1vZGVsVXNlckRhdGEgPSBuZXcgQ3ViaXNtTW9kZWxVc2VyRGF0YSgpO1xyXG5cclxuICAgICAgICAgICAgcmV0LnBhcnNlVXNlckRhdGEoYnVmZmVyLCBzaXplKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnoLTmo4TjgZnjgotcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gbW9kZWxVc2VyRGF0YSDnoLTmo4TjgZnjgovjgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShtb2RlbFVzZXJEYXRhOiBDdWJpc21Nb2RlbFVzZXJEYXRhKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYobW9kZWxVc2VyRGF0YSAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtb2RlbFVzZXJEYXRhLnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgIG1vZGVsVXNlckRhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBcnRNZXNo44Gu44Om44O844K244O844OH44O844K/44Gu44Oq44K544OI44Gu5Y+W5b6XXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jg6rjgrnjg4hcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0QXJ0TWVzaFVzZXJEYXRhcygpOiBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHVzZXJkYXRhMy5qc29u44Gu44OR44O844K5XHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGJ1ZmZlciAgICB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAgICAgICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHBhcnNlVXNlckRhdGEoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGpzb246IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uKGJ1ZmZlciwgc2l6ZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0eXBlT2ZBcnRNZXNoID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKEFydE1lc2gpO1xyXG4gICAgICAgICAgICBjb25zdCBub2RlQ291bnQ6IG51bWJlciA9IGpzb24uZ2V0VXNlckRhdGFDb3VudCgpO1xyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCBhZGROb2RlOiBDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSA9IG5ldyBDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGFkZE5vZGUudGFyZ2V0SWQgPSBqc29uLmdldFVzZXJEYXRhSWQoaSk7XHJcbiAgICAgICAgICAgICAgICBhZGROb2RlLnRhcmdldFR5cGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoanNvbi5nZXRVc2VyRGF0YVRhcmdldFR5cGUoaSkpO1xyXG4gICAgICAgICAgICAgICAgYWRkTm9kZS52YWx1ZSA9IG5ldyBjc21TdHJpbmcoanNvbi5nZXRVc2VyRGF0YVZhbHVlKGkpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMucHVzaEJhY2soYWRkTm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoYWRkTm9kZS50YXJnZXRUeXBlID09IHR5cGVPZkFydE1lc2gpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZS5wdXNoQmFjayhhZGROb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAganNvbi5yZWxlYXNlKCk7XHJcbiAgICAgICAgICAgIGpzb24gPSB2b2lkIDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fdXNlckRhdGFOb2RlcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FydE1lc2hVc2VyRGF0YU5vZGUgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICog44Om44O844K244O844OH44O844K/5qeL6YCg5L2T6YWN5YiX44KS6Kej5pS+44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJlbGVhc2UoKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fdXNlckRhdGFOb2Rlcy5nZXRTaXplKCk7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXNlckRhdGFOb2Rlcy5zZXQoaSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfdXNlckRhdGFOb2RlczogY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPjsgICAgICAgICAgLy8g44Om44O844K244O844OH44O844K/5qeL6YCg5L2T6YWN5YiXXHJcbiAgICAgICAgcHJpdmF0ZSBfYXJ0TWVzaFVzZXJEYXRhTm9kZTogY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPjsgICAgLy8g6Zay6Kan44Oq44K544OI44Gu5L+d5oyBXHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWpzb259IGZyb20gXCIuLi91dGlscy9jdWJpc21qc29uXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkfSBmcm9tIFwiLi4vaWQvY3ViaXNtaWRcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrfSBmcm9tIFwiLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrXCI7XHJcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBjdWJpc21mcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xyXG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcclxuaW1wb3J0IEN1YmlzbUpzb24gPSBjdWJpc21qc29uLkN1YmlzbUpzb247XHJcblxyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmtcclxue1xyXG4gICAgY29uc3QgTWV0YTogc3RyaW5nID0gXCJNZXRhXCI7XHJcbiAgICBjb25zdCBVc2VyRGF0YUNvdW50OiBzdHJpbmcgPSBcIlVzZXJEYXRhQ291bnRcIjtcclxuICAgIGNvbnN0IFRvdGFsVXNlckRhdGFTaXplOiBzdHJpbmcgPSBcIlRvdGFsVXNlckRhdGFTaXplXCI7XHJcbiAgICBjb25zdCBVc2VyRGF0YTogc3RyaW5nID0gXCJVc2VyRGF0YVwiO1xyXG4gICAgY29uc3QgVGFyZ2V0OiBzdHJpbmcgPSBcIlRhcmdldFwiO1xyXG4gICAgY29uc3QgSWQ6IHN0cmluZyA9IFwiSWRcIjtcclxuICAgIGNvbnN0IFZhbHVlOiBzdHJpbmcgPSBcIlZhbHVlXCI7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGFKc29uXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICogQHBhcmFtIGJ1ZmZlciAgICB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAgICAgICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2pzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJlbGVhc2UoKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ3ViaXNtSnNvbi5kZWxldGUodGhpcy5fanNvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/lgIvmlbDjga7lj5blvpdcclxuICAgICAgICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OBruWAi+aVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRVc2VyRGF0YUNvdW50KCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKE1ldGEpLmdldE1hcCgpLmdldFZhbHVlKFVzZXJEYXRhQ291bnQpLnRvSW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/nt4/mloflrZfliJfmlbDjga7lj5blvpdcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+e3j+aWh+Wtl+WIl+aVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRUb3RhbFVzZXJEYXRhU2l6ZSgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShNZXRhKS5nZXRNYXAoKS5nZXRWYWx1ZShUb3RhbFVzZXJEYXRhU2l6ZSkudG9JbnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruOCv+OCpOODl+OBruWPluW+l1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44K/44Kk44OXXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFVzZXJEYXRhVGFyZ2V0VHlwZShpOiBudW1iZXIpOiBzdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShVc2VyRGF0YSkuZ2V0VmVjdG9yKCkuYXQoaSkuZ2V0TWFwKCkuZ2V0VmFsdWUoVGFyZ2V0KS5nZXRSYXdTdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruOCv+ODvOOCsuODg+ODiElE44Gu5Y+W5b6XXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGkg44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgr/jg7zjgrLjg4Pjg4hJRFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRVc2VyRGF0YUlkKGk6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKFVzZXJEYXRhKS5nZXRWZWN0b3IoKS5hdChpKS5nZXRNYXAoKS5nZXRWYWx1ZShJZCkuZ2V0UmF3U3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Om44O844K244O844OH44O844K/44Gu5paH5a2X5YiX44Gu5Y+W5b6XXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGkg44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0VXNlckRhdGFWYWx1ZShpOiBudW1iZXIpOiBzdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShVc2VyRGF0YSkuZ2V0VmVjdG9yKCkuYXQoaSkuZ2V0TWFwKCkuZ2V0VmFsdWUoVmFsdWUpLmdldFJhd1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfanNvbjogQ3ViaXNtSnNvbjtcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwOi8vbGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrfSBmcm9tIFwiLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbm1hbmFnZXJ9IGZyb20gXCIuLi9tb3Rpb24vY3ViaXNtbW90aW9ubWFuYWdlclwiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc210YXJnZXRwb2ludH0gZnJvbSBcIi4uL21hdGgvY3ViaXNtdGFyZ2V0cG9pbnRcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWxtYXRyaXh9IGZyb20gXCIuLi9tYXRoL2N1YmlzbW1vZGVsbWF0cml4XCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vY30gZnJvbSBcIi4vY3ViaXNtbW9jXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsfSBmcm9tIFwiLi9jdWJpc21tb2RlbFwiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBhY3ViaXNtbW90aW9ufSBmcm9tIFwiLi4vbW90aW9uL2FjdWJpc21tb3Rpb25cIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW90aW9ufSBmcm9tIFwiLi4vbW90aW9uL2N1YmlzbW1vdGlvblwiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21leHByZXNzaW9ubW90aW9ufSBmcm9tIFwiLi4vbW90aW9uL2N1YmlzbWV4cHJlc3Npb25tb3Rpb25cIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtcG9zZX0gZnJvbSBcIi4uL2VmZmVjdC9jdWJpc21wb3NlXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsdXNlcmRhdGF9IGZyb20gXCIuL2N1YmlzbW1vZGVsdXNlcmRhdGFcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtcGh5c2ljc30gZnJvbSBcIi4uL3BoeXNpY3MvY3ViaXNtcGh5c2ljc1wiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZH0gZnJvbSBcIi4uL2lkL2N1YmlzbWlkXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZ30gZnJvbSBcIi4uL3R5cGUvY3Ntc3RyaW5nXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcn0gZnJvbSBcIi4uL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXJcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtYnJlYXRofSBmcm9tIFwiLi4vZWZmZWN0L2N1YmlzbWJyZWF0aFwiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21leWVibGlua30gZnJvbSBcIi4uL2VmZmVjdC9jdWJpc21leWVibGlua1wiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21yZW5kZXJlcl93ZWJnbH0gZnJvbSBcIi4uL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlcl9XZWJHTFwiO1xyXG5pbXBvcnQge0N1YmlzbUxvZ0Vycm9yLCBDdWJpc21Mb2dJbmZvfSBmcm9tIFwiLi4vdXRpbHMvY3ViaXNtZGVidWdcIjtcclxuaW1wb3J0IEN1YmlzbVJlbmRlcmVyX1dlYkdMID0gY3ViaXNtcmVuZGVyZXJfd2ViZ2wuQ3ViaXNtUmVuZGVyZXJfV2ViR0w7XHJcbmltcG9ydCBDdWJpc21FeWVCbGluayA9IGN1YmlzbWV5ZWJsaW5rLkN1YmlzbUV5ZUJsaW5rO1xyXG5pbXBvcnQgQ3ViaXNtQnJlYXRoID0gY3ViaXNtYnJlYXRoLkN1YmlzbUJyZWF0aDtcclxuaW1wb3J0IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciA9IGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlci5DdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXI7XHJcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xyXG5pbXBvcnQgQ29uc3RhbnQgPSBjdWJpc21mcmFtZXdvcmsuQ29uc3RhbnQ7XHJcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xyXG5pbXBvcnQgQ3ViaXNtUGh5c2ljcyA9IGN1YmlzbXBoeXNpY3MuQ3ViaXNtUGh5c2ljcztcclxuaW1wb3J0IEN1YmlzbU1vZGVsVXNlckRhdGEgPSBjdWJpc21tb2RlbHVzZXJkYXRhLkN1YmlzbU1vZGVsVXNlckRhdGE7XHJcbmltcG9ydCBDdWJpc21Qb3NlID0gY3ViaXNtcG9zZS5DdWJpc21Qb3NlO1xyXG5pbXBvcnQgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiA9IGN1YmlzbWV4cHJlc3Npb25tb3Rpb24uQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbjtcclxuaW1wb3J0IEN1YmlzbU1vdGlvbiA9IGN1YmlzbW1vdGlvbi5DdWJpc21Nb3Rpb247XHJcbmltcG9ydCBBQ3ViaXNtTW90aW9uID0gYWN1YmlzbW1vdGlvbi5BQ3ViaXNtTW90aW9uO1xyXG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcclxuaW1wb3J0IEN1YmlzbU1vYyA9IGN1YmlzbW1vYy5DdWJpc21Nb2M7XHJcbmltcG9ydCBDdWJpc21Nb2RlbE1hdHJpeCA9IGN1YmlzbW1vZGVsbWF0cml4LkN1YmlzbU1vZGVsTWF0cml4O1xyXG5pbXBvcnQgQ3ViaXNtVGFyZ2V0UG9pbnQgPSBjdWJpc210YXJnZXRwb2ludC5DdWJpc21UYXJnZXRQb2ludDtcclxuaW1wb3J0IEN1YmlzbU1vdGlvbk1hbmFnZXIgPSBjdWJpc21tb3Rpb25tYW5hZ2VyLkN1YmlzbU1vdGlvbk1hbmFnZXI7XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29ya1xyXG57XHJcbiAgICAvKipcclxuICAgICAqIOODpuODvOOCtuODvOOBjOWun+mam+OBq+S9v+eUqOOBmeOCi+ODouODh+ODq1xyXG4gICAgICogXHJcbiAgICAgKiDjg6bjg7zjgrbjg7zjgYzlrp/pmpvjgavkvb/nlKjjgZnjgovjg6Ljg4fjg6vjga7ln7rlupXjgq/jg6njgrnjgILjgZPjgozjgpLntpnmib/jgZfjgabjg6bjg7zjgrbjg7zjgYzlrp/oo4XjgZnjgovjgIJcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbVVzZXJNb2RlbFxyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneacn+WMlueKtuaFi+OBruWPluW+l1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIOWIneacn+WMluOBleOCjOOBpuOBhOOCi+eKtuaFi+OBi++8n1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSAgICAg5Yid5pyf5YyW44GV44KM44Gm44GE44KLXHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZSAgICDliJ3mnJ/ljJbjgZXjgozjgabjgYTjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNJbml0aWFsaXplZCgpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5pdGlhbGl6ZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDliJ3mnJ/ljJbnirbmhYvjga7oqK3lrppcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiDliJ3mnJ/ljJbnirbmhYvjgpLoqK3lrprjgZnjgovjgIJcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gdiDliJ3mnJ/ljJbnirbmhYtcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0SW5pdGlhbGl6ZWQodjogYm9vbGVhbik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOabtOaWsOeKtuaFi+OBruWPluW+l1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIOabtOaWsOOBleOCjOOBpuOBhOOCi+eKtuaFi+OBi++8n1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSAgICAg5pu05paw44GV44KM44Gm44GE44KLXHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZSAgICDmm7TmlrDjgZXjgozjgabjgYTjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNVcGRhdGluZygpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRpbmc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmm7TmlrDnirbmhYvjga7oqK3lrppcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiDmm7TmlrDnirbmhYvjgpLoqK3lrprjgZnjgotcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gdiDmm7TmlrDnirbmhYtcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0VXBkYXRpbmcodjogYm9vbGVhbik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0aW5nID0gdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODnuOCpuOCueODieODqeODg+OCsOaDheWgseOBruioreWumlxyXG4gICAgICAgICAqIEBwYXJhbSDjg4njg6njg4PjgrDjgZfjgabjgYTjgovjgqvjg7zjgr3jg6vjga5Y5L2N572uXHJcbiAgICAgICAgICogQHBhcmFtIOODieODqeODg+OCsOOBl+OBpuOBhOOCi+OCq+ODvOOCveODq+OBrlnkvY3nva5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0RHJhZ2dpbmcoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnTWFuYWdlci5zZXQoeCwgeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDliqDpgJ/luqbjga7mg4XloLHjgpLoqK3lrprjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0geCBY6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXHJcbiAgICAgICAgICogQHBhcmFtIHkgWei7uOaWueWQkeOBruWKoOmAn+W6plxyXG4gICAgICAgICAqIEBwYXJhbSB6IFrou7jmlrnlkJHjga7liqDpgJ/luqZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0QWNjZWxlcmF0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9hY2NlbGVyYXRpb25YID0geDtcclxuICAgICAgICAgICAgdGhpcy5fYWNjZWxlcmF0aW9uWSA9IHk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FjY2VsZXJhdGlvblogPSB6O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44OH44Or6KGM5YiX44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiDjg6Ljg4fjg6vooYzliJdcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW9kZWxNYXRyaXgoKTogQ3ViaXNtTW9kZWxNYXRyaXhcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb2RlbE1hdHJpeDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOS4jemAj+aYjuW6puOBruioreWumlxyXG4gICAgICAgICAqIEBwYXJhbSBhIOS4jemAj+aYjuW6plxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRPcGFjaXR5KGE6IG51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wYWNpdHkgPSBhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5LiN6YCP5piO5bqm44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDkuI3pgI/mmI7luqZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0T3BhY2l0eSgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcGFjaXR5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44OH44Or44OH44O844K/44KS6Kqt44G/6L6844KAXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGJ1ZmZlciAgICBtb2Mz44OV44Kh44Kk44Or44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGxvYWRNb2RlbChidWZmZXI6IEFycmF5QnVmZmVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fbW9jID0gQ3ViaXNtTW9jLmNyZWF0ZShidWZmZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl9tb2RlbCA9IHRoaXMuX21vYy5jcmVhdGVNb2RlbCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9tb2RlbC5zYXZlUGFyYW1ldGVycygpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCh0aGlzLl9tb2MgPT0gbnVsbCkgfHwgKHRoaXMuX21vZGVsID09IG51bGwpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Mb2dFcnJvcihcIkZhaWxlZCB0byBDcmVhdGVNb2RlbCgpLlwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fbW9kZWxNYXRyaXggPSBuZXcgQ3ViaXNtTW9kZWxNYXRyaXgodGhpcy5fbW9kZWwuZ2V0Q2FudmFzV2lkdGgoKSwgdGhpcy5fbW9kZWwuZ2V0Q2FudmFzSGVpZ2h0KCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz44OH44O844K/44KS6Kqt44G/6L6844KAXHJcbiAgICAgICAgICogQHBhcmFtIGJ1ZmZlciBtb3Rpb24zLmpzb27jg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcclxuICAgICAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSDjg6Ljg7zjgrfjg6fjg7Pjga7lkI3liY1cclxuICAgICAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCr+ODqeOCuVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBsb2FkTW90aW9uKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlciwgbmFtZTogc3RyaW5nKTogQUN1YmlzbU1vdGlvblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIEN1YmlzbU1vdGlvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOihqOaDheODh+ODvOOCv+OBruiqreOBv+i+vOOBv1xyXG4gICAgICAgICAqIEBwYXJhbSBidWZmZXIgZXhw44OV44Kh44Kk44Or44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICAgICAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICAgICAgICogQHBhcmFtIG5hbWUg6KGo5oOF44Gu5ZCN5YmNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGxvYWRFeHByZXNzaW9uKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlciwgbmFtZTogc3RyaW5nKTogQUN1YmlzbU1vdGlvblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg53jg7zjgrrjg4fjg7zjgr/jga7oqq3jgb/ovrzjgb9cclxuICAgICAgICAgKiBAcGFyYW0gYnVmZmVyIHBvc2UzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcclxuICAgICAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgbG9hZFBvc2UoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fcG9zZSA9IEN1YmlzbVBvc2UuY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg4fjg6vjgavku5jlsZ7jgZnjgovjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgpLoqq3jgb/ovrzjgoBcclxuICAgICAgICAgKiBAcGFyYW0gYnVmZmVyIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICAgICAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGxvYWRVc2VyRGF0YShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9tb2RlbFVzZXJEYXRhID0gQ3ViaXNtTW9kZWxVc2VyRGF0YS5jcmVhdGUoYnVmZmVyLCBzaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeJqeeQhua8lOeul+ODh+ODvOOCv+OBruiqreOBv+i+vOOBv1xyXG4gICAgICAgICAqIEBwYXJhbSBidWZmZXIgIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcclxuICAgICAgICAgKiBAcGFyYW0gc2l6ZSAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgbG9hZFBoeXNpY3MoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fcGh5c2ljcyA9IEN1YmlzbVBoeXNpY3MuY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlvZPjgZ/jgorliKTlrprjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gZHJhd2FibGVJZCDmpJzoqLzjgZfjgZ/jgYREcmF3YWJsZeOBrklEXHJcbiAgICAgICAgICogQHBhcmFtIHBvaW50WCBY5L2N572uXHJcbiAgICAgICAgICogQHBhcmFtIHBvaW50WSBZ5L2N572uXHJcbiAgICAgICAgICogQHJldHVybiB0cnVlIOODkuODg+ODiOOBl+OBpuOBhOOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2Ug44OS44OD44OI44GX44Gm44GE44Gq44GEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzSGl0KGRyYXdhYmxlSWQ6IEN1YmlzbUlkSGFuZGxlLCBwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBkcmF3SW5kZXg6IG51bWJlciA9IHRoaXMuX21vZGVsLmdldERyYXdhYmxlSW5kZXgoZHJhd2FibGVJZCk7XHJcblxyXG4gICAgICAgICAgICBpZihkcmF3SW5kZXggPCAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIOWtmOWcqOOBl+OBquOBhOWgtOWQiOOBr2ZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5nZXREcmF3YWJsZVZlcnRleENvdW50KGRyYXdJbmRleCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZlcnRpY2VzOiBGbG9hdDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5nZXREcmF3YWJsZVZlcnRpY2VzKGRyYXdJbmRleCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgbGVmdDogbnVtYmVyID0gdmVydGljZXNbMF07XHJcbiAgICAgICAgICAgIGxldCByaWdodDogbnVtYmVyID0gdmVydGljZXNbMF07XHJcbiAgICAgICAgICAgIGxldCB0b3A6IG51bWJlciA9IHZlcnRpY2VzWzFdO1xyXG4gICAgICAgICAgICBsZXQgYm90dG9tOiBudW1iZXIgPSB2ZXJ0aWNlc1sxXTtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgajogbnVtYmVyID0gMTsgaiA8IGNvdW50OyArK2opXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCB4ID0gdmVydGljZXNbQ29uc3RhbnQudmVydGV4T2Zmc2V0ICsgaiAqIENvbnN0YW50LnZlcnRleFN0ZXBdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHkgPSB2ZXJ0aWNlc1tDb25zdGFudC52ZXJ0ZXhPZmZzZXQgKyBqICogQ29uc3RhbnQudmVydGV4U3RlcCArIDFdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHggPCBsZWZ0KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSB4OyAvLyBNaW4geFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZih4ID4gcmlnaHQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSB4OyAvLyBNYXggeFxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHkgPCB0b3ApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wID0geTsgLy8gTWluIHlcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZih5ID4gYm90dG9tKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbSA9IHk7IC8vIE1heCB5XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHR4OiBudW1iZXIgPSB0aGlzLl9tb2RlbE1hdHJpeC5pbnZlcnRUcmFuc2Zvcm1YKHBvaW50WCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5OiBudW1iZXIgPSB0aGlzLl9tb2RlbE1hdHJpeC5pbnZlcnRUcmFuc2Zvcm1ZKHBvaW50WSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKChsZWZ0IDw9IHR4KSAmJiAodHggPD0gcmlnaHQpICYmICh0b3AgPD0gdHkpICYmICh0eSA8PSBib3R0b20pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODh+ODq+OBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4g44Oi44OH44OrXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE1vZGVsKCk6IEN1YmlzbU1vZGVsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6zjg7Pjg4Djg6njga7lj5blvpdcclxuICAgICAgICAgKiBAcmV0dXJuIOODrOODs+ODgOODqVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRSZW5kZXJlcigpOiBDdWJpc21SZW5kZXJlcl9XZWJHTFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Os44Oz44OA44Op44KS5L2c5oiQ44GX44Gm5Yid5pyf5YyW44KS5a6f6KGM44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNyZWF0ZVJlbmRlcmVyKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX3JlbmRlcmVyKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZVJlbmRlcmVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyID0gbmV3IEN1YmlzbVJlbmRlcmVyX1dlYkdMKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmluaXRpYWxpemUodGhpcy5fbW9kZWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Os44Oz44OA44Op44Gu6Kej5pS+XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGRlbGV0ZVJlbmRlcmVyKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX3JlbmRlcmVyICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kk44OZ44Oz44OI55m654Gr5pmC44Gu5qiZ5rqW5Yem55CGXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogRXZlbnTjgYzlho3nlJ/lh6bnkIbmmYLjgavjgYLjgaPjgZ/loLTlkIjjga7lh6bnkIbjgpLjgZnjgovjgIJcclxuICAgICAgICAgKiDntpnmib/jgafkuIrmm7jjgY3jgZnjgovjgZPjgajjgpLmg7PlrprjgZfjgabjgYTjgovjgIJcclxuICAgICAgICAgKiDkuIrmm7jjgY3jgZfjgarjgYTloLTlkIjjga/jg63jgrDlh7rlipvjgpLjgZnjgovjgIJcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gZXZlbnRWYWx1ZSDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjga7mloflrZfliJfjg4fjg7zjgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgbW90aW9uRXZlbnRGaXJlZChldmVudFZhbHVlOiBjc21TdHJpbmcpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDdWJpc21Mb2dJbmZvKFwiezB9XCIsIGV2ZW50VmFsdWUucyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqTjg5njg7Pjg4jnlKjjga7jgrPjg7zjg6vjg5Djg4Pjgq9cclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgavjgqTjg5njg7Pjg4jnlKjjgavnmbvpjLLjgZnjgovjgZ/jgoHjga5DYWxsYmFja+OAglxyXG4gICAgICAgICAqIEN1YmlzbVVzZXJNb2RlbOOBrue2meaJv+WFiOOBrkV2ZW50RmlyZWTjgpLlkbzjgbbjgIJcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gY2FsbGVyIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOCkueuoeeQhuOBl+OBpuOBhOOBn+ODouODvOOCt+ODp+ODs+ODnuODjeODvOOCuOODo+ODvOOAgeavlOi8g+eUqFxyXG4gICAgICAgICAqIEBwYXJhbSBldmVudFZhbHVlIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xyXG4gICAgICAgICAqIEBwYXJhbSBjdXN0b21EYXRhIEN1YmlzbVVzZXJNb2RlbOOCkue2meaJv+OBl+OBn+OCpOODs+OCueOCv+ODs+OCueOCkuaDs+WumlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgY3ViaXNtRGVmYXVsdE1vdGlvbkV2ZW50Q2FsbGJhY2soY2FsbGVyOiBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIsIGV2ZW50VmFsdWU6IGNzbVN0cmluZywgY3VzdG9tRGF0YTogQ3ViaXNtVXNlck1vZGVsKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IG1vZGVsOiBDdWJpc21Vc2VyTW9kZWwgPSBjdXN0b21EYXRhO1xyXG5cclxuICAgICAgICAgICAgaWYobW9kZWwgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbW9kZWwubW90aW9uRXZlbnRGaXJlZChldmVudFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIOWQhOWkieaVsOWIneacn+WMllxyXG4gICAgICAgICAgICB0aGlzLl9tb2MgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9tb2RlbCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2V5ZUJsaW5rID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fYnJlYXRoID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbW9kZWxNYXRyaXggPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9wb3NlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fZHJhZ01hbmFnZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbW9kZWxVc2VyRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX29wYWNpdHkgPSAxLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpcHN5bmMgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0TGlwU3luY1ZhbHVlID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnWCA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fZHJhZ1kgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2FjY2VsZXJhdGlvblggPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2FjY2VsZXJhdGlvblkgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2FjY2VsZXJhdGlvblogPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnTW9kZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjg57jg43jg7zjgrjjg6Pjg7zjgpLkvZzmiJBcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uTWFuYWdlciA9IG5ldyBDdWJpc21Nb3Rpb25NYW5hZ2VyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIuc2V0RXZlbnRDYWxsYmFjayhDdWJpc21Vc2VyTW9kZWwuY3ViaXNtRGVmYXVsdE1vdGlvbkV2ZW50Q2FsbGJhY2ssIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgLy8g6KGo5oOF44Oe44ON44O844K444Oj44O844KS5L2c5oiQXHJcbiAgICAgICAgICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyID0gbmV3IEN1YmlzbU1vdGlvbk1hbmFnZXIoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOODieODqeODg+OCsOOBq+OCiOOCi+OCouODi+ODoeODvOOCt+ODp+ODs1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnTWFuYWdlciA9IG5ldyBDdWJpc21UYXJnZXRQb2ludCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OH44K544OI44Op44Kv44K/44Gr55u45b2T44GZ44KL5Yem55CGXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJlbGVhc2UoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYodGhpcy5fbW90aW9uTWFuYWdlciAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLl9leHByZXNzaW9uTWFuYWdlciAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlci5yZWxlYXNlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlciA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX21vYyAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2MuZGVsZXRlTW9kZWwodGhpcy5fbW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbW9jLnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vYyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsTWF0cml4ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIEN1YmlzbVBvc2UuZGVsZXRlKHRoaXMuX3Bvc2UpO1xyXG4gICAgICAgICAgICBDdWJpc21FeWVCbGluay5kZWxldGUodGhpcy5fZXllQmxpbmspO1xyXG4gICAgICAgICAgICBDdWJpc21CcmVhdGguZGVsZXRlKHRoaXMuX2JyZWF0aCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLl9kcmFnTWFuYWdlciA9IG51bGw7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBDdWJpc21QaHlzaWNzLmRlbGV0ZSh0aGlzLl9waHlzaWNzKTtcclxuICAgICAgICAgICAgQ3ViaXNtTW9kZWxVc2VyRGF0YS5kZWxldGUodGhpcy5fbW9kZWxVc2VyRGF0YSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRlbGV0ZVJlbmRlcmVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgX21vYzogICAgICAgICAgICAgICAgIEN1YmlzbU1vYzsgICAgICAgICAgICAgIC8vIE1vY+ODh+ODvOOCv1xyXG4gICAgICAgIHByb3RlY3RlZCBfbW9kZWw6ICAgICAgICAgICAgICAgQ3ViaXNtTW9kZWw7ICAgICAgICAgICAgLy8gTW9kZWzjgqTjg7Pjgrnjgr/jg7PjgrlcclxuIFxyXG4gICAgICAgIHByb3RlY3RlZCBfbW90aW9uTWFuYWdlcjogICAgICAgQ3ViaXNtTW90aW9uTWFuYWdlcjsgICAgLy8g44Oi44O844K344On44Oz566h55CGXHJcbiAgICAgICAgcHJvdGVjdGVkIF9leHByZXNzaW9uTWFuYWdlcjogICBDdWJpc21Nb3Rpb25NYW5hZ2VyOyAgICAvLyDooajmg4XnrqHnkIZcclxuICAgICAgICBwcm90ZWN0ZWQgX2V5ZUJsaW5rOiAgICAgICAgICAgIEN1YmlzbUV5ZUJsaW5rOyAgICAgICAgIC8vIOiHquWLleOBvuOBsOOBn+OBjVxyXG4gICAgICAgIHByb3RlY3RlZCBfYnJlYXRoOiAgICAgICAgICAgICAgQ3ViaXNtQnJlYXRoOyAgICAgICAgICAgLy8g5ZG85ZC4XHJcbiAgICAgICAgcHJvdGVjdGVkIF9tb2RlbE1hdHJpeDogICAgICAgICBDdWJpc21Nb2RlbE1hdHJpeDsgICAgICAvLyDjg6Ljg4fjg6vooYzliJdcclxuICAgICAgICBwcm90ZWN0ZWQgX3Bvc2U6ICAgICAgICAgICAgICAgIEN1YmlzbVBvc2U7ICAgICAgICAgICAgIC8vIOODneODvOOCuueuoeeQhlxyXG4gICAgICAgIHByb3RlY3RlZCBfZHJhZ01hbmFnZXI6ICAgICAgICAgQ3ViaXNtVGFyZ2V0UG9pbnQ7ICAgICAgLy8g44Oe44Km44K544OJ44Op44OD44KwXHJcbiAgICAgICAgcHJvdGVjdGVkIF9waHlzaWNzOiAgICAgICAgICAgICBDdWJpc21QaHlzaWNzOyAgICAgICAgICAvLyDniannkIbmvJTnrpdcclxuICAgICAgICBwcm90ZWN0ZWQgX21vZGVsVXNlckRhdGE6ICAgICAgIEN1YmlzbU1vZGVsVXNlckRhdGE7ICAgIC8vIOODpuODvOOCtuODvOODh+ODvOOCv1xyXG4gXHJcbiAgICAgICAgcHJvdGVjdGVkIF9pbml0aWFsaXplZDogICAgICAgICBib29sZWFuOyAgICAvLyDliJ3mnJ/ljJbjgZXjgozjgZ/jgYvjganjgYbjgYtcclxuICAgICAgICBwcm90ZWN0ZWQgX3VwZGF0aW5nOiAgICAgICAgICAgIGJvb2xlYW47ICAgIC8vIOabtOaWsOOBleOCjOOBn+OBi+OBqeOBhuOBi1xyXG4gICAgICAgIHByb3RlY3RlZCBfb3BhY2l0eTogICAgICAgICAgICAgbnVtYmVyOyAgICAgLy8g5LiN6YCP5piO5bqmXHJcbiAgICAgICAgcHJvdGVjdGVkIF9saXBzeW5jOiAgICAgICAgICAgICBib29sZWFuOyAgICAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jgZnjgovjgYvjganjgYbjgYtcclxuICAgICAgICBwcm90ZWN0ZWQgX2xhc3RMaXBTeW5jVmFsdWU6ICAgIG51bWJlcjsgICAgIC8vIOacgOW+jOOBruODquODg+ODl+OCt+ODs+OCr+OBruWItuW+oeWcsFxyXG4gICAgICAgIHByb3RlY3RlZCBfZHJhZ1g6ICAgICAgICAgICAgICAgbnVtYmVyOyAgICAgLy8g44Oe44Km44K544OJ44Op44OD44Kw44GuWOS9jee9rlxyXG4gICAgICAgIHByb3RlY3RlZCBfZHJhZ1k6ICAgICAgICAgICAgICAgbnVtYmVyOyAgICAgLy8g44Oe44Km44K544OJ44Op44OD44Kw44GuWeS9jee9rlxyXG4gICAgICAgIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWDogICAgICAgbnVtYmVyOyAgICAgLy8gWOi7uOaWueWQkeOBruWKoOmAn+W6plxyXG4gICAgICAgIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWTogICAgICAgbnVtYmVyOyAgICAgLy8gWei7uOaWueWQkeOBruWKoOmAn+W6plxyXG4gICAgICAgIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWjogICAgICAgbnVtYmVyOyAgICAgLy8gWui7uOaWueWQkeOBruWKoOmAn+W6plxyXG4gICAgICAgIHByb3RlY3RlZCBfZGVidWdNb2RlOiAgICAgICAgICAgYm9vbGVhbjsgICAgLy8g44OH44OQ44OD44Kw44Oi44O844OJ44GL44Gp44GG44GLXHJcblxyXG4gICAgICAgIHByaXZhdGUgX3JlbmRlcmVyOiBDdWJpc21SZW5kZXJlcl9XZWJHTDsgICAgICAgICAgICAgICAgICAvLyDjg6zjg7Pjg4Djg6lcclxuICAgIH1cclxuXHJcbn0iLCIvKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1hdGh9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0aCc7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlZW50cnl9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVlbnRyeSc7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZ30gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3J9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcclxuaW1wb3J0IHsgQ1NNX0FTU0VSVCB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcclxuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XHJcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGN1YmlzbW1vdGlvbnF1ZXVlZW50cnkuQ3ViaXNtTW90aW9uUXVldWVFbnRyeTtcclxuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XHJcbmltcG9ydCBDdWJpc21NYXRoID0gY3ViaXNtbWF0aC5DdWJpc21NYXRoO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmtcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7mir3osaHln7rlupXjgq/jg6njgrlcclxuICAgICAqIFxyXG4gICAgICog44Oi44O844K344On44Oz44Gu5oq96LGh5Z+65bqV44Kv44Op44K544CCTW90aW9uUXVldWVNYW5hZ2Vy44Gr44KI44Gj44Gm44Oi44O844K344On44Oz44Gu5YaN55Sf44KS566h55CG44GZ44KL44CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBQ3ViaXNtTW90aW9uXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBkZWxldGUobW90aW9uOiBBQ3ViaXNtTW90aW9uKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbW90aW9uLnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgbW90aW9uID0gdm9pZCAwO1xyXG4gICAgICAgICAgICBtb3Rpb24gPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHMgPSAtMS4wO1xyXG4gICAgICAgICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IC0xLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlaWdodCA9IDEuMDtcclxuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0U2Vjb25kcyA9IDAuMDsgIC8vIOWGjeeUn+OBrumWi+Wni+aZguWIu1xyXG4gICAgICAgICAgICB0aGlzLl9maXJlZEV2ZW50VmFsdWVzID0gbmV3IGNzbVZlY3Rvcjxjc21TdHJpbmc+KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl93ZWlnaHQgPSAwLjA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr9cclxuICAgICAgICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXHJcbiAgICAgICAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnkgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gn566h55CG44GV44KM44Gm44GE44KL44Oi44O844K344On44OzXHJcbiAgICAgICAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKG1vZGVsOiBDdWJpc21Nb2RlbCwgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSwgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZighbW90aW9uUXVldWVFbnRyeS5pc0F2YWlsYWJsZSgpIHx8IG1vdGlvblF1ZXVlRW50cnkuaXNGaW5pc2hlZCgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKCFtb3Rpb25RdWV1ZUVudHJ5LmlzU3RhcnRlZCgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldElzU3RhcnRlZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0U3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX29mZnNldFNlY29uZHMpOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLvjgpLoqJjpjLJcclxuICAgICAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0RmFkZUluU3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyk7IC8vIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGR1cmF0aW9uOiBudW1iZXIgPSB0aGlzLmdldER1cmF0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOmWi+Wni+OBl+OBpuOBhOOBquOBhOOBhuOBoeOBq+e1guS6huioreWumuOBl+OBpuOBhOOCi+WgtOWQiOOBjOOBguOCi+OAglxyXG4gICAgICAgICAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0RW5kVGltZSgoZHVyYXRpb24gPD0gMCkgPyAtMSA6IG1vdGlvblF1ZXVlRW50cnkuZ2V0U3RhcnRUaW1lKCkgKyBkdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZHVyYXRpb24gPT0gLTEg44Gu5aC05ZCI44Gv44Or44O844OX44GZ44KLXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBmYWRlV2VpZ2h0OiBudW1iZXIgPSB0aGlzLl93ZWlnaHQ7IC8vIOePvuWcqOOBruWApOOBqOaOm+OBkeWQiOOCj+OBm+OCi+WJsuWQiFxyXG5cclxuICAgICAgICAgICAgLy8tLS0tIOODleOCp+ODvOODieOCpOODs+ODu+OCouOCpuODiOOBruWHpueQhiAtLS0tXHJcbiAgICAgICAgICAgIC8vIOWNmOe0lOOBquOCteOCpOODs+mWouaVsOOBp+OCpOODvOOCuOODs+OCsOOBmeOCi1xyXG4gICAgICAgICAgICBjb25zdCBmYWRlSW46IG51bWJlciA9IHRoaXMuX2ZhZGVJblNlY29uZHMgPT0gMC4wXHJcbiAgICAgICAgICAgICAgICAgICAgPyAxLjBcclxuICAgICAgICAgICAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZSgodXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlSW5TdGFydFRpbWUoKSkgLyB0aGlzLl9mYWRlSW5TZWNvbmRzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZhZGVPdXQ6IG51bWJlciA9ICh0aGlzLl9mYWRlT3V0U2Vjb25kcyA9PSAwLjAgfHwgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjApXHJcbiAgICAgICAgICAgICAgICAgICAgPyAxLjBcclxuICAgICAgICAgICAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZSgobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC8gdGhpcy5fZmFkZU91dFNlY29uZHMpO1xyXG5cclxuICAgICAgICAgICAgZmFkZVdlaWdodCA9IGZhZGVXZWlnaHQgKiBmYWRlSW4gKiBmYWRlT3V0O1xyXG5cclxuICAgICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGF0ZSh1c2VyVGltZVNlY29uZHMsIGZhZGVXZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgQ1NNX0FTU0VSVCgwLjAgPD0gZmFkZVdlaWdodCAmJiBmYWRlV2VpZ2h0IDw9IDEuMCk7XHJcblxyXG4gICAgICAgICAgICAvLy0tLS0g5YWo44Gm44Gu44OR44Op44Oh44O844K/SUTjgpLjg6vjg7zjg5fjgZnjgosgLS0tLVxyXG4gICAgICAgICAgICB0aGlzLmRvVXBkYXRlUGFyYW1ldGVycyhtb2RlbCwgdXNlclRpbWVTZWNvbmRzLCBmYWRlV2VpZ2h0LCBtb3Rpb25RdWV1ZUVudHJ5KTtcclxuXHJcbiAgICAgICAgICAgIC8vIOW+jOWHpueQhlxyXG4gICAgICAgICAgICAvLyDntYLkuobmmYLliLvjgpLpgY7jgY7jgZ/jgonntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgosoQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyKVxyXG4gICAgICAgICAgICBpZigobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPiAwKSAmJiAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCB1c2VyVGltZVNlY29uZHMpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldElzRmluaXNoZWQodHJ1ZSk7IC8vIOe1guS6hlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7mmYLplpPjgpLoqK3lrprjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gZmFkZUluU2Vjb25kcyDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRGYWRlSW5UaW1lKGZhZGVJblNlY29uZHM6IG51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHMgPSBmYWRlSW5TZWNvbmRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OV44Kn44O844OJ44Ki44Km44OI44Gu5pmC6ZaT44KS6Kit5a6a44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIGZhZGVPdXRTZWNvbmRzIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldEZhZGVPdXRUaW1lKGZhZGVPdXRTZWNvbmRzOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IGZhZGVPdXRTZWNvbmRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaT44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRGYWRlT3V0VGltZSgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mYWRlT3V0U2Vjb25kcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk+OBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0RmFkZUluVGltZSgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mYWRlSW5TZWNvbmRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz6YGp55So44Gu6YeN44G/44Gu6Kit5a6aXHJcbiAgICAgICAgICogQHBhcmFtIHdlaWdodCDph43jgb/vvIgwLjAgLSAxLjDvvIlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0V2VpZ2h0KHdlaWdodDogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fd2VpZ2h0ID0gd2VpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz6YGp55So44Gu6YeN44G/44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDph43jgb/vvIgwLjAgLSAxLjDvvIlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0V2VpZ2h0KCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBrumVt+OBleOBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAbm90ZSDjg6vjg7zjg5fjga7mmYLjga/jgIwtMeOAjeOAglxyXG4gICAgICAgICAqICAgICAgIOODq+ODvOODl+OBp+OBquOBhOWgtOWQiOOBr+OAgeOCquODvOODkOODvOODqeOCpOODieOBmeOCi+OAglxyXG4gICAgICAgICAqICAgICAgIOato+OBruWApOOBruaZguOBr+WPluW+l+OBleOCjOOCi+aZgumWk+OBp+e1guS6huOBmeOCi+OAglxyXG4gICAgICAgICAqICAgICAgIOOAjC0x44CN44Gu5pmC44Gv5aSW6YOo44GL44KJ5YGc5q2i5ZG95Luk44GM44Gq44GE6ZmQ44KK57WC44KP44KJ44Gq44GE5Yem55CG44Go44Gq44KL44CCXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldER1cmF0aW9uKCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xLjA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5cx5Zue5YiG44Gu6ZW344GV44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5fkuIDlm57liIbjga7plbfjgZVb56eSXVxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBub3RlIOODq+ODvOODl+OBl+OBquOBhOWgtOWQiOOBr+OAgWdldER1cmF0aW9uKCnjgajlkIzjgZjlgKTjgpLov5TjgZlcclxuICAgICAgICAgKiAgICAgICDjg6vjg7zjg5fkuIDlm57liIbjga7plbfjgZXjgYzlrprnvqnjgafjgY3jgarjgYTloLTlkIgo44OX44Ot44Kw44Op44Og55qE44Gr5YuV44GN57aa44GR44KL44K144OW44Kv44Op44K544Gq44GpKeOBruWgtOWQiOOBr+OAjC0x44CN44KS6L+U44GZXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldExvb3BEdXJhdGlvbigpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMS4wO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz5YaN55Sf44Gu6ZaL5aeL5pmC5Yi744Gu6Kit5a6aXHJcbiAgICAgICAgICogQHBhcmFtIG9mZnNldFNlY29uZHMg44Oi44O844K344On44Oz5YaN55Sf44Gu6ZaL5aeL5pmC5Yi7W+enkl1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0T2Zmc2V0VGltZShvZmZzZXRTZWNvbmRzOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9vZmZzZXRTZWNvbmRzID0gb2Zmc2V0U2Vjb25kcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+abtOaWsFxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIOOCpOODmeODs+ODiOeZuueBq+OBruODgeOCp+ODg+OCr+OAglxyXG4gICAgICAgICAqIOWFpeWKm+OBmeOCi+aZgumWk+OBr+WRvOOBsOOCjOOCi+ODouODvOOCt+ODp+ODs+OCv+OCpOODn+ODs+OCsOOCku+8kOOBqOOBl+OBn+enkuaVsOOBp+ihjOOBhuOAglxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBiZWZvcmVDaGVja1RpbWVTZWNvbmRzIOWJjeWbnuOBruOCpOODmeODs+ODiOODgeOCp+ODg+OCr+aZgumWk1vnp5JdXHJcbiAgICAgICAgICogQHBhcmFtIG1vdGlvblRpbWVTZWNvbmRzIOS7iuWbnuOBruWGjeeUn+aZgumWk1vnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldEZpcmVkRXZlbnQoYmVmb3JlQ2hlY2tUaW1lU2Vjb25kczogbnVtYmVyLCBtb3Rpb25UaW1lU2Vjb25kczogbnVtYmVyKTogY3NtVmVjdG9yPGNzbVN0cmluZz5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9maXJlZEV2ZW50VmFsdWVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xyXG4gICAgICAgICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cclxuICAgICAgICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xyXG4gICAgICAgICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBp+euoeeQhuOBleOCjOOBpuOBhOOCi+ODouODvOOCt+ODp+ODs1xyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg4fjg6vjgbjjg5Hjg6njg6Hjg7zjgr/lgKTjga7lj43mmKDjgYLjgopcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOODouODh+ODq+OBuOOBruODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBquOBl++8iOODouODvOOCt+ODp+ODs+OBruWkieWMluOBquOBl++8iVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBkb1VwZGF0ZVBhcmFtZXRlcnMobW9kZWw6IEN1YmlzbU1vZGVsLCB1c2VyVGltZVNlY29uZHM6IG51bWJlciwgd2VpZ2h0OiBudW1iZXIsIG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkpOiB2b2lkO1xyXG5cclxuXHJcbiAgICAgICAgcHVibGljIF9mYWRlSW5TZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXHJcbiAgICAgICAgcHVibGljIF9mYWRlT3V0U2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAgICAgIHB1YmxpYyBfd2VpZ2h0OiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xyXG4gICAgICAgIHB1YmxpYyBfb2Zmc2V0U2Vjb25kczogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7plovlp4vmmYLplpNb56eSXVxyXG5cclxuICAgICAgICBwdWJsaWMgX2ZpcmVkRXZlbnRWYWx1ZXM6IGNzbVZlY3Rvcjxjc21TdHJpbmc+O1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBhY3ViaXNtbW90aW9ufSBmcm9tICcuL2FjdWJpc21tb3Rpb24nO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21qc29ufSBmcm9tICcuLi91dGlscy9jdWJpc21qc29uJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWR9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb25xdWV1ZWVudHJ5fSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3J9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcclxuaW1wb3J0IEpzb25GbG9hdCA9IGN1YmlzbWpzb24uSnNvbkZsb2F0O1xyXG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcclxuaW1wb3J0IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBjdWJpc21tb3Rpb25xdWV1ZWVudHJ5LkN1YmlzbU1vdGlvblF1ZXVlRW50cnk7XHJcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xyXG5pbXBvcnQgQ3ViaXNtRnJhbWV3b3JrID0gY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yaztcclxuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XHJcbmltcG9ydCBDdWJpc21Kc29uID0gY3ViaXNtanNvbi5DdWJpc21Kc29uO1xyXG5pbXBvcnQgVmFsdWUgPSBjdWJpc21qc29uLlZhbHVlO1xyXG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8vIGV4cDMuanNvbuOBruOCreODvOOBqOODh+ODleOCqeODq+ODiFxyXG4gICAgY29uc3QgRXhwcmVzc2lvbktleUZhZGVJbjogc3RyaW5nID0gXCJGYWRlSW5UaW1lXCI7XHJcbiAgICBjb25zdCBFeHByZXNzaW9uS2V5RmFkZU91dDogc3RyaW5nID0gXCJGYWRlT3V0VGltZVwiO1xyXG4gICAgY29uc3QgRXhwcmVzc2lvbktleVBhcmFtZXRlcnM6IHN0cmluZyA9IFwiUGFyYW1ldGVyc1wiO1xyXG4gICAgY29uc3QgRXhwcmVzc2lvbktleUlkOiBzdHJpbmcgPSBcIklkXCI7XHJcbiAgICBjb25zdCBFeHByZXNzaW9uS2V5VmFsdWU6IHN0cmluZyA9IFwiVmFsdWVcIjtcclxuICAgIGNvbnN0IEV4cHJlc3Npb25LZXlCbGVuZDogc3RyaW5nID0gXCJCbGVuZFwiO1xyXG4gICAgY29uc3QgQmxlbmRWYWx1ZUFkZDogc3RyaW5nID0gXCJBZGRcIjtcclxuICAgIGNvbnN0IEJsZW5kVmFsdWVNdWx0aXBseTogc3RyaW5nID0gXCJNdWx0aXBseVwiO1xyXG4gICAgY29uc3QgQmxlbmRWYWx1ZU92ZXJ3cml0ZTogc3RyaW5nID0gXCJPdmVyd3JpdGVcIjtcclxuICAgIGNvbnN0IERlZmF1bHRGYWRlVGltZTogbnVtYmVyID0gMS4wO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6KGo5oOF44Gu44Oi44O844K344On44OzXHJcbiAgICAgKiBcclxuICAgICAqIOihqOaDheOBruODouODvOOCt+ODp+ODs+OCr+ODqeOCueOAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiBleHRlbmRzIEFDdWJpc21Nb3Rpb25cclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgovjgIJcclxuICAgICAgICAgKiBAcGFyYW0gYnVmZmVyIGV4cOODleOCoeOCpOODq+OBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAgICAgICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAgICAgICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogQ3ViaXNtRXhwcmVzc2lvbk1vdGlvblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGV4cHJlc3Npb246IEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24gPSBuZXcgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGpzb246IEN1YmlzbUpzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xyXG4gICAgICAgICAgICBsZXQgcm9vdDogVmFsdWUgPSBqc29uLmdldFJvb3QoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHR5cGVzY3JpcHTjgafjga9udWxs44KS6Kix5a6544GX44Gm44GE44Gq44GE44Gf44KB5Luu44Gu5YCk44KS5YWl44KM44KLXHJcbiAgICAgICAgICAgIGlmKHJvb3QuZ2V0TWFwKCkuZ2V0VmFsdWUoRXhwcmVzc2lvbktleUZhZGVJbikgPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcm9vdC5nZXRNYXAoKS5zZXRWYWx1ZShFeHByZXNzaW9uS2V5RmFkZUluLCBuZXcgSnNvbkZsb2F0KERlZmF1bHRGYWRlVGltZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHJvb3QuZ2V0TWFwKCkuZ2V0VmFsdWUoRXhwcmVzc2lvbktleUZhZGVPdXQpID09IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJvb3QuZ2V0TWFwKCkuc2V0VmFsdWUoRXhwcmVzc2lvbktleUZhZGVPdXQsIG5ldyBKc29uRmxvYXQoRGVmYXVsdEZhZGVUaW1lKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGV4cHJlc3Npb24uc2V0RmFkZUluVGltZShyb290LmdldE1hcCgpLmdldFZhbHVlKEV4cHJlc3Npb25LZXlGYWRlSW4pLnRvRmxvYXQoRGVmYXVsdEZhZGVUaW1lKSk7ICAvLyDjg5Xjgqfjg7zjg4njgqTjg7NcclxuICAgICAgICAgICAgZXhwcmVzc2lvbi5zZXRGYWRlT3V0VGltZShyb290LmdldE1hcCgpLmdldFZhbHVlKEV4cHJlc3Npb25LZXlGYWRlT3V0KS50b0Zsb2F0KERlZmF1bHRGYWRlVGltZSkpOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4hcclxuXHJcbiAgICAgICAgICAgIC8vIOWQhOODkeODqeODoeODvOOCv+OBq+OBpOOBhOOBplxyXG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJDb3VudCA9IHJvb3QuZ2V0TWFwKCkuZ2V0VmFsdWUoRXhwcmVzc2lvbktleVBhcmFtZXRlcnMpLmdldFNpemUoKTtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgaTogbnVtYmVyID0gMDsgaSA8IHBhcmFtZXRlckNvdW50OyArK2kpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCBwYXJhbTogVmFsdWUgPSByb290LmdldE1hcCgpLmdldFZhbHVlKEV4cHJlc3Npb25LZXlQYXJhbWV0ZXJzKS5nZXRWZWN0b3IoKS5hdChpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChwYXJhbS5nZXRNYXAoKS5nZXRWYWx1ZShFeHByZXNzaW9uS2V5SWQpLmdldFJhd1N0cmluZygpKTsgIC8vIOODkeODqeODoeODvOOCv0lEXHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IHBhcmFtLmdldE1hcCgpLmdldFZhbHVlKEV4cHJlc3Npb25LZXlWYWx1ZSkudG9GbG9hdCgpOyAvLyDlgKRcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDoqIjnrpfmlrnms5Xjga7oqK3lrppcclxuICAgICAgICAgICAgICAgIGxldCBibGVuZFR5cGU6IEV4cHJlc3Npb25CbGVuZFR5cGU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYocGFyYW0uZ2V0TWFwKCkuZ2V0VmFsdWUoRXhwcmVzc2lvbktleUJsZW5kKS5pc051bGwoKSB8fCBwYXJhbS5nZXRNYXAoKS5nZXRWYWx1ZShFeHByZXNzaW9uS2V5QmxlbmQpLmdldFN0cmluZygpID09IEJsZW5kVmFsdWVBZGQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX0FkZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYocGFyYW0uZ2V0TWFwKCkuZ2V0VmFsdWUoRXhwcmVzc2lvbktleUJsZW5kKS5nZXRTdHJpbmcoKSA9PSBCbGVuZFZhbHVlTXVsdGlwbHkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX011bHRpcGx5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihwYXJhbS5nZXRNYXAoKS5nZXRWYWx1ZShFeHByZXNzaW9uS2V5QmxlbmQpLmdldFN0cmluZygpID09IEJsZW5kVmFsdWVPdmVyd3JpdGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX092ZXJ3cml0ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDjgZ3jga7ku5Yg5LuV5qeY44Gr44Gq44GE5YCk44KS6Kit5a6a44GX44Gf5pmC44Gv5Yqg566X44Oi44O844OJ44Gr44GZ44KL44GT44Go44Gn5b6p5penXHJcbiAgICAgICAgICAgICAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX0FkZDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyDoqK3lrprjgqrjg5bjgrjjgqfjgq/jg4jjgpLkvZzmiJDjgZfjgabjg6rjgrnjg4jjgavov73liqDjgZnjgotcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtOiBFeHByZXNzaW9uUGFyYW1ldGVyID0gbmV3IEV4cHJlc3Npb25QYXJhbWV0ZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpdGVtLnBhcmFtZXRlcklkID0gcGFyYW1ldGVySWQ7XHJcbiAgICAgICAgICAgICAgICBpdGVtLmJsZW5kVHlwZSA9IGJsZW5kVHlwZTtcclxuICAgICAgICAgICAgICAgIGl0ZW0udmFsdWUgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uLl9wYXJhbWV0ZXJzLnB1c2hCYWNrKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBDdWJpc21Kc29uLmRlbGV0ZShqc29uKTsgICAgLy8gSlNPTuODh+ODvOOCv+OBr+S4jeimgeOBq+OBquOBo+OBn+OCieWJiumZpOOBmeOCi1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsOOBruWun+ihjFxyXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcclxuICAgICAgICAgKiBAcGFyYW0gdXNlclRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXHJcbiAgICAgICAgICogQHBhcmFtIHdlaWdodCDjg6Ljg7zjgrfjg6fjg7Pjga7ph43jgb9cclxuICAgICAgICAgKiBAcGFyYW0gbW90aW9uUXVldWVFbnRyeSBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgafnrqHnkIbjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7NcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZG9VcGRhdGVQYXJhbWV0ZXJzKG1vZGVsOiBDdWJpc21Nb2RlbCwgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIsIHdlaWdodDogbnVtYmVyLCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5KTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fcGFyYW1ldGVycy5nZXRTaXplKCk7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRlcjogRXhwcmVzc2lvblBhcmFtZXRlciA9IHRoaXMuX3BhcmFtZXRlcnMuYXQoaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpdGNoKHBhcmFtZXRlci5ibGVuZFR5cGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9BZGQ6XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQocGFyYW1ldGVyLnBhcmFtZXRlcklkLCBwYXJhbWV0ZXIudmFsdWUsIHdlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX011bHRpcGx5OlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwubXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SWQocGFyYW1ldGVyLnBhcmFtZXRlcklkLCBwYXJhbWV0ZXIudmFsdWUsIHdlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX092ZXJ3cml0ZTpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJZChwYXJhbWV0ZXIucGFyYW1ldGVySWQsIHBhcmFtZXRlci52YWx1ZSwgd2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOS7leanmOOBq+OBquOBhOWApOOCkuioreWumuOBl+OBn+aZguOBr+OBmeOBp+OBq+WKoOeul+ODouODvOODieOBq+OBquOBo+OBpuOBhOOCi1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3RvcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVycyA9IG5ldyBjc21WZWN0b3I8RXhwcmVzc2lvblBhcmFtZXRlcj4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF9wYXJhbWV0ZXJzOiBjc21WZWN0b3I8RXhwcmVzc2lvblBhcmFtZXRlcj47ICAvLyDooajmg4Xjga7jg5Hjg6njg6Hjg7zjgr/mg4XloLHjg6rjgrnjg4hcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOihqOaDheODkeODqeODoeODvOOCv+WApOOBruioiOeul+aWueW8j1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgZW51bSBFeHByZXNzaW9uQmxlbmRUeXBlXHJcbiAgICB7XHJcbiAgICAgICAgRXhwcmVzc2lvbkJsZW5kVHlwZV9BZGQgPSAwLCAgICAgICAgLy8g5Yqg566XXHJcbiAgICAgICAgRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseSA9IDEsICAgLy8g5LmX566XXHJcbiAgICAgICAgRXhwcmVzc2lvbkJsZW5kVHlwZV9PdmVyd3JpdGUgPSAyICAgLy8g5LiK5pu444GNXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDooajmg4Xjga7jg5Hjg6njg6Hjg7zjgr/mg4XloLFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEV4cHJlc3Npb25QYXJhbWV0ZXJcclxuICAgIHtcclxuICAgICAgICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGU7ICAgICAgICAgIC8vIOODkeODqeODoeODvOOCv0lEXHJcbiAgICAgICAgYmxlbmRUeXBlOiBFeHByZXNzaW9uQmxlbmRUeXBlOyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mvJTnrpfnqK7poZ5cclxuICAgICAgICB2YWx1ZTogbnVtYmVyOyAgICAgICAgICAgICAgICAgIC8vIOWApFxyXG4gICAgfVxyXG59IiwiLypcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb25qc29ufSBmcm9tICcuL2N1YmlzbW1vdGlvbmpzb24nO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb25pbnRlcm5hbH0gZnJvbSAnLi9jdWJpc21tb3Rpb25pbnRlcm5hbCc7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGFjdWJpc21tb3Rpb259IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29ya30gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW90aW9ucXVldWVlbnRyeX0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5JztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0aH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRoJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZ30gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xyXG5pbXBvcnQge0N1YmlzbUxvZ0RlYnVnLCBDU01fQVNTRVJUfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XHJcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uRGF0YSA9IGN1YmlzbW1vdGlvbmludGVybmFsLkN1YmlzbU1vdGlvbkRhdGE7XHJcbmltcG9ydCBDdWJpc21Nb3Rpb25TZWdtZW50ID0gY3ViaXNtbW90aW9uaW50ZXJuYWwuQ3ViaXNtTW90aW9uU2VnbWVudDtcclxuaW1wb3J0IEN1YmlzbU1vdGlvblBvaW50ID0gY3ViaXNtbW90aW9uaW50ZXJuYWwuQ3ViaXNtTW90aW9uUG9pbnQ7XHJcbmltcG9ydCBDdWJpc21Nb3Rpb25FdmVudCA9IGN1YmlzbW1vdGlvbmludGVybmFsLkN1YmlzbU1vdGlvbkV2ZW50O1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUgPSBjdWJpc21tb3Rpb25pbnRlcm5hbC5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZTtcclxuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XHJcbmltcG9ydCBDdWJpc21Nb3Rpb25DdXJ2ZSA9IGN1YmlzbW1vdGlvbmludGVybmFsLkN1YmlzbU1vdGlvbkN1cnZlO1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQgPSBjdWJpc21tb3Rpb25pbnRlcm5hbC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldDtcclxuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XHJcbmltcG9ydCBDdWJpc21NYXRoID0gY3ViaXNtbWF0aC5DdWJpc21NYXRoO1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGN1YmlzbW1vdGlvbnF1ZXVlZW50cnkuQ3ViaXNtTW90aW9uUXVldWVFbnRyeTtcclxuaW1wb3J0IEN1YmlzbUZyYW1ld29yayA9IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XHJcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xyXG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcclxuaW1wb3J0IEN1YmlzbU1vdGlvbkpzb24gPSBjdWJpc21tb3Rpb25qc29uLkN1YmlzbU1vdGlvbkpzb247XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29ya1xyXG57XHJcbiAgICBjb25zdCBFZmZlY3ROYW1lRXllQmxpbms6IHN0cmluZyA9IFwiRXllQmxpbmtcIjtcclxuICAgIGNvbnN0IEVmZmVjdE5hbWVMaXBTeW5jOiBzdHJpbmcgID0gXCJMaXBTeW5jXCI7XHJcbiAgICBjb25zdCBUYXJnZXROYW1lTW9kZWw6IHN0cmluZyA9IFwiTW9kZWxcIjtcclxuICAgIGNvbnN0IFRhcmdldE5hbWVQYXJhbWV0ZXI6IHN0cmluZyA9IFwiUGFyYW1ldGVyXCI7XHJcbiAgICBjb25zdCBUYXJnZXROYW1lUGFydE9wYWNpdHk6IHN0cmluZyA9IFwiUGFydE9wYWNpdHlcIjtcclxuXHJcbiAgICBmdW5jdGlvbiBsZXJwUG9pbnRzKGE6IEN1YmlzbU1vdGlvblBvaW50LCBiOiBDdWJpc21Nb3Rpb25Qb2ludCwgdDogbnVtYmVyKTogQ3ViaXNtTW90aW9uUG9pbnRcclxuICAgIHtcclxuICAgICAgICBsZXQgcmVzdWx0OiBDdWJpc21Nb3Rpb25Qb2ludCA9IG5ldyBDdWJpc21Nb3Rpb25Qb2ludCgpO1xyXG5cclxuICAgICAgICByZXN1bHQudGltZSA9IGEudGltZSArICgoYi50aW1lIC0gYS50aW1lKSAqIHQpO1xyXG4gICAgICAgIHJlc3VsdC52YWx1ZSA9IGEudmFsdWUgKyAoKGIudmFsdWUgLSBhLnZhbHVlKSAqIHQpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxpbmVhckV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHQ6IG51bWJlciA9ICh0aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gKHBvaW50c1sxXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpO1xyXG5cclxuICAgICAgICBpZiAodCA8IDAuMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHQgPSAwLjA7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIHBvaW50c1swXS52YWx1ZSArICgocG9pbnRzWzFdLnZhbHVlIC0gcG9pbnRzWzBdLnZhbHVlKSAqIHQpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGJlemllckV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHQ6IG51bWJlciA9ICh0aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gKHBvaW50c1szXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpO1xyXG5cclxuICAgICAgICBpZiAodCA8IDAuMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHQgPSAwLjA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwMDE6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMF0sIHBvaW50c1sxXSwgdCk7XHJcbiAgICAgICAgY29uc3QgcDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzFdLCBwb2ludHNbMl0sIHQpO1xyXG4gICAgICAgIGNvbnN0IHAyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1syXSwgcG9pbnRzWzNdLCB0KTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBwMDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocDAxLCBwMTIsIHQpO1xyXG4gICAgICAgIGNvbnN0IHAxMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwMTIsIHAyMywgdCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGxlcnBQb2ludHMocDAxMiwgcDEyMywgdCkudmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3RlcHBlZEV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHBvaW50c1swXS52YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbnZlcnNlU3RlcHBlZEV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHBvaW50c1sxXS52YWx1ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gZXZhbHVhdGVDdXJ2ZShtb3Rpb25EYXRhOiBDdWJpc21Nb3Rpb25EYXRhLCBpbmRleDogbnVtYmVyLCB0aW1lOiBudW1iZXIpOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICAvLyBGaW5kIHNlZ21lbnQgdG8gZXZhbHVhdGUuXHJcbiAgICAgICAgY29uc3QgY3VydmU6IEN1YmlzbU1vdGlvbkN1cnZlID0gbW90aW9uRGF0YS5jdXJ2ZXMuYXQoaW5kZXgpO1xyXG5cclxuICAgICAgICBsZXQgdGFyZ2V0OiBudW1iZXIgPSAtMTtcclxuICAgICAgICBjb25zdCB0b3RhbFNlZ21lbnRDb3VudDogbnVtYmVyID0gY3VydmUuYmFzZVNlZ21lbnRJbmRleCArIGN1cnZlLnNlZ21lbnRDb3VudDtcclxuICAgICAgICBsZXQgcG9pbnRQb3NpdGlvbjogbnVtYmVyID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSBjdXJ2ZS5iYXNlU2VnbWVudEluZGV4OyBpIDwgdG90YWxTZWdtZW50Q291bnQ7ICsraSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIEdldCBmaXJzdCBwb2ludCBvZiBuZXh0IHNlZ21lbnQuXHJcbiAgICAgICAgICAgIHBvaW50UG9zaXRpb24gPSBtb3Rpb25EYXRhLnNlZ21lbnRzLmF0KGkpLmJhc2VQb2ludEluZGV4XHJcbiAgICAgICAgICAgICAgICArIChtb3Rpb25EYXRhLnNlZ21lbnRzLmF0KGkpLnNlZ21lbnRUeXBlID09IEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0JlemllclxyXG4gICAgICAgICAgICAgICAgICAgID8gM1xyXG4gICAgICAgICAgICAgICAgICAgIDogMSk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gQnJlYWsgaWYgdGltZSBsaWVzIHdpdGhpbiBjdXJyZW50IHNlZ21lbnQuXHJcbiAgICAgICAgICAgIGlmIChtb3Rpb25EYXRhLnBvaW50cy5hdChwb2ludFBvc2l0aW9uKS50aW1lID4gdGltZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gaTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRhcmdldCA9PSAtMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBtb3Rpb25EYXRhLnBvaW50cy5hdChwb2ludFBvc2l0aW9uKS52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBjb25zdCBzZWdtZW50OiBDdWJpc21Nb3Rpb25TZWdtZW50ID0gbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0YXJnZXQpO1xyXG5cclxuICAgICAgICByZXR1cm4gc2VnbWVudC5ldmFsdWF0ZShtb3Rpb25EYXRhLnBvaW50cy5nZXQoc2VnbWVudC5iYXNlUG9pbnRJbmRleCksIHRpbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Oi44O844K344On44Oz44Kv44Op44K5XHJcbiAgICAgKiBcclxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruOCr+ODqeOCueOAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uIGV4dGVuZHMgQUN1YmlzbU1vdGlvblxyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuS9nOaIkOOBmeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBidWZmZXIgbW90aW9uMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICAgICAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICAgICAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiBDdWJpc21Nb3Rpb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCByZXQ6IEN1YmlzbU1vdGlvbiA9IG5ldyBDdWJpc21Nb3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgIHJldC5wYXJzZShidWZmZXIsIHNpemUpO1xyXG4gICAgICAgICAgICByZXQuX3NvdXJjZUZyYW1lUmF0ZSA9IHJldC5fbW90aW9uRGF0YS5mcHM7XHJcbiAgICAgICAgICAgIHJldC5fbG9vcER1cmF0aW9uU2Vjb25kcyA9IHJldC5fbW90aW9uRGF0YS5kdXJhdGlvbjtcclxuICAgICAgICBcclxuICAgICAgICAgICAgLy8gTk9URTogRWRpdG9y44Gn44Gv44Or44O844OX44GC44KK44Gu44Oi44O844K344On44Oz5pu444GN5Ye644GX44Gv6Z2e5a++5b+cXHJcbiAgICAgICAgICAgIC8vIHJldC0+X2xvb3AgPSAocmV0LT5fbW90aW9uRGF0YS0+TG9vcCA+IDApO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05paw44Gu5a6f6KGMXHJcbiAgICAgICAgICogQHBhcmFtIG1vZGVsICAgICAgICAgICAgIOWvvuixoeOBruODouODh+ODq1xyXG4gICAgICAgICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMgICDnj77lnKjjga7mmYLliLtb56eSXVxyXG4gICAgICAgICAqIEBwYXJhbSBmYWRlV2VpZ2h0ICAgICAgICDjg6Ljg7zjgrfjg6fjg7Pjga7ph43jgb9cclxuICAgICAgICAgKiBAcGFyYW0gbW90aW9uUXVldWVFbnRyeSAgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gn566h55CG44GV44KM44Gm44GE44KL44Oi44O844K344On44OzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGRvVXBkYXRlUGFyYW1ldGVycyhtb2RlbDogQ3ViaXNtTW9kZWwsIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyLCBmYWRlV2VpZ2h0OiBudW1iZXIsIG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbW9kZWxDdXJ2ZUlkRXllQmxpbmsgPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWxDdXJ2ZUlkRXllQmxpbmsgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoRWZmZWN0TmFtZUV5ZUJsaW5rKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMgPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWxDdXJ2ZUlkTGlwU3luYyA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChFZmZlY3ROYW1lTGlwU3luYyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCB0aW1lT2Zmc2V0U2Vjb25kczogbnVtYmVyID0gdXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aW1lT2Zmc2V0U2Vjb25kcyA8IDAuMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGltZU9mZnNldFNlY29uZHMgPSAwLjA7IC8vIOOCqOODqeODvOWbnumBv1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgbGlwU3luY1ZhbHVlOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgICAgICAgICBsZXQgZXllQmxpbmtWYWx1ZTogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgLy/jgb7jgbDjgZ/jgY3jgIHjg6rjg4Pjg5fjgrfjg7Pjgq/jga7jgYbjgaHjg6Ljg7zjgrfjg6fjg7Pjga7pgannlKjjgpLmpJzlh7rjgZnjgovjgZ/jgoHjga7jg5Pjg4Pjg4jvvIhtYXhGbGFnQ291bnTlgIvjgb7jgadcclxuICAgICAgICAgICAgY29uc3QgIE1heFRhcmdldFNpemUgPSA2NDtcclxuICAgICAgICAgICAgbGV0IGxpcFN5bmNGbGFncyA9IDA7XHJcbiAgICAgICAgICAgIGxldCBleWVCbGlua0ZsYWdzID0gMDtcclxuXHJcbiAgICAgICAgICAgIC8v556s44GN44CB44Oq44OD44OX44K344Oz44Kv44Gu44K/44O844Ky44OD44OI5pWw44GM5LiK6ZmQ44KS6LaF44GI44Gm44GE44KL5aC05ZCIXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5nZXRTaXplKCkgPiBNYXhUYXJnZXRTaXplKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Mb2dEZWJ1ZyhcInRvbyBtYW55IGV5ZSBibGluayB0YXJnZXRzIDogezB9XCIsIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpID4gTWF4VGFyZ2V0U2l6ZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ3ViaXNtTG9nRGVidWcoXCJ0b28gbWFueSBsaXAgc3luYyB0YXJnZXRzIDogezB9XCIsIHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgdG1wRmFkZUluOiBudW1iZXIgPSAodGhpcy5fZmFkZUluU2Vjb25kcyA8PSAwLjApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAxLjBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZSgodXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlSW5TdGFydFRpbWUoKSkgLyB0aGlzLl9mYWRlSW5TZWNvbmRzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRtcEZhZGVPdXQ6IG51bWJlciA9ICh0aGlzLl9mYWRlT3V0U2Vjb25kcyA8PSAwLjAgfHwgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAxLjBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZSgobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC8gdGhpcy5fZmFkZU91dFNlY29uZHMpO1xyXG4gICAgICAgICAgICBsZXQgdmFsdWU6IG51bWJlcjtcclxuICAgICAgICAgICAgbGV0IGM6IG51bWJlciwgcGFyYW1ldGVySW5kZXg6IG51bWJlcjtcclxuXHJcbiAgICAgICAgICAgIC8vICdSZXBlYXQnIHRpbWUgYXMgbmVjZXNzYXJ5LlxyXG4gICAgICAgICAgICBsZXQgdGltZTogbnVtYmVyID0gdGltZU9mZnNldFNlY29uZHM7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNMb29wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodGltZSA+IHRoaXMuX21vdGlvbkRhdGEuZHVyYXRpb24pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZSAtPSB0aGlzLl9tb3Rpb25EYXRhLmR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XHJcblxyXG4gICAgICAgICAgICAvLyBFdmFsdWF0ZSBtb2RlbCBjdXJ2ZXMuXHJcbiAgICAgICAgICAgIGZvciAoYyA9IDA7IGMgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQgJiYgY3VydmVzLmF0KGMpLnR5cGUgPT0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWw7ICsrYylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gRXZhbHVhdGUgY3VydmUgYW5kIGNhbGwgaGFuZGxlci5cclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZXZhbHVhdGVDdXJ2ZSh0aGlzLl9tb3Rpb25EYXRhLCBjLCB0aW1lKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChjdXJ2ZXMuYXQoYykuaWQgPT0gdGhpcy5fbW9kZWxDdXJ2ZUlkRXllQmxpbmspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXllQmxpbmtWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY3VydmVzLmF0KGMpLmlkID09IHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlwU3luY1ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBwYXJhbWV0ZXJNb3Rpb25DdXJ2ZUNvdW50OiBudW1iZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgZm9yICg7IGMgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQgJiYgY3VydmVzLmF0KGMpLnR5cGUgPT0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyOyArK2MpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtZXRlck1vdGlvbkN1cnZlQ291bnQrKztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBGaW5kIHBhcmFtZXRlciBpbmRleC5cclxuICAgICAgICAgICAgICAgIHBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoY3VydmVzLmF0KGMpLmlkKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFNraXAgY3VydmUgZXZhbHVhdGlvbiBpZiBubyB2YWx1ZSBpbiBzaW5rLlxyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlckluZGV4ID09IC0xKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VWYWx1ZTogbnVtYmVyID0gbW9kZWwuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBFdmFsdWF0ZSBjdXJ2ZSBhbmQgYXBwbHkgdmFsdWUuXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGV5ZUJsaW5rVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpICYmIGkgPCBNYXhUYXJnZXRTaXplOyArK2kpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuYXQoaSkgPT0gY3VydmVzLmF0KGMpLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAqPSBleWVCbGlua1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXllQmxpbmtGbGFncyB8PSAxIDw8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZihsaXBTeW5jVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTsgKytpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5hdChpKSA9PSBjdXJ2ZXMuYXQoYykuaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IGxpcFN5bmNWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpcFN5bmNGbGFncyB8PSAxIDw8IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdjogbnVtYmVyO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOODkeODqeODoeODvOOCv+OBlOOBqOOBruODleOCp+ODvOODiVxyXG4gICAgICAgICAgICAgICAgaWYoY3VydmVzLmF0KGMpLmZhZGVJblRpbWUgPCAwLjAgJiYgY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lIDwgMC4wKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCkumBqeeUqFxyXG4gICAgICAgICAgICAgICAgICAgIHYgPSBzb3VyY2VWYWx1ZSArICh2YWx1ZSAtIHNvdXJjZVZhbHVlKSAqIGZhZGVXZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g44OR44Op44Oh44O844K/44Gr5a++44GX44Gm44OV44Kn44O844OJ44Kk44Oz44GL44OV44Kn44O844OJ44Ki44Km44OI44GM6Kit5a6a44GX44Gm44GC44KL5aC05ZCI44Gv44Gd44Gh44KJ44KS6YGp55SoXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbjogbnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmb3V0OiBudW1iZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGN1cnZlcy5hdChjKS5mYWRlSW5UaW1lIDwgMC4wKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluID0gdG1wRmFkZUluO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW4gPSBjdXJ2ZXMuYXQoYykuZmFkZUluVGltZSA9PSAwLjBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gMS4wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Q3ViaXNtTWF0aC5nZXRFYXNpbmdTaW5lKCh1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldEZhZGVJblN0YXJ0VGltZSgpKSAvIGN1cnZlcy5hdChjKS5mYWRlSW5UaW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGN1cnZlcy5hdChjKS5mYWRlT3V0VGltZSA8IDAuMClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdXQgPSB0bXBGYWRlT3V0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3V0ID0gKGN1cnZlcy5hdChjKS5mYWRlT3V0VGltZSA9PSAwLjAgfHwgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAxLjBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZSgobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC8gY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtV2VpZ2h0OiBudW1iZXIgPSB0aGlzLl93ZWlnaHQgKiBmaW4gKiBmb3V0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgZTjgajjga7jg5Xjgqfjg7zjg4njgpLpgannlKhcclxuICAgICAgICAgICAgICAgICAgICB2ID0gc291cmNlVmFsdWUgKyAodmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBwYXJhbVdlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgsIHYsIDEuMCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGV5ZUJsaW5rVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5nZXRTaXplKCkgJiYgaSA8IE1heFRhcmdldFNpemU7ICsraSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZVZhbHVlOiBudW1iZXIgPSBtb2RlbC5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuYXQoaSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Oi44O844K344On44Oz44Gn44Gu5LiK5pu444GN44GM44GC44Gj44Gf5pmC44Gr44Gv44G+44Gw44Gf44GN44Gv6YGp55So44GX44Gq44GEXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKChleWVCbGlua0ZsYWdzID4+IGkpICYgMHgwMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHY6IG51bWJlciA9IHNvdXJjZVZhbHVlICsgKGV5ZUJsaW5rVmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBmYWRlV2VpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmF0KGkpLCB2KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYobGlwU3luY1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKCkgJiYgaSA8IE1heFRhcmdldFNpemU7ICsraSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZVZhbHVlOiBudW1iZXIgPSBtb2RlbC5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5hdChpKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjgafjga7kuIrmm7jjgY3jgYzjgYLjgaPjgZ/mmYLjgavjga/jg6rjg4Pjg5fjgrfjg7Pjgq/jga/pgannlKjjgZfjgarjgYRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoKGxpcFN5bmNGbGFncyA+PiBpKSAmIDB4MDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2OiBudW1iZXIgPSBzb3VyY2VWYWx1ZSArIChsaXBTeW5jVmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBmYWRlV2VpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuYXQoaSksIHYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yKDsgYyA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCAmJiBjdXJ2ZXMuYXQoYykudHlwZSA9PSBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJ0T3BhY2l0eTsgKytjKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBGaW5kIHBhcmFtZXRlciBpbmRleC5cclxuICAgICAgICAgICAgICAgIHBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoY3VydmVzLmF0KGMpLmlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTa2lwIGN1cnZlIGV2YWx1YXRpb24gaWYgbm8gdmFsdWUgaW4gc2luay5cclxuICAgICAgICAgICAgICAgIGlmKHBhcmFtZXRlckluZGV4ID09IC0xKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEV2YWx1YXRlIGN1cnZlIGFuZCBhcHBseSB2YWx1ZS5cclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZXZhbHVhdGVDdXJ2ZSh0aGlzLl9tb3Rpb25EYXRhLCBjLCB0aW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgsIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYodGltZU9mZnNldFNlY29uZHMgPj0gdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5faXNMb29wKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0U3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyk7IC8vIOacgOWIneOBrueKtuaFi+OBuFxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuX2lzTG9vcEZhZGVJbilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOODq+ODvOODl+WGheOBp+ODq+ODvOODl+eUqOODleOCp+ODvOODieOCpOODs+OBjOacieWKueOBruaZguOBr+OAgeODleOCp+ODvOODieOCpOODs+ioreWumuOBl+ebtOOBl1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEZhZGVJblN0YXJ0VGltZSh1c2VyVGltZVNlY29uZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldElzRmluaXNoZWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbGFzdFdlaWdodCA9IGZhZGVXZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6vjg7zjg5fmg4XloLHjga7oqK3lrppcclxuICAgICAgICAgKiBAcGFyYW0gbG9vcCDjg6vjg7zjg5fmg4XloLFcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0SXNMb29wKGxvb3A6IGJvb2xlYW4pOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9pc0xvb3AgPSBsb29wO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Or44O844OX5oOF5aCx44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiB0cnVlIOODq+ODvOODl+OBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2Ug44Or44O844OX44GX44Gq44GEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzTG9vcCgpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNMb29wO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Or44O844OX5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5oOF5aCx44Gu6Kit5a6aXHJcbiAgICAgICAgICogQHBhcmFtIGxvb3BGYWRlSW4gIOODq+ODvOODl+aZguOBruODleOCp+ODvOODieOCpOODs+aDheWgsVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRJc0xvb3BGYWRlSW4obG9vcEZhZGVJbjogYm9vbGVhbik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzTG9vcEZhZGVJbiA9IGxvb3BGYWRlSW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6vjg7zjg5fmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Pmg4XloLHjga7lj5blvpdcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZXR1cm4gIHRydWUgICAg44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiAgZmFsc2UgICDjgZfjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNMb29wRmFkZUluKCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0xvb3BGYWRlSW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZXjgpLlj5blvpfjgZnjgovjgIJcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldER1cmF0aW9uKCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzTG9vcCA/IC0xLjAgOiB0aGlzLl9sb29wRHVyYXRpb25TZWNvbmRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz44Gu44Or44O844OX5pmC44Gu6ZW344GV44KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmV0dXJuICDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5fmmYLjga7plbfjgZVb56eSXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRMb29wRHVyYXRpb24oKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9vcER1cmF0aW9uU2Vjb25kcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODkeODqeODoeODvOOCv+OBq+WvvuOBmeOCi+ODleOCp+ODvOODieOCpOODs+OBruaZgumWk+OCkuioreWumuOBmeOCi+OAglxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSAgICAgICAgICAg44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0UGFyYW1ldGVyRmFkZUluVGltZShwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUsIHZhbHVlOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50OyArK2kpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJJZCA9PSBjdXJ2ZXMuYXQoaSkuaWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VydmVzLmF0KGkpLmZhZGVJblRpbWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICog44OR44Op44Oh44O844K/44Gr5a++44GZ44KL44OV44Kn44O844OJ44Ki44Km44OI44Gu5pmC6ZaT44Gu6Kit5a6aXHJcbiAgICAgICAgKiBAcGFyYW0gcGFyYW1ldGVySWQgICAgIOODkeODqeODoeODvOOCv0lEXHJcbiAgICAgICAgKiBAcGFyYW0gdmFsdWUgICAgICAgICAgIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXHJcbiAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0UGFyYW1ldGVyRmFkZU91dFRpbWUocGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLCB2YWx1ZTogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgKytpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1ldGVySWQgPT0gY3VydmVzLmF0KGkpLmlkKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnZlcy5hdChpKS5mYWRlT3V0VGltZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZnjgovjg5Xjgqfjg7zjg4njgqTjg7Pjga7mmYLplpPjga7lj5blvpdcclxuICAgICAgICAqIEBwYXJhbSAgICBwYXJhbWV0ZXJJZCAgICAg44OR44Op44Oh44O844K/SURcclxuICAgICAgICAqIEByZXR1cm4gICDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFBhcmFtZXRlckZhZGVJblRpbWUocGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50OyArK2kpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJJZCA9PSBjdXJ2ZXMuYXQoaSkuaWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnZlcy5hdChpKS5mYWRlSW5UaW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAqIOODkeODqeODoeODvOOCv+OBq+WvvuOBmeOCi+ODleOCp+ODvOODieOCouOCpuODiOOBruaZgumWk+OCkuWPluW+l1xyXG4gICAgICAgICpcclxuICAgICAgICAqIEBwYXJhbSAgIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAgICAgICogQHJldHVybiAgIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXHJcbiAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0UGFyYW1ldGVyRmFkZU91dFRpbWUocGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50OyArK2kpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJJZCA9PSBjdXJ2ZXMuYXQoaSkuaWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnZlcy5hdChpKS5mYWRlT3V0VGltZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6Ieq5YuV44Ko44OV44Kn44Kv44OI44GM44GL44GL44Gj44Gm44GE44KL44OR44Op44Oh44O844K/SUTjg6rjgrnjg4jjga7oqK3lrppcclxuICAgICAgICAgKiBAcGFyYW0gZXllQmxpbmtQYXJhbWV0ZXJJZHMgICAg6Ieq5YuV44G+44Gw44Gf44GN44GM44GL44GL44Gj44Gm44GE44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4hcclxuICAgICAgICAgKiBAcGFyYW0gbGlwU3luY1BhcmFtZXRlcklkcyAgICAg44Oq44OD44OX44K344Oz44Kv44GM44GL44GL44Gj44Gm44GE44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4hcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0RWZmZWN0SWRzKGV5ZUJsaW5rUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+LCBsaXBTeW5jUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMgPSBleWVCbGlua1BhcmFtZXRlcklkcztcclxuICAgICAgICAgICAgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcyA9IGxpcFN5bmNQYXJhbWV0ZXJJZHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5fc291cmNlRnJhbWVSYXRlID0gMzAuMDtcclxuICAgICAgICAgICAgdGhpcy5fbG9vcER1cmF0aW9uU2Vjb25kcyA9IC0xLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzTG9vcCA9IGZhbHNlOyAgICAgICAgICAgLy8gdHJ1ZeOBi+OCiSBmYWxzZSDjgbjjg4fjg5Xjgqnjg6vjg4jjgpLlpInmm7RcclxuICAgICAgICAgICAgdGhpcy5faXNMb29wRmFkZUluID0gdHJ1ZTsgICAgICAvLyDjg6vjg7zjg5fmmYLjgavjg5Xjgqfjg7zjg4njgqTjg7PjgYzmnInlirnjgYvjganjgYbjgYvjga7jg5Xjg6njgrBcclxuICAgICAgICAgICAgdGhpcy5fbGFzdFdlaWdodCA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsQ3VydmVJZEV5ZUJsaW5rID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbW9kZWxDdXJ2ZUlkTGlwU3luYyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhID0gdm9pZCAwO1xyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIG1vdGlvbjMuanNvbuOCkuODkeODvOOCueOBmeOCi+OAglxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIG1vdGlvbkpzb24gIG1vdGlvbjMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAgICAgICAqIEBwYXJhbSBzaXplICAgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcGFyc2UobW90aW9uSnNvbjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEgPSBuZXcgQ3ViaXNtTW90aW9uRGF0YSgpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGpzb246IEN1YmlzbU1vdGlvbkpzb24gPSBuZXcgQ3ViaXNtTW90aW9uSnNvbihtb3Rpb25Kc29uLCBzaXplKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbiA9IGpzb24uZ2V0TW90aW9uRHVyYXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5sb29wID0ganNvbi5pc01vdGlvbkxvb3AoKTtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50ID0ganNvbi5nZXRNb3Rpb25DdXJ2ZUNvdW50KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZnBzID0ganNvbi5nZXRNb3Rpb25GcHMoKTtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudENvdW50ID0ganNvbi5nZXRFdmVudENvdW50KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChqc29uLmlzRXhpc3RNb3Rpb25GYWRlSW5UaW1lKCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHMgPSAoanNvbi5nZXRNb3Rpb25GYWRlSW5UaW1lKCkgPCAwLjApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDEuMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBqc29uLmdldE1vdGlvbkZhZGVJblRpbWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHMgPSAxLjA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChqc29uLmlzRXhpc3RNb3Rpb25GYWRlT3V0VGltZSgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IChqc29uLmdldE1vdGlvbkZhZGVPdXRUaW1lKCkgPCAwLjApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAxLjBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGpzb24uZ2V0TW90aW9uRmFkZU91dFRpbWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzID0gMS4wO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy51cGRhdGVTaXplKHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCwgQ3ViaXNtTW90aW9uQ3VydmUsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLnVwZGF0ZVNpemUoanNvbi5nZXRNb3Rpb25Ub3RhbFNlZ21lbnRDb3VudCgpLCBDdWJpc21Nb3Rpb25TZWdtZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMudXBkYXRlU2l6ZShqc29uLmdldE1vdGlvblRvdGFsUG9pbnRDb3VudCgpLCBDdWJpc21Nb3Rpb25Qb2ludCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLnVwZGF0ZVNpemUodGhpcy5fbW90aW9uRGF0YS5ldmVudENvdW50LCBDdWJpc21Nb3Rpb25FdmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCB0b3RhbFBvaW50Q291bnQ6IG51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIGxldCB0b3RhbFNlZ21lbnRDb3VudDogbnVtYmVyID0gMDtcclxuICAgICAgICBcclxuICAgICAgICAgICAgLy8gQ3VydmVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGN1cnZlQ291bnQ6IG51bWJlciA9IDA7IGN1cnZlQ291bnQgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsrY3VydmVDb3VudClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKGpzb24uZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVDb3VudCkgPT0gVGFyZ2V0TmFtZU1vZGVsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLnR5cGUgPSBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGpzb24uZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVDb3VudCkgPT0gVGFyZ2V0TmFtZVBhcmFtZXRlcilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS50eXBlID0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoanNvbi5nZXRNb3Rpb25DdXJ2ZVRhcmdldChjdXJ2ZUNvdW50KSA9PSBUYXJnZXROYW1lUGFydE9wYWNpdHkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkudHlwZSA9IEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLmlkID0ganNvbi5nZXRNb3Rpb25DdXJ2ZUlkKGN1cnZlQ291bnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLmJhc2VTZWdtZW50SW5kZXggPSB0b3RhbFNlZ21lbnRDb3VudDtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLmZhZGVJblRpbWUgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoanNvbi5pc0V4aXN0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlQ291bnQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBqc29uLmdldE1vdGlvbkN1cnZlRmFkZUluVGltZShjdXJ2ZUNvdW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAtMS4wIDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLmZhZGVPdXRUaW1lID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKGpzb24uaXNFeGlzdE1vdGlvbkN1cnZlRmFkZU91dFRpbWUoY3VydmVDb3VudCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGpzb24uZ2V0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUNvdW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAtMS4wO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNlZ21lbnRzXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBzZWdtZW50UG9zaXRpb246IG51bWJlciA9IDA7IHNlZ21lbnRQb3NpdGlvbiA8IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50Q291bnQoY3VydmVDb3VudCk7KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWdtZW50UG9zaXRpb24gPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmJhc2VQb2ludEluZGV4ID0gdG90YWxQb2ludENvdW50O1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnZhbHVlID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgMSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuYmFzZVBvaW50SW5kZXggPSB0b3RhbFBvaW50Q291bnQgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VnbWVudDogbnVtYmVyID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHNlZ21lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfTGluZWFyOiBcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9MaW5lYXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5ldmFsdWF0ZSA9IGxpbmVhckV2YWx1YXRlO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgKHNlZ21lbnRQb3NpdGlvbiArIDEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCAoc2VnbWVudFBvc2l0aW9uICsgMikpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMztcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXI6IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9IEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0JlemllcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmV2YWx1YXRlID0gYmV6aWVyRXZhbHVhdGU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgKHNlZ21lbnRQb3NpdGlvbiArIDEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCAoc2VnbWVudFBvc2l0aW9uICsgMikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCArIDEpLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCAoc2VnbWVudFBvc2l0aW9uICsgMykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50ICsgMSkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCAoc2VnbWVudFBvc2l0aW9uICsgNCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCArIDIpLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCAoc2VnbWVudFBvc2l0aW9uICsgNSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50ICsgMikudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCAoc2VnbWVudFBvc2l0aW9uICsgNikpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDc7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9TdGVwcGVkOiBcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9TdGVwcGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuZXZhbHVhdGUgPSBzdGVwcGVkRXZhbHVhdGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgKHNlZ21lbnRQb3NpdGlvbiArIDEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCAoc2VnbWVudFBvc2l0aW9uICsgMikpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9JbnZlcnNlU3RlcHBlZDogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLnNlZ21lbnRUeXBlID0gQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfSW52ZXJzZVN0ZXBwZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5ldmFsdWF0ZSA9IGludmVyc2VTdGVwcGVkRXZhbHVhdGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgKHNlZ21lbnRQb3NpdGlvbiArIDEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCAoc2VnbWVudFBvc2l0aW9uICsgMikpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDM7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDU01fQVNTRVJUKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICsrdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkuc2VnbWVudENvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgICsrdG90YWxTZWdtZW50Q291bnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHVzZXJkYXRhY291bnQ6IG51bWJlciA9IDA7IHVzZXJkYXRhY291bnQgPCBqc29uLmdldEV2ZW50Q291bnQoKTsgKyt1c2VyZGF0YWNvdW50KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1c2VyZGF0YWNvdW50KS5maXJlVGltZSA9IGpzb24uZ2V0RXZlbnRUaW1lKHVzZXJkYXRhY291bnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudHMuYXQodXNlcmRhdGFjb3VudCkudmFsdWUgPSBqc29uLmdldEV2ZW50VmFsdWUodXNlcmRhdGFjb3VudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAganNvbi5yZWxlYXNlKCk7XHJcbiAgICAgICAgICAgIGpzb24gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIGpzb24gPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/5pu05pawXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiDjgqTjg5njg7Pjg4jnmbrngavjga7jg4Hjgqfjg4Pjgq/jgIJcclxuICAgICAgICAgKiDlhaXlipvjgZnjgovmmYLplpPjga/lkbzjgbDjgozjgovjg6Ljg7zjgrfjg6fjg7Pjgr/jgqTjg5/jg7PjgrDjgpLvvJDjgajjgZfjgZ/np5LmlbDjgafooYzjgYbjgIJcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBiZWZvcmVDaGVja1RpbWVTZWNvbmRzICAg5YmN5Zue44Gu44Kk44OZ44Oz44OI44OB44Kn44OD44Kv5pmC6ZaTW+enkl1cclxuICAgICAgICAgKiBAcGFyYW0gbW90aW9uVGltZVNlY29uZHMgICAgICAgIOS7iuWbnuOBruWGjeeUn+aZgumWk1vnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldEZpcmVkRXZlbnQoYmVmb3JlQ2hlY2tUaW1lU2Vjb25kczogbnVtYmVyLCBtb3Rpb25UaW1lU2Vjb25kczogbnVtYmVyKTogY3NtVmVjdG9yPGNzbVN0cmluZz5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMudXBkYXRlU2l6ZSgwKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIOOCpOODmeODs+ODiOOBrueZuueBq+ODgeOCp+ODg+OCr1xyXG4gICAgICAgICAgICBmb3IgKGxldCB1OiBudW1iZXIgPSAwOyB1IDwgdGhpcy5fbW90aW9uRGF0YS5ldmVudENvdW50OyArK3UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmICgodGhpcy5fbW90aW9uRGF0YS5ldmVudHMuYXQodSkuZmlyZVRpbWUgPiBiZWZvcmVDaGVja1RpbWVTZWNvbmRzKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1KS5maXJlVGltZSA8PSBtb3Rpb25UaW1lU2Vjb25kcykpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlyZWRFdmVudFZhbHVlcy5wdXNoQmFjayhuZXcgY3NtU3RyaW5nKHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHUpLnZhbHVlLnMpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgX3NvdXJjZUZyYW1lUmF0ZTogbnVtYmVyOyAgICAgICAgICAgLy8g44Ot44O844OJ44GX44Gf44OV44Kh44Kk44Or44GuRlBT44CC6KiY6L+w44GM54Sh44GR44KM44Gw44OH44OV44Kp44Or44OI5YCkMTVmcHPjgajjgarjgotcclxuICAgICAgICBwdWJsaWMgX2xvb3BEdXJhdGlvblNlY29uZHM6IG51bWJlcjsgICAgICAgLy8gbXRu44OV44Kh44Kk44Or44Gn5a6a576p44GV44KM44KL5LiA6YCj44Gu44Oi44O844K344On44Oz44Gu6ZW344GVXHJcbiAgICAgICAgcHVibGljIF9pc0xvb3A6IGJvb2xlYW47ICAgICAgICAgICAgICAgICAgIC8vIOODq+ODvOODl+OBmeOCi+OBiz9cclxuICAgICAgICBwdWJsaWMgX2lzTG9vcEZhZGVJbjogYm9vbGVhbjsgICAgICAgICAgICAgLy8g44Or44O844OX5pmC44Gr44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544GL44Gp44GG44GL44Gu44OV44Op44Kw44CC5Yid5pyf5YCk44Gn44Gv5pyJ5Yq544CCXHJcbiAgICAgICAgcHVibGljIF9sYXN0V2VpZ2h0OiBudW1iZXI7ICAgICAgICAgICAgICAgIC8vIOacgOW+jOOBq+ioreWumuOBleOCjOOBn+mHjeOBv1xyXG5cclxuICAgICAgICBwdWJsaWMgX21vdGlvbkRhdGE6IEN1YmlzbU1vdGlvbkRhdGE7ICAgICAgICAgICAgICAgICAgICAgICAgLy8g5a6f6Zqb44Gu44Oi44O844K344On44Oz44OH44O844K/5pys5L2TXHJcbiBcclxuICAgICAgICBwdWJsaWMgX2V5ZUJsaW5rUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAgLy8g6Ieq5YuV44G+44Gw44Gf44GN44KS6YGp55So44GZ44KL44OR44Op44Oh44O844K/SUTjg4/jg7Pjg4njg6vjga7jg6rjgrnjg4jjgIIgIOODouODh+ODq++8iOODouODh+ODq+OCu+ODg+ODhuOCo+ODs+OCsO+8ieOBqOODkeODqeODoeODvOOCv+OCkuWvvuW/nOS7mOOBkeOCi+OAglxyXG4gICAgICAgIHB1YmxpYyBfbGlwU3luY1BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjsgICAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jgpLpgannlKjjgZnjgovjg5Hjg6njg6Hjg7zjgr9JROODj+ODs+ODieODq+OBruODquOCueODiOOAgiAg44Oi44OH44Or77yI44Oi44OH44Or44K744OD44OG44Kj44Oz44Kw77yJ44Go44OR44Op44Oh44O844K/44KS5a++5b+c5LuY44GR44KL44CCXHJcbiBcclxuICAgICAgICBwdWJsaWMgX21vZGVsQ3VydmVJZEV5ZUJsaW5rOiBDdWJpc21JZEhhbmRsZTsgICAgLy8g44Oi44OH44Or44GM5oyB44Gk6Ieq5YuV44G+44Gw44Gf44GN55So44OR44Op44Oh44O844K/SUTjga7jg4/jg7Pjg4njg6vjgIIgIOODouODh+ODq+OBqOODouODvOOCt+ODp+ODs+OCkuWvvuW/nOS7mOOBkeOCi+OAglxyXG4gICAgICAgIHB1YmxpYyBfbW9kZWxDdXJ2ZUlkTGlwU3luYzogQ3ViaXNtSWRIYW5kbGU7ICAgICAvLyDjg6Ljg4fjg6vjgYzmjIHjgaTjg6rjg4Pjg5fjgrfjg7Pjgq/nlKjjg5Hjg6njg6Hjg7zjgr9JROOBruODj+ODs+ODieODq+OAgiAg44Oi44OH44Or44Go44Oi44O844K344On44Oz44KS5a++5b+c5LuY44GR44KL44CCXHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZ30gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3J9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcclxuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XHJcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xyXG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBrueorumhnlxyXG4gICAgICogXHJcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7nqK7poZ7jgIJcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGVudW0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRcclxuICAgIHtcclxuICAgICAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbCwgICAgICAgICAgLy8g44Oi44OH44Or44Gr5a++44GX44GmXHJcbiAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyLCAgICAgIC8vIOODkeODqeODoeODvOOCv+OBq+WvvuOBl+OBplxyXG4gICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5ICAgICAvLyDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjgavlr77jgZfjgaZcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBrueorumhnlxyXG4gICAgICogXHJcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7nqK7poZ7jgIJcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGVudW0gQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVcclxuICAgIHtcclxuICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9MaW5lYXIgPSAwLCAgICAgICAgIC8vIOODquODi+OColxyXG4gICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0JlemllciA9IDEsICAgICAgICAgLy8g44OZ44K444Kn5puy57eaXHJcbiAgICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZCA9IDIsICAgICAgICAvLyDjgrnjg4bjg4Pjg5dcclxuICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9JbnZlcnNlU3RlcHBlZCA9IDMgIC8vIOOCpOODs+ODkOODvOOCueOCueODhuODg+ODl1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7liLblvqHngrlcclxuICAgICAqIFxyXG4gICAgICog44Oi44O844K344On44Oz44Kr44O844OW44Gu5Yi25b6h54K544CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25Qb2ludFxyXG4gICAge1xyXG4gICAgICAgIHRpbWU6IG51bWJlciA9IDAuMDsgICAgICAgICAvLyDmmYLplpNb56eSXVxyXG4gICAgICAgIHZhbHVlOiBudW1iZXIgPSAwLjA7ICAgICAgICAvLyDlgKRcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu6KmV5L6h6Zai5pWwXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSAgIHBvaW50cyAgICAgIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWItuW+oeeCueODquOCueODiFxyXG4gICAgICogQHBhcmFtICAgdGltZSAgICAgICAg6KmV5L6h44GZ44KL5pmC6ZaTW+enkl1cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBjc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uXHJcbiAgICB7XHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgICBwb2ludHM6IEN1YmlzbU1vdGlvblBvaW50W10sXHJcbiAgICAgICAgICAgIHRpbWU6IG51bWJlclxyXG4gICAgICAgICk6IG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4hcclxuICAgICAqIFxyXG4gICAgICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25TZWdtZW50XHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGJyaWVmIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv+OAglxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmV2YWx1YXRlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5iYXNlUG9pbnRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuc2VnbWVudFR5cGUgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXZhbHVhdGU6IGNzbU1vdGlvblNlZ21lbnRFdmFsdWF0aW9uRnVuY3Rpb247ICAgLy8g5L2/55So44GZ44KL6KmV5L6h6Zai5pWwXHJcbiAgICAgICAgYmFzZVBvaW50SW5kZXg6IG51bWJlcjsgICAgIC8vIOacgOWIneOBruOCu+OCsOODoeODs+ODiOOBuOOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgIHNlZ21lbnRUeXBlOiBudW1iZXI7ICAgIC8vIOOCu+OCsOODoeODs+ODiOOBrueorumhnlxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5ZcclxuICAgICAqIFxyXG4gICAgICog44Oi44O844K344On44Oz44Kr44O844OW44CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25DdXJ2ZVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbDtcclxuICAgICAgICAgICAgdGhpcy5zZWdtZW50Q291bnQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VTZWdtZW50SW5kZXggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmZhZGVJblRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuZmFkZU91dFRpbWUgPSAwLjA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0eXBlOiBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldDsgICAgICAgICAgICAgICAvLyDjgqvjg7zjg5bjga7nqK7poZ5cclxuICAgICAgICBpZDogQ3ViaXNtSWRIYW5kbGU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOOCq+ODvOODluOBrklEXHJcbiAgICAgICAgc2VnbWVudENvdW50OiBudW1iZXI7ICAgICAgICAgICAgICAgICAgICAgIC8vIOOCu+OCsOODoeODs+ODiOOBruWAi+aVsFxyXG4gICAgICAgIGJhc2VTZWdtZW50SW5kZXg6IG51bWJlcjsgICAgICAgICAgICAgICAgICAvLyDmnIDliJ3jga7jgrvjgrDjg6Hjg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICBmYWRlSW5UaW1lOiBudW1iZXI7ICAgICAgICAgICAgICAgICAgICAgIC8vIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXHJcbiAgICAgICAgZmFkZU91dFRpbWU6IG51bWJlcjsgICAgICAgICAgICAgICAgICAgICAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICog44Kk44OZ44Oz44OI44CCXHJcbiAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkV2ZW50XHJcbiAgICB7XHJcbiAgICAgICAgZmlyZVRpbWU6IG51bWJlciA9IDAuMDtcclxuICAgICAgICB2YWx1ZTogY3NtU3RyaW5nO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr9cclxuICAgICAqIFxyXG4gICAgICog44Oi44O844K344On44Oz44OH44O844K/44CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25EYXRhXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuZHVyYXRpb24gPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMubG9vcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnZlQ291bnQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50Q291bnQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmZwcyA9IDAuMDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VydmVzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4oKTtcclxuICAgICAgICAgICAgdGhpcy5zZWdtZW50cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uU2VnbWVudD4oKTtcclxuICAgICAgICAgICAgdGhpcy5wb2ludHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvblBvaW50PigpO1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uRXZlbnQ+KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkdXJhdGlvbjogbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cclxuICAgICAgICBsb29wOiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Or44O844OX44GZ44KL44GL44Gp44GG44GLXHJcbiAgICAgICAgY3VydmVDb3VudDogbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOOCq+ODvOODluOBruWAi+aVsFxyXG4gICAgICAgIGV2ZW50Q291bnQ6IG51bWJlcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2VyRGF0YeOBruWAi+aVsFxyXG4gICAgICAgIGZwczogbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDjg5Xjg6zjg7zjg6Djg6zjg7zjg4hcclxuICAgICAgICBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT47ICAgICAgICAgICAgICAgLy8g44Kr44O844OW44Gu44Oq44K544OIXHJcbiAgICAgICAgc2VnbWVudHM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25TZWdtZW50PjsgICAgICAgICAgIC8vIOOCu+OCsOODoeODs+ODiOOBruODquOCueODiFxyXG4gICAgICAgIHBvaW50czogY3NtVmVjdG9yPEN1YmlzbU1vdGlvblBvaW50PjsgICAgICAgICAgICAgICAvLyDjg53jgqTjg7Pjg4jjga7jg6rjgrnjg4hcclxuICAgICAgICBldmVudHM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25FdmVudD47ICAgICAgICAgICAgICAgLy8g44Kk44OZ44Oz44OI44Gu44Oq44K544OIXHJcbiAgICB9O1xyXG59IiwiLypcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21qc29ufSBmcm9tICcuLi91dGlscy9jdWJpc21qc29uJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWR9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmd9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcclxuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XHJcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBjdWJpc21mcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xyXG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcclxuaW1wb3J0IEN1YmlzbUpzb24gPSBjdWJpc21qc29uLkN1YmlzbUpzb247XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29ya1xyXG57XHJcbiAgICAvLyBKU09OIGtleXNcclxuICAgIGNvbnN0IE1ldGE6IHN0cmluZyA9IFwiTWV0YVwiO1xyXG4gICAgY29uc3QgRHVyYXRpb246IHN0cmluZyA9IFwiRHVyYXRpb25cIjtcclxuICAgIGNvbnN0IExvb3A6IHN0cmluZyA9IFwiTG9vcFwiO1xyXG4gICAgY29uc3QgQ3VydmVDb3VudDogc3RyaW5nID0gXCJDdXJ2ZUNvdW50XCI7XHJcbiAgICBjb25zdCBGcHM6IHN0cmluZyA9IFwiRnBzXCI7XHJcbiAgICBjb25zdCBUb3RhbFNlZ21lbnRDb3VudDogc3RyaW5nID0gXCJUb3RhbFNlZ21lbnRDb3VudFwiO1xyXG4gICAgY29uc3QgVG90YWxQb2ludENvdW50OiBzdHJpbmcgPSBcIlRvdGFsUG9pbnRDb3VudFwiO1xyXG4gICAgY29uc3QgQ3VydmVzOiBzdHJpbmcgPSBcIkN1cnZlc1wiO1xyXG4gICAgY29uc3QgVGFyZ2V0OiBzdHJpbmcgPSBcIlRhcmdldFwiO1xyXG4gICAgY29uc3QgSWQ6IHN0cmluZyA9IFwiSWRcIjtcclxuICAgIGNvbnN0IEZhZGVJblRpbWU6IHN0cmluZyA9IFwiRmFkZUluVGltZVwiO1xyXG4gICAgY29uc3QgRmFkZU91dFRpbWU6IHN0cmluZyA9IFwiRmFkZU91dFRpbWVcIjtcclxuICAgIGNvbnN0IFNlZ21lbnRzOiBzdHJpbmcgPSBcIlNlZ21lbnRzXCI7XHJcbiAgICBjb25zdCBVc2VyRGF0YTogc3RyaW5nID0gXCJVc2VyRGF0YVwiO1xyXG4gICAgY29uc3QgVXNlckRhdGFDb3VudDogc3RyaW5nID0gXCJVc2VyRGF0YUNvdW50XCI7XHJcbiAgICBjb25zdCBUb3RhbFVzZXJEYXRhU2l6ZTogc3RyaW5nID0gXCJUb3RhbFVzZXJEYXRhU2l6ZVwiO1xyXG4gICAgY29uc3QgVGltZTogc3RyaW5nID0gXCJUaW1lXCI7XHJcbiAgICBjb25zdCBWYWx1ZTogc3RyaW5nID0gXCJWYWx1ZVwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogbW90aW9uMy5qc29u44Gu44Kz44Oz44OG44OK44CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25Kc29uXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICogQHBhcmFtIGJ1ZmZlciBtb3Rpb24zLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcclxuICAgICAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDdWJpc21Kc29uLmRlbGV0ZSh0aGlzLl9qc29uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBrumVt+OBleOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW90aW9uRHVyYXRpb24oKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoTWV0YSkuZ2V0TWFwKCkuZ2V0VmFsdWUoRHVyYXRpb24pLnRvRmxvYXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+aDheWgseOBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjg6vjg7zjg5fjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOODq+ODvOODl+OBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc01vdGlvbkxvb3AoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKE1ldGEpLmdldE1hcCgpLmdldFZhbHVlKExvb3ApLnRvQm9vbGVhbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz44Kr44O844OW44Gu5YCL5pWw44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7lgIvmlbBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVDb3VudCgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShNZXRhKS5nZXRNYXAoKS5nZXRWYWx1ZShDdXJ2ZUNvdW50KS50b0ludCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz44Gu44OV44Os44O844Og44Os44O844OI44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDjg5Xjg6zjg7zjg6Djg6zjg7zjg4hbRlBTXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRNb3Rpb25GcHMoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoTWV0YSkuZ2V0TWFwKCkuZ2V0VmFsdWUoRnBzKS50b0Zsb2F0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgrvjgrDjg6Hjg7Pjg4jjga7nt4/lkIjoqIjjga7lj5blvpdcclxuICAgICAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruOCu+OCsOODoeODs+ODiOOBruWPluW+l1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRNb3Rpb25Ub3RhbFNlZ21lbnRDb3VudCgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShNZXRhKS5nZXRNYXAoKS5nZXRWYWx1ZShUb3RhbFNlZ21lbnRDb3VudCkudG9JbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu5Yi25b6h5bqX44Gu57eP5ZCI6KiI44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7liLblvqHngrnjga7nt4/lkIjoqIhcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW90aW9uVG90YWxQb2ludENvdW50KCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKE1ldGEpLmdldE1hcCgpLmdldFZhbHVlKFRvdGFsUG9pbnRDb3VudCkudG9JbnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCpOODs+aZgumWk+OBruWtmOWcqFxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc0V4aXN0TW90aW9uRmFkZUluVGltZSgpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoTWV0YSkuZ2V0TWFwKCkuaXNFeGlzdChGYWRlSW5UaW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWtmOWcqFxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc0V4aXN0TW90aW9uRmFkZU91dFRpbWUoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKE1ldGEpLmdldE1hcCgpLmlzRXhpc3QoRmFkZU91dFRpbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz44Gu44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7PmmYLplpNb56eSXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRNb3Rpb25GYWRlSW5UaW1lKCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKE1ldGEpLmdldE1hcCgpLmdldFZhbHVlKEZhZGVJblRpbWUpLnRvRmxvYXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaTW+enkl1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW90aW9uRmFkZU91dFRpbWUoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoTWV0YSkuZ2V0TWFwKCkuZ2V0VmFsdWUoRmFkZU91dFRpbWUpLnRvRmxvYXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBrueorumhnuOBruWPluW+l1xyXG4gICAgICAgICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g44Kr44O844OW44Gu56iu6aGeXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE1vdGlvbkN1cnZlVGFyZ2V0KGN1cnZlSW5kZXg6IG51bWJlcik6IHN0cmluZ1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEN1cnZlcykuZ2V0VmVjdG9yKCkuYXQoY3VydmVJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoVGFyZ2V0KS5nZXRSYXdTdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBrklE44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiDjgqvjg7zjg5bjga5JRFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZUlkKGN1cnZlSW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEN1cnZlcykuZ2V0VmVjdG9yKCkuYXQoY3VydmVJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoSWQpLmdldFJhd1N0cmluZygpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruODleOCp+ODvOODieOCpOODs+aZgumWk+OBruWtmOWcqFxyXG4gICAgICAgICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc0V4aXN0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlSW5kZXg6IG51bWJlcik6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShDdXJ2ZXMpLmdldFZlY3RvcigpLmF0KGN1cnZlSW5kZXgpLmdldE1hcCgpLmlzRXhpc3QoRmFkZUluVGltZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjga7lrZjlnKhcclxuICAgICAgICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZSDlrZjlnKjjgZfjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNFeGlzdE1vdGlvbkN1cnZlRmFkZU91dFRpbWUoY3VydmVJbmRleDogbnVtYmVyKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKEN1cnZlcykuZ2V0VmVjdG9yKCkuYXQoY3VydmVJbmRleCkuZ2V0TWFwKCkuaXNFeGlzdChGYWRlT3V0VGltZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+aZgumWk1vnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE1vdGlvbkN1cnZlRmFkZUluVGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShDdXJ2ZXMpLmdldFZlY3RvcigpLmF0KGN1cnZlSW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKEZhZGVJblRpbWUpLnRvRmxvYXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWPluW+l1xyXG4gICAgICAgICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaTW+enkl1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShDdXJ2ZXMpLmdldFZlY3RvcigpLmF0KGN1cnZlSW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKEZhZGVPdXRUaW1lKS50b0Zsb2F0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7lgIvmlbDjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBruWAi+aVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZVNlZ21lbnRDb3VudChjdXJ2ZUluZGV4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShDdXJ2ZXMpLmdldFZlY3RvcigpLmF0KGN1cnZlSW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKFNlZ21lbnRzKS5nZXRWZWN0b3IoKS5nZXRTaXplKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7lgKTjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcGFyYW0gc2VnbWVudEluZGV4IOOCu+OCsOODoeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g44K744Kw44Oh44Oz44OI44Gu5YCkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUluZGV4OiBudW1iZXIsIHNlZ21lbnRJbmRleDogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoQ3VydmVzKS5nZXRWZWN0b3IoKS5hdChjdXJ2ZUluZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShTZWdtZW50cykuZ2V0VmVjdG9yKCkuYXQoc2VnbWVudEluZGV4KS50b0Zsb2F0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqTjg5njg7Pjg4jjga7lgIvmlbDjga7lj5blvpdcclxuICAgICAgICAgKiBAcmV0dXJuIOOCpOODmeODs+ODiOOBruWAi+aVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRFdmVudENvdW50KCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIXRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKE1ldGEpLmdldE1hcCgpLmlzRXhpc3QoVXNlckRhdGFDb3VudCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShNZXRhKS5nZXRNYXAoKS5nZXRWYWx1ZShVc2VyRGF0YUNvdW50KS50b0ludCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIOOCpOODmeODs+ODiOOBrue3j+aWh+Wtl+aVsOOBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu57eP5paH5a2X5pWwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFRvdGFsRXZlbnRWYWx1ZVNpemUoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoTWV0YSkuZ2V0TWFwKCkuZ2V0VmFsdWUoVG90YWxVc2VyRGF0YVNpemUpLnRvSW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqTjg5njg7Pjg4jjga7mmYLplpPjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gdXNlckRhdGFJbmRleCDjgqTjg5njg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOOCpOODmeODs+ODiOOBruaZgumWk1vnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldEV2ZW50VGltZSh1c2VyRGF0YUluZGV4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShVc2VyRGF0YSkuZ2V0VmVjdG9yKCkuYXQodXNlckRhdGFJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoVGltZSkudG9JbnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCpOODmeODs+ODiOOBruWPluW+l1xyXG4gICAgICAgICAqIEBwYXJhbSB1c2VyRGF0YUluZGV4IOOCpOODmeODs+ODiOOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu5paH5a2X5YiXXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldEV2ZW50VmFsdWUodXNlckRhdGFJbmRleDogbnVtYmVyKTogY3NtU3RyaW5nXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGNzbVN0cmluZyh0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShVc2VyRGF0YSkuZ2V0VmVjdG9yKCkuYXQodXNlckRhdGFJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoVmFsdWUpLmdldFJhd1N0cmluZygpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF9qc29uOiBDdWJpc21Kc29uOyAgLy8gbW90aW9uMy5qc29u44Gu44OH44O844K/XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcn0gZnJvbSBcIi4vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGFjdWJpc21tb3Rpb259IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID0gY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyLkN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGU7XHJcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xyXG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcclxuaW1wb3J0IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciA9IGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlci5DdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXI7XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29ya1xyXG57XHJcbiAgICAvKipcclxuICAgICAqIOODouODvOOCt+ODp+ODs+OBrueuoeeQhlxyXG4gICAgICogXHJcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7nrqHnkIbjgpLooYzjgYbjgq/jg6njgrlcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbk1hbmFnZXIgZXh0ZW5kcyBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXJcclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFByaW9yaXR5ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBruWEquWFiOW6plxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRDdXJyZW50UHJpb3JpdHkoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFByaW9yaXR5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5LqI57SE5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICAgICAgICogQHJldHVybiAg44Oi44O844K344On44Oz44Gu5YSq5YWI5bqmXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFJlc2VydmVQcmlvcml0eSgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXNlcnZlUHJpb3JpdHk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDkuojntITkuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLoqK3lrprjgZnjgovjgIJcclxuICAgICAgICAgKiBAcGFyYW0gICB2YWwgICAgIOWEquWFiOW6plxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRSZXNlcnZlUHJpb3JpdHkodmFsOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSB2YWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlhKrlhYjluqbjgpLoqK3lrprjgZfjgabjg6Ljg7zjgrfjg6fjg7PjgpLplovlp4vjgZnjgovjgIJcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBtb3Rpb24gICAgICAgICAg44Oi44O844K344On44OzXHJcbiAgICAgICAgICogQHBhcmFtIGF1dG9EZWxldGUgICAgICDlho3nlJ/jgYzni6nnjJ/jgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLliYrpmaTjgZnjgovjgarjgol0cnVlXHJcbiAgICAgICAgICogQHBhcmFtIHByaW9yaXR5ICAgICAgICDlhKrlhYjluqZcclxuICAgICAgICAgKiBAcmV0dXJuICAgICAgICAgICAgICAgIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi0lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr+OAjC0x44CNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXJ0TW90aW9uUHJpb3JpdHkobW90aW9uOiBBQ3ViaXNtTW90aW9uLCBhdXRvRGVsZXRlOiBib29sZWFuLCBwcmlvcml0eTogbnVtYmVyKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYocHJpb3JpdHkgPT0gdGhpcy5fcmVzZXJ2ZVByaW9yaXR5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSAwOyAgLy8g5LqI57SE44KS6Kej6ZmkXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IHByaW9yaXR5OyAgIC8vIOWGjeeUn+S4reODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOCkuioreWumlxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnN0YXJ0TW90aW9uKG1vdGlvbiwgYXV0b0RlbGV0ZSwgdGhpcy5fdXNlclRpbWVTZWNvbmRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OCkuabtOaWsOOBl+OBpuOAgeODouODh+ODq+OBq+ODkeODqeODoeODvOOCv+WApOOCkuWPjeaYoOOBmeOCi+OAglxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIG1vZGVsICAg5a++6LGh44Gu44Oi44OH44OrXHJcbiAgICAgICAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMgICAg44OH44Or44K/5pmC6ZaTW+enkl1cclxuICAgICAgICAgKiBAcmV0dXJuICB0cnVlICAgIOabtOaWsOOBleOCjOOBpuOBhOOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gIGZhbHNlICAg5pu05paw44GV44KM44Gm44GE44Gq44GEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHVwZGF0ZU1vdGlvbihtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyArPSBkZWx0YVRpbWVTZWNvbmRzO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdXBkYXRlZDogYm9vbGVhbiA9IHN1cGVyLmRvVXBkYXRlTW90aW9uKG1vZGVsLCB0aGlzLl91c2VyVGltZVNlY29uZHMpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYodGhpcy5pc0ZpbmlzaGVkKCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IDA7ICAvLyDlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLop6PpmaRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLkuojntITjgZnjgovjgIJcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSAgIHByaW9yaXR5ICAgIOWEquWFiOW6plxyXG4gICAgICAgICAqIEByZXR1cm4gIHRydWUgICAg5LqI57SE44Gn44GN44GfXHJcbiAgICAgICAgICogQHJldHVybiAgZmFsc2UgICDkuojntITjgafjgY3jgarjgYvjgaPjgZ9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcmVzZXJ2ZU1vdGlvbihwcmlvcml0eTogbnVtYmVyKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoKHByaW9yaXR5IDw9IHRoaXMuX3Jlc2VydmVQcmlvcml0eSkgfHwgKHByaW9yaXR5IDw9IHRoaXMuX2N1cnJlbnRQcmlvcml0eSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gcHJpb3JpdHk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF9jdXJyZW50UHJpb3JpdHk6IG51bWJlcjsgICAvLyDnj77lnKjlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqZcclxuICAgICAgICBfcmVzZXJ2ZVByaW9yaXR5OiBudW1iZXI7ICAgLy8g5YaN55Sf5LqI5a6a44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44CC5YaN55Sf5Lit44GvMOOBq+OBquOCi+OAguODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+OCkuWIpeOCueODrOODg+ODieOBp+iqreOBv+i+vOOCgOOBqOOBjeOBruapn+iDveOAglxyXG4gICAgfVxyXG4gICAgXHJcbn0iLCIvKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGFjdWJpc21tb3Rpb259IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcn0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9IGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlci5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlO1xyXG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gn5YaN55Sf44GX44Gm44GE44KL5ZCE44Oi44O844K344On44Oz44Gu566h55CG44Kv44Op44K544CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2F1dG9EZWxldGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fYXZhaWxhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9zdGFydFRpbWVTZWNvbmRzID0gLTEuMDtcclxuICAgICAgICAgICAgdGhpcy5fZmFkZUluU3RhcnRUaW1lU2Vjb25kcyA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fZW5kVGltZVNlY29uZHMgPSAtMS4wO1xyXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVRpbWVTZWNvbmRzID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVdlaWdodCA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fbGFzdEV2ZW50Q2hlY2tTZWNvbmRzID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID0gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX2F1dG9EZWxldGUgJiYgdGhpcy5fbW90aW9uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBBQ3ViaXNtTW90aW9uLmRlbGV0ZSh0aGlzLl9tb3Rpb24pOyAvL1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjga7plovlp4tcclxuICAgICAgICAgKiBAcGFyYW0gZmFkZU91dFNlY29uZHMg44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cclxuICAgICAgICAgKiBAcGFyYW0gdXNlclRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXJ0RmFkZW91dChmYWRlb3V0U2Vjb25kczogbnVtYmVyLCB1c2VyVGltZVNlY29uZHM6IG51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0VuZFRpbWVTZWNvbmRzOiBudW1iZXIgPSB1c2VyVGltZVNlY29uZHMgKyBmYWRlb3V0U2Vjb25kcztcclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX2VuZFRpbWVTZWNvbmRzIDwgMC4wIHx8IG5ld0VuZFRpbWVTZWNvbmRzIDwgdGhpcy5fZW5kVGltZVNlY29uZHMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VuZFRpbWVTZWNvbmRzID0gbmV3RW5kVGltZVNlY29uZHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBrue1guS6huOBrueiuuiqjVxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ9cclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOe1guS6huOBl+OBpuOBhOOBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc0ZpbmlzaGVkKCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9maW5pc2hlZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+OBrueiuuiqjVxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg7zjgrfjg6fjg7PjgYzplovlp4vjgZfjgZ9cclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOmWi+Wni+OBl+OBpuOBhOOBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc1N0YXJ0ZWQoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0ZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLvjga7lj5blvpdcclxuICAgICAgICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+aZguWIu1vnp5JdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFN0YXJ0VGltZSgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGFydFRpbWVTZWNvbmRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi744Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLtb56eSXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRGYWRlSW5TdGFydFRpbWUoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmFkZUluU3RhcnRUaW1lU2Vjb25kcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODleOCp+ODvOODieOCpOODs+OBrue1guS6huaZguWIu+OBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi744Gu5Y+W5b6XXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldEVuZFRpbWUoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5kVGltZVNlY29uZHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLvjga7oqK3lrppcclxuICAgICAgICAgKiBAcGFyYW0gc3RhcnRUaW1lIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+aZguWIu1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRTdGFydFRpbWUoc3RhcnRUaW1lOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGFydFRpbWVTZWNvbmRzID0gc3RhcnRUaW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi744Gu6Kit5a6aXHJcbiAgICAgICAgICogQHBhcmFtIHN0YXJ0VGltZSDjg5Xjgqfjg7zjg4njgqTjg7Pjga7plovlp4vmmYLliLtb56eSXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRGYWRlSW5TdGFydFRpbWUoc3RhcnRUaW1lOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9mYWRlSW5TdGFydFRpbWVTZWNvbmRzID0gc3RhcnRUaW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi744Gu6Kit5a6aXHJcbiAgICAgICAgICogQHBhcmFtIGVuZFRpbWUg44OV44Kn44O844OJ44Kk44Oz44Gu57WC5LqG5pmC5Yi7W+enkl1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0RW5kVGltZShlbmRUaW1lOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9lbmRUaW1lU2Vjb25kcyA9IGVuZFRpbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7ntYLkuobjga7oqK3lrppcclxuICAgICAgICAgKiBAcGFyYW0gZiB0cnVl44Gq44KJ44Oi44O844K344On44Oz44Gu57WC5LqGXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldElzRmluaXNoZWQoZjogYm9vbGVhbik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+mWi+Wni+OBruioreWumlxyXG4gICAgICAgICAqIEBwYXJhbSBmIHRydWXjgarjgonjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4tcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0SXNTdGFydGVkKGY6IGJvb2xlYW4pOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGFydGVkID0gZjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBruacieWKueaAp+OBrueiuuiqjVxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDjg6Ljg7zjgrfjg6fjg7Pjga/mnInlirlcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOODouODvOOCt+ODp+ODs+OBr+eEoeWKuVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc0F2YWlsYWJsZSgpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXZhaWxhYmxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz44Gu5pyJ5Yq55oCn44Gu6Kit5a6aXHJcbiAgICAgICAgICogQHBhcmFtIHYgdHJ1ZeOBquOCieODouODvOOCt+ODp+ODs+OBr+acieWKuVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRJc0F2YWlsYWJsZSh2OiBib29sZWFuKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fYXZhaWxhYmxlID0gdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBrueKtuaFi+OBruioreWumlxyXG4gICAgICAgICAqIEBwYXJhbSB0aW1lU2Vjb25kcyDnj77lnKjmmYLliLtb56eSXVxyXG4gICAgICAgICAqIEBwYXJhbSB3ZWlnaHQg44Oi44O844K344On44Oz5bC+6YeN44G/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldFN0YXRlKHRpbWVTZWNvbmRzOiBudW1iZXIsIHdlaWdodDogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhdGVUaW1lU2Vjb25kcyA9IHRpbWVTZWNvbmRzO1xyXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVdlaWdodCA9IHdlaWdodDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44O844K344On44Oz44Gu54++5Zyo5pmC5Yi744Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7nj77lnKjmmYLliLtb56eSXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRTdGF0ZVRpbWUoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGVUaW1lU2Vjb25kcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODvOOCt+ODp+ODs+OBrumHjeOBv+OBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6YeN44G/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFN0YXRlV2VpZ2h0KCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlV2VpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5pyA5b6M44Gr44Kk44OZ44Oz44OI44Gu55m654Gr44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaT44KS5Y+W5b6XXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHJldHVybiDmnIDlvozjgavjgqTjg5njg7Pjg4jjga7nmbrngavjgpLjg4Hjgqfjg4Pjgq/jgZfjgZ/mmYLplpNb56eSXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRMYXN0Q2hlY2tFdmVudFRpbWUoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFzdEV2ZW50Q2hlY2tTZWNvbmRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5pyA5b6M44Gr44Kk44OZ44Oz44OI44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaT44KS6Kit5a6aXHJcbiAgICAgICAgICogQHBhcmFtIGNoZWNrVGltZSDmnIDlvozjgavjgqTjg5njg7Pjg4jjgpLjg4Hjgqfjg4Pjgq/jgZfjgZ/mmYLplpNb56eSXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRMYXN0Q2hlY2tFdmVudFRpbWUoY2hlY2tUaW1lOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0RXZlbnRDaGVja1NlY29uZHMgPSBjaGVja1RpbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfYXV0b0RlbGV0ZTogYm9vbGVhbjsgICAgICAgICAgICAgICAvLyDoh6rli5XliYrpmaRcclxuICAgICAgICBfbW90aW9uOiBBQ3ViaXNtTW90aW9uOyAgICAgICAgICAgICAvLyDjg6Ljg7zjgrfjg6fjg7NcclxuXHJcbiAgICAgICAgX2F2YWlsYWJsZTogYm9vbGVhbjsgICAgICAgICAgICAgICAgLy8g5pyJ5Yq55YyW44OV44Op44KwXHJcbiAgICAgICAgX2ZpbmlzaGVkOiBib29sZWFuOyAgICAgICAgICAgICAgICAgLy8g57WC5LqG44OV44Op44KwXHJcbiAgICAgICAgX3N0YXJ0ZWQ6IGJvb2xlYW47ICAgICAgICAgICAgICAgICAgLy8g6ZaL5aeL44OV44Op44KwXHJcbiAgICAgICAgX3N0YXJ0VGltZVNlY29uZHM6IG51bWJlcjsgICAgICAgICAgLy8g44Oi44O844K344On44Oz5YaN55Sf6ZaL5aeL5pmC5Yi7W+enkl1cclxuICAgICAgICBfZmFkZUluU3RhcnRUaW1lU2Vjb25kczogbnVtYmVyOyAgICAvLyDjg5Xjgqfjg7zjg4njgqTjg7Pplovlp4vmmYLliLvvvIjjg6vjg7zjg5fjga7mmYLjga/liJ3lm57jga7jgb/vvIlb56eSXVxyXG4gICAgICAgIF9lbmRUaW1lU2Vjb25kczogbnVtYmVyOyAgICAgICAgICAgIC8vIOe1guS6huS6iOWumuaZguWIu1vnp5JdXHJcbiAgICAgICAgX3N0YXRlVGltZVNlY29uZHM6IG51bWJlcjsgICAgICAgICAgLy8g5pmC5Yi744Gu54q25oWLW+enkl1cclxuICAgICAgICBfc3RhdGVXZWlnaHQ6IG51bWJlcjvjgIAgICAgICAgICAgICAgLy8g6YeN44G/44Gu54q25oWLXHJcbiAgICAgICAgX2xhc3RFdmVudENoZWNrU2Vjb25kczogbnVtYmVyOyAgICAgLy8g5pyA57WC44GuTW90aW9u5YG044Gu44OB44Kn44OD44Kv44GX44Gf5pmC6ZaTXHJcblxyXG4gICAgICAgIF9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlOyAvLyDjgqTjg7Pjgrnjgr/jg7PjgrnjgZTjgajjgavkuIDmhI/jga7lgKTjgpLmjIHjgaTorZjliKXnlarlj7dcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwOi8vbGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgYWN1YmlzbW1vdGlvbn0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW90aW9ucXVldWVlbnRyeX0gZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5JztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZ30gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xyXG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcclxuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XHJcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xyXG5pbXBvcnQgaXRlcmF0b3IgPSBjc212ZWN0b3IuaXRlcmF0b3I7XHJcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gY3ViaXNtbW90aW9ucXVldWVlbnRyeS5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5O1xyXG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8qKlxyXG4gICAgICog44Oi44O844K344On44Oz5YaN55Sf44Gu566h55CGXHJcbiAgICAgKlxyXG4gICAgICog44Oi44O844K344On44Oz5YaN55Sf44Gu566h55CG55So44Kv44Op44K544CCQ3ViaXNtTW90aW9u44Oi44O844K344On44Oz44Gq44GpQUN1YmlzbU1vdGlvbuOBruOCteODluOCr+ODqeOCueOCkuWGjeeUn+OBmeOCi+OBn+OCgeOBq+S9v+eUqOOBmeOCi+OAglxyXG4gICAgICpcclxuICAgICAqIEBub3RlIOWGjeeUn+S4reOBq+WIpeOBruODouODvOOCt+ODp+ODs+OBjCBTdGFydE1vdGlvbigp44GV44KM44Gf5aC05ZCI44Gv44CB5paw44GX44GE44Oi44O844K344On44Oz44Gr5ruR44KJ44GL44Gr5aSJ5YyW44GX5pen44Oi44O844K344On44Oz44Gv5Lit5pat44GZ44KL44CCXHJcbiAgICAgKiAgICAgICDooajmg4XnlKjjg6Ljg7zjgrfjg6fjg7PjgIHkvZPnlKjjg6Ljg7zjgrfjg6fjg7PjgarjganjgpLliIbjgZHjgabjg6Ljg7zjgrfjg6fjg7PljJbjgZfjgZ/loLTlkIjjgarjganjgIFcclxuICAgICAqICAgICAgIOikh+aVsOOBruODouODvOOCt+ODp+ODs+OCkuWQjOaZguOBq+WGjeeUn+OBleOBm+OCi+WgtOWQiOOBr+OAgeikh+aVsOOBrkN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOCpOODs+OCueOCv+ODs+OCueOCkuS9v+eUqOOBmeOCi+OAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fZXZlbnRDYWxsQmFjayA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50Q3VzdG9tRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbnMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLl9tb3Rpb25zLmdldFNpemUoKTsgKytpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9tb3Rpb25zLmF0KGkpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbnMuYXQoaSkucmVsZWFzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbnMuc2V0KGksIHZvaWQgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW90aW9ucy5zZXQoaSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbnMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gu6ZaL5aeLXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiDmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7PjgpLplovlp4vjgZnjgovjgILlkIzjgZjjgr/jgqTjg5fjga7jg6Ljg7zjgrfjg6fjg7PjgYzml6LjgavjgYLjgovloLTlkIjjga/jgIHml6LlrZjjga7jg6Ljg7zjgrfjg6fjg7PjgavntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgIHjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgpLplovlp4vjgZXjgZvjgovjgIJcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSAgIG1vdGlvbiAgICAgICAgICDplovlp4vjgZnjgovjg6Ljg7zjgrfjg6fjg7NcclxuICAgICAgICAgKiBAcGFyYW0gICBhdXRvRGVsZXRlICAgICAg5YaN55Sf44GM57WC5LqG44GX44Gf44Oi44O844K344On44Oz44Gu44Kk44Oz44K544K/44Oz44K544KS5YmK6Zmk44GZ44KL44Gq44KJIHRydWVcclxuICAgICAgICAgKiBAcGFyYW0gICB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cclxuICAgICAgICAgKiBAcmV0dXJuICAgICAgICAgICAgICAgICAgICAgIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi0lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr+OAjC0x44CNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXJ0TW90aW9uKG1vdGlvbjogQUN1YmlzbU1vdGlvbiwgYXV0b0RlbGV0ZTogYm9vbGVhbiwgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIpOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihtb3Rpb24gPT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xyXG4gICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLl9tb3Rpb25zLmdldFNpemUoKTsgKytpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gdGhpcy5fbW90aW9ucy5hdChpKTtcclxuICAgICAgICAgICAgICAgIGlmKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnN0YXJ0RmFkZW91dChtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb24uZ2V0RmFkZU91dFRpbWUoKSwgdXNlclRpbWVTZWNvbmRzKTsgLy8g44OV44Kn44O844OJ44Ki44Km44OI44KS6ZaL5aeL44GX57WC5LqG44GZ44KLXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSBuZXcgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSgpO+OAgC8vIOe1guS6huaZguOBq+egtOajhOOBmeOCi1xyXG4gICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5Ll9hdXRvRGVsZXRlID0gYXV0b0RlbGV0ZTtcclxuICAgICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5fbW90aW9uID0gbW90aW9uO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fbW90aW9ucy5wdXNoQmFjayhtb3Rpb25RdWV1ZUVudHJ5KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5YWo44Gm44Gu44Oi44O844K344On44Oz44Gu57WC5LqG44Gu56K66KqNXHJcbiAgICAgICAgICogQHJldHVybiB0cnVlIOWFqOOBpue1guS6huOBl+OBpuOBhOOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2Ug57WC5LqG44GX44Gm44GE44Gq44GEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzRmluaXNoZWQoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTsgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpOylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IG1vdGlvbjogQUN1YmlzbU1vdGlvbiA9IG1vdGlvblF1ZXVlRW50cnkuX21vdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihtb3Rpb24gPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gLS0tLS0g57WC5LqG5riI44G/44Gu5Yem55CG44GM44GC44KM44Gw5YmK6Zmk44GZ44KLIC0tLS0tLVxyXG4gICAgICAgICAgICAgICAgaWYoIW1vdGlvblF1ZXVlRW50cnkuaXNGaW5pc2hlZCgpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGUucHJlSW5jcmVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gu57WC5LqG44Gu56K66KqNXHJcbiAgICAgICAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnlOdW1iZXIg44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+3XHJcbiAgICAgICAgICogQHJldHVybiB0cnVlIOWFqOOBpue1guS6huOBl+OBpuOBhOOCi1xyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2Ug57WC5LqG44GX44Gm44GE44Gq44GEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzRmluaXNoZWRCeUhhbmRsZShtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8g5pei44Gr44Oi44O844K344On44Oz44GM44GC44KM44Gw57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLXHJcbiAgICAgICAgICAgIGZvcihsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTsgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO2l0ZS5pbmNyZW1lbnQoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKG1vdGlvblF1ZXVlRW50cnkuX21vdGlvblF1ZXVlRW50cnlIYW5kbGUgPT0gbW90aW9uUXVldWVFbnRyeU51bWJlciAmJiAhbW90aW9uUXVldWVFbnRyeS5pc0ZpbmlzaGVkKCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5YWo44Gm44Gu44Oi44O844K344On44Oz44KS5YGc5q2i44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0b3BBbGxNb3Rpb25zKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0g5Yem55CG44KS6KGM44GGIC0tLS0tLS1cclxuICAgICAgICAgICAgLy8g5pei44Gr44Oi44O844K344On44Oz44GM44GC44KM44Gw57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLXHJcblxyXG4gICAgICAgICAgICBmb3IobGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7IGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIC0tLS0tIOe1guS6hua4iOOBv+OBruWHpueQhuOBjOOBguOCjOOBsOWJiumZpOOBmeOCiyAtLS0tLS1cclxuICAgICAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xyXG4gICAgICAgICAgICAgICAgbW90aW9uUXVldWVFbnRyeSA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5oyH5a6a44GX44GfQ3ViaXNtTW90aW9uUXVldWVFbnRyeeOBruWPluW+l1xyXG5cclxuICAgICAgICAgKiBAcGFyYW0gICBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyICDjg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7dcclxuICAgICAgICAgKiBAcmV0dXJuICDmjIflrprjgZfjgZ9DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XHJcbiAgICAgICAgICogQHJldHVybiAgbnVsbCAgIOimi+OBpOOBi+OCieOBquOBi+OBo+OBn1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5KG1vdGlvblF1ZXVlRW50cnlOdW1iZXI6IGFueSk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vLS0tLS0tLSDlh6bnkIbjgpLooYzjgYYgLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcclxuICAgICAgICAgICAgZm9yKGxldCBpdGU6IGl0ZXJhdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+ID0gdGhpcy5fbW90aW9ucy5iZWdpbigpOyBpdGUubm90RXF1YWwodGhpcy5fbW90aW9ucy5lbmQoKSk7IGl0ZS5wcmVJbmNyZW1lbnQoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZihtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID09IG1vdGlvblF1ZXVlRW50cnlOdW1iZXIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vdGlvblF1ZXVlRW50cnk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kk44OZ44Oz44OI44KS5Y+X44GR5Y+W44KLQ2FsbGJhY2vjga7nmbvpjLJcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sg44Kz44O844Or44OQ44OD44Kv6Zai5pWwXHJcbiAgICAgICAgICogQHBhcmFtIGN1c3RvbURhdGEg44Kz44O844Or44OQ44OD44Kv44Gr6L+U44GV44KM44KL44OH44O844K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldEV2ZW50Q2FsbGJhY2soY2FsbGJhY2s6IEN1YmlzbU1vdGlvbkV2ZW50RnVuY3Rpb24sIGN1c3RvbURhdGE6IGFueSA9IG51bGwpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9ldmVudENhbGxCYWNrID0gY2FsbGJhY2s7XHJcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50Q3VzdG9tRGF0YSA9IGN1c3RvbURhdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrDjgZfjgabjgIHjg6Ljg4fjg6vjgavjg5Hjg6njg6Hjg7zjgr/lgKTjgpLlj43mmKDjgZnjgovjgIJcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSAgIG1vZGVsICAg5a++6LGh44Gu44Oi44OH44OrXHJcbiAgICAgICAgICogQHBhcmFtICAgdXNlclRpbWVTZWNvbmRzICAg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cclxuICAgICAgICAgKiBAcmV0dXJuICB0cnVlICAgIOODouODh+ODq+OBuOODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBguOCilxyXG4gICAgICAgICAqIEByZXR1cm4gIGZhbHNlICAg44Oi44OH44Or44G444OR44Op44Oh44O844K/5YCk44Gu5Y+N5pig44Gq44GXKOODouODvOOCt+ODp+ODs+OBruWkieWMluOBquOBlylcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZG9VcGRhdGVNb3Rpb24obW9kZWw6IEN1YmlzbU1vZGVsLCB1c2VyVGltZVNlY29uZHM6IG51bWJlcik6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCB1cGRhdGVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAvLyAtLS0tLS0tIOWHpueQhuOCkuihjOOBhiAtLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTsgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpOylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IG1vdGlvbjogQUN1YmlzbU1vdGlvbiA9IG1vdGlvblF1ZXVlRW50cnkuX21vdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihtb3Rpb24gPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLSDlgKTjgpLlj43mmKDjgZnjgosgLS0tLS0tXHJcbiAgICAgICAgICAgICAgICBtb3Rpb24udXBkYXRlUGFyYW1ldGVycyhtb2RlbCwgbW90aW9uUXVldWVFbnRyeSwgdXNlclRpbWVTZWNvbmRzKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLSDjg6bjg7zjgrbjg4jjg6rjgqzjg7zjgqTjg5njg7Pjg4jjgpLmpJzmn7vjgZnjgosgLS0tLVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlyZWRMaXN0OiBjc21WZWN0b3I8Y3NtU3RyaW5nPiA9IG1vdGlvbi5nZXRGaXJlZEV2ZW50KFxyXG4gICAgICAgICAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0TGFzdENoZWNrRXZlbnRUaW1lKCkgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldFN0YXJ0VGltZSgpLCBcclxuICAgICAgICAgICAgICAgICAgICB1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldFN0YXJ0VGltZSgpXHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcihsZXQgaTogbnVtYmVyID0gMDsgaSA8IGZpcmVkTGlzdC5nZXRTaXplKCk7ICsraSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudENhbGxCYWNrKHRoaXMsIGZpcmVkTGlzdC5hdChpKSwgdGhpcy5fZXZlbnRDdXN0b21EYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldExhc3RDaGVja0V2ZW50VGltZSh1c2VyVGltZVNlY29uZHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLSDntYLkuobmuIjjgb/jga7lh6bnkIbjgYzjgYLjgozjgbDliYrpmaTjgZnjgosgLS0tLS0tXHJcbiAgICAgICAgICAgICAgICBpZihtb3Rpb25RdWV1ZUVudHJ5LmlzRmluaXNoZWQoKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlLnByZUluY3JlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgX3VzZXJUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxyXG5cclxuICAgICAgICBfbW90aW9uczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+OyAvLyDjg6Ljg7zjgrfjg6fjg7NcclxuICAgICAgICBfZXZlbnRDYWxsQmFjazogQ3ViaXNtTW90aW9uRXZlbnRGdW5jdGlvbjsgLy8g44Kz44O844Or44OQ44OD44Kv6Zai5pWwXHJcbiAgICAgICAgX2V2ZW50Q3VzdG9tRGF0YTogYW55OyAvLyDjgrPjg7zjg6vjg5Djg4Pjgq/jgavmiLvjgZXjgozjgovjg4fjg7zjgr9cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjgqTjg5njg7Pjg4jjga7jgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDjgpLlrprnvqlcclxuICAgICAqIFxyXG4gICAgICog44Kk44OZ44Oz44OI44Gu44Kz44O844Or44OQ44OD44Kv44Gr55m76Yyy44Gn44GN44KL6Zai5pWw44Gu5Z6L5oOF5aCxXHJcbiAgICAgKiBAcGFyYW0gY2FsbGVyICAgICAgICDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjgpLlho3nlJ/jgZXjgZvjgZ9DdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXJcclxuICAgICAqIEBwYXJhbSBldmVudFZhbHVlICAgIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xyXG4gICAgICogQHBhcmFtIGN1c3RvbURhdGEgICDjgrPjg7zjg6vjg5Djg4Pjgq/jgavov5TjgZXjgozjgovnmbvpjLLmmYLjgavmjIflrprjgZXjgozjgZ/jg4fjg7zjgr9cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBDdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uXHJcbiAgICB7XHJcbiAgICAgICAgKFxyXG4gICAgICAgICAgICBjYWxsZXI6IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcixcclxuICAgICAgICAgICAgZXZlbnRWYWx1ZTogY3NtU3RyaW5nLFxyXG4gICAgICAgICAgICBjdXN0b21EYXRhOiBhbnlcclxuICAgICAgICApOiB2b2lkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+3XHJcbiAgICAgKiBcclxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OBruWumue+qVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSB0eXBlIEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUgPSBhbnk7XHJcbiAgICBleHBvcnQgY29uc3QgSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9IC0xO1xyXG59IiwiLypcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21waHlzaWNzaW50ZXJuYWx9IGZyb20gJy4vY3ViaXNtcGh5c2ljc2ludGVybmFsJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWx9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtdmVjdG9yMn0gZnJvbSAnLi4vbWF0aC9jdWJpc212ZWN0b3IyJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0aH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRoJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtcGh5c2ljc2pzb259IGZyb20gJy4vY3ViaXNtcGh5c2ljc2pzb24nO1xyXG5pbXBvcnQgQ3ViaXNtUGh5c2ljc0pzb24gPSBjdWJpc21waHlzaWNzanNvbi5DdWJpc21QaHlzaWNzSnNvbjtcclxuaW1wb3J0IEN1YmlzbU1hdGggPSBjdWJpc21tYXRoLkN1YmlzbU1hdGg7XHJcbmltcG9ydCBDdWJpc21QaHlzaWNzUmlnID0gY3ViaXNtcGh5c2ljc2ludGVybmFsLkN1YmlzbVBoeXNpY3NSaWc7XHJcbmltcG9ydCBDdWJpc21QaHlzaWNzU3ViUmlnID0gY3ViaXNtcGh5c2ljc2ludGVybmFsLkN1YmlzbVBoeXNpY3NTdWJSaWc7XHJcbmltcG9ydCBDdWJpc21QaHlzaWNzSW5wdXQgPSBjdWJpc21waHlzaWNzaW50ZXJuYWwuQ3ViaXNtUGh5c2ljc0lucHV0O1xyXG5pbXBvcnQgQ3ViaXNtUGh5c2ljc091dHB1dCA9IGN1YmlzbXBoeXNpY3NpbnRlcm5hbC5DdWJpc21QaHlzaWNzT3V0cHV0O1xyXG5pbXBvcnQgQ3ViaXNtUGh5c2ljc1BhcnRpY2xlID0gY3ViaXNtcGh5c2ljc2ludGVybmFsLkN1YmlzbVBoeXNpY3NQYXJ0aWNsZTtcclxuaW1wb3J0IEN1YmlzbVBoeXNpY3NTb3VyY2UgPSBjdWJpc21waHlzaWNzaW50ZXJuYWwuQ3ViaXNtUGh5c2ljc1NvdXJjZTtcclxuaW1wb3J0IEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlID0gY3ViaXNtcGh5c2ljc2ludGVybmFsLkN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlO1xyXG5pbXBvcnQgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24gPSBjdWJpc21waHlzaWNzaW50ZXJuYWwuQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb247XHJcbmltcG9ydCBDdWJpc21WZWN0b3IyID0gY3ViaXNtdmVjdG9yMi5DdWJpc21WZWN0b3IyO1xyXG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuXHJcbiAgICAvLy8gcGh5c2ljcyB0eXBlcyB0YWdzLlxyXG4gICAgY29uc3QgUGh5c2ljc1R5cGVUYWdYOiBzdHJpbmcgPSBcIlhcIjtcclxuICAgIGNvbnN0IFBoeXNpY3NUeXBlVGFnWTogc3RyaW5nID0gXCJZXCI7XHJcbiAgICBjb25zdCBQaHlzaWNzVHlwZVRhZ0FuZ2xlOiBzdHJpbmcgPSBcIkFuZ2xlXCI7XHJcbiAgICBcclxuICAgIC8vLyBDb25zdGFudCBvZiBhaXIgcmVzaXN0YW5jZS5cclxuICAgIGNvbnN0IEFpclJlc2lzdGFuY2U6IG51bWJlciA9IDUuMDtcclxuICAgIFxyXG4gICAgLy8vIENvbnN0YW50IG9mIG1heGltdW0gd2VpZ2h0IG9mIGlucHV0IGFuZCBvdXRwdXQgcmF0aW8uXHJcbiAgICBjb25zdCBNYXhpbXVtV2VpZ2h0OiBudW1iZXIgPSAxMDAuMDtcclxuICAgIFxyXG4gICAgLy8vIENvbnN0YW50IG9mIHRocmVzaG9sZCBvZiBtb3ZlbWVudC5cclxuICAgIGNvbnN0IE1vdmVtZW50VGhyZXNob2xkOiBudW1iZXIgPSAwLjAwMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOeJqeeQhua8lOeul+OCr+ODqeOCuVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc1xyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxyXG4gICAgICAgICAqIEBwYXJhbSBidWZmZXIgICAgcGh5c2ljczMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAgICAgICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICAgICAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiBDdWJpc21QaHlzaWNzXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgcmV0OiBDdWJpc21QaHlzaWNzID0gbmV3IEN1YmlzbVBoeXNpY3MoKTtcclxuXHJcbiAgICAgICAgICAgIHJldC5wYXJzZShidWZmZXIsIHNpemUpO1xyXG4gICAgICAgICAgICByZXQuX3BoeXNpY3NSaWcuZ3Jhdml0eS55ID0gMDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnoLTmo4TjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gcGh5c2ljcyDnoLTmo4TjgZnjgovjgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShwaHlzaWNzOiBDdWJpc21QaHlzaWNzKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYocGh5c2ljcyAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwaHlzaWNzLnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgIHBoeXNpY3MgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDniannkIbmvJTnrpfjga7oqZXkvqFcclxuICAgICAgICAgKiBAcGFyYW0gbW9kZWwg54mp55CG5ryU566X44Gu57WQ5p6c44KS6YGp55So44GZ44KL44Oi44OH44OrXHJcbiAgICAgICAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZXZhbHVhdGUobW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgdG90YWxBbmdsZToge2FuZ2xlOiBudW1iZXJ9O1xyXG4gICAgICAgICAgICBsZXQgd2VpZ2h0OiBudW1iZXI7XHJcbiAgICAgICAgICAgIGxldCByYWRBbmdsZTogbnVtYmVyO1xyXG4gICAgICAgICAgICBsZXQgb3V0cHV0VmFsdWU6IG51bWJlcjtcclxuICAgICAgICAgICAgbGV0IHRvdGFsVHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigpO1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudFNldHRpbmc6IEN1YmlzbVBoeXNpY3NTdWJSaWc7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50SW5wdXQ6IEN1YmlzbVBoeXNpY3NJbnB1dFtdO1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudE91dHB1dDogQ3ViaXNtUGh5c2ljc091dHB1dFtdO1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudFBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBwYXJhbWV0ZXJWYWx1ZTogRmxvYXQzMkFycmF5O1xyXG4gICAgICAgICAgICBsZXQgcGFyYW1ldGVyTWF4aW11bVZhbHVlOiBGbG9hdDMyQXJyYXk7XHJcbiAgICAgICAgICAgIGxldCBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IEZsb2F0MzJBcnJheTtcclxuICAgICAgICAgICAgbGV0IHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogRmxvYXQzMkFycmF5O1xyXG5cclxuICAgICAgICAgICAgcGFyYW1ldGVyVmFsdWUgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMudmFsdWVzO1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlcztcclxuICAgICAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLm1pbmltdW1WYWx1ZXM7XHJcbiAgICAgICAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5kZWZhdWx0VmFsdWVzO1xyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBzZXR0aW5nSW5kZXg6IG51bWJlciA9IDA7IHNldHRpbmdJbmRleCA8IHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQ7ICsrc2V0dGluZ0luZGV4KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0b3RhbEFuZ2xlID0ge2FuZ2xlOiAwLjB9O1xyXG4gICAgICAgICAgICAgICAgdG90YWxUcmFuc2xhdGlvbi54ID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgdG90YWxUcmFuc2xhdGlvbi55ID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFNldHRpbmcgPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KHNldHRpbmdJbmRleCk7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5wdXQgPSB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5nZXQoY3VycmVudFNldHRpbmcuYmFzZUlucHV0SW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudE91dHB1dCA9IHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5nZXQoY3VycmVudFNldHRpbmcuYmFzZU91dHB1dEluZGV4KTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXMgPSB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5nZXQoY3VycmVudFNldHRpbmcuYmFzZVBhcnRpY2xlSW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIExvYWQgaW5wdXQgcGFyYW1ldGVyc1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgY3VycmVudFNldHRpbmcuaW5wdXRDb3VudDsgKytpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHdlaWdodCA9IGN1cnJlbnRJbnB1dFtpXS53ZWlnaHQgLyBNYXhpbXVtV2VpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50SW5wdXRbaV0uc291cmNlUGFyYW1ldGVySW5kZXggPT0gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5wdXRbaV0uc291cmNlUGFyYW1ldGVySW5kZXggPSBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleChjdXJyZW50SW5wdXRbaV0uc291cmNlLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbnB1dFtpXS5nZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQW5nbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlclZhbHVlW2N1cnJlbnRJbnB1dFtpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZVtjdXJyZW50SW5wdXRbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWVbY3VycmVudElucHV0W2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlW2N1cnJlbnRJbnB1dFtpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLm5vcm1hbGl6YXRpb25Qb3NpdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFNldHRpbmcubm9ybWFsaXphdGlvbkFuZ2xlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5wdXRbMF0ucmVmbGVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByYWRBbmdsZSA9IEN1YmlzbU1hdGguZGVncmVlc1RvUmFkaWFuKC10b3RhbEFuZ2xlLmFuZ2xlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnggPSAodG90YWxUcmFuc2xhdGlvbi54ICogQ3ViaXNtTWF0aC5jb3MocmFkQW5nbGUpIC0gdG90YWxUcmFuc2xhdGlvbi55ICogQ3ViaXNtTWF0aC5zaW4ocmFkQW5nbGUpKTtcclxuICAgICAgICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSA9ICh0b3RhbFRyYW5zbGF0aW9uLnggKiBDdWJpc21NYXRoLnNpbihyYWRBbmdsZSkgKyB0b3RhbFRyYW5zbGF0aW9uLnkgKiBDdWJpc21NYXRoLmNvcyhyYWRBbmdsZSkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHBhcnRpY2xlcyBwb3NpdGlvbi5cclxuICAgICAgICAgICAgICAgIHVwZGF0ZVBhcnRpY2xlcyhcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFydGljbGVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLnBhcnRpY2xlQ291bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWxUcmFuc2xhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbEFuZ2xlLmFuZ2xlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMud2luZCxcclxuICAgICAgICAgICAgICAgICAgICBNb3ZlbWVudFRocmVzaG9sZCAqIGN1cnJlbnRTZXR0aW5nLm5vcm1hbGl6YXRpb25Qb3NpdGlvbi5tYXhpbXVtLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhVGltZVNlY29uZHMsXHJcbiAgICAgICAgICAgICAgICAgICAgQWlyUmVzaXN0YW5jZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgb3V0cHV0IHBhcmFtZXRlcnMuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgY3VycmVudFNldHRpbmcub3V0cHV0Q291bnQ7ICsraSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGFydGljbGVJbmRleCA9IGN1cnJlbnRPdXRwdXRbaV0udmVydGV4SW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHBhcnRpY2xlSW5kZXggPCAxIHx8IHBhcnRpY2xlSW5kZXggPj0gY3VycmVudFNldHRpbmcucGFydGljbGVDb3VudClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY3VycmVudE91dHB1dFtpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID09IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE91dHB1dFtpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoY3VycmVudE91dHB1dFtpXS5kZXN0aW5hdGlvbi5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLnggPSBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXhdLnBvc2l0aW9uLnggLSBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAxXS5wb3NpdGlvbi54O1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLnkgPSBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXhdLnBvc2l0aW9uLnkgLSBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAxXS5wb3NpdGlvbi55O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRWYWx1ZSA9IGN1cnJlbnRPdXRwdXRbaV0uZ2V0VmFsdWUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFydGljbGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZUluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3V0cHV0W2ldLnJlZmxlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuZ3Jhdml0eVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID0gY3VycmVudE91dHB1dFtpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvdXRQYXJhbWV0ZXJWYWx1ZSA9IHBhcmFtZXRlclZhbHVlLnNsaWNlKGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVPdXRwdXRQYXJhbWV0ZXJWYWx1ZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0UGFyYW1ldGVyVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZVtkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlW2Rlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXhdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE91dHB1dFtpXVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWApOOCkuWPjeaYoFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgb2Zmc2V0OiBudW1iZXIgPSBkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4LCBvdXRQYXJhbUluZGV4OiBudW1iZXIgPSAwOyBvZmZzZXQgPCBwYXJhbWV0ZXJWYWx1ZS5sZW5ndGg7IG9mZnNldCsrLCBvdXRQYXJhbUluZGV4KyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZVtvZmZzZXRdID0gb3V0UGFyYW1ldGVyVmFsdWVbb3V0UGFyYW1JbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqrjg5fjgrfjg6fjg7Pjga7oqK3lrppcclxuICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucyDjgqrjg5fjgrfjg6fjg7NcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0T3B0aW9ucyhvcHRpb25zOiBPcHRpb25zKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqrjg5fjgrfjg6fjg7Pjga7lj5blvpdcclxuICAgICAgICAgKiBAcmV0dXJuIOOCquODl+OCt+ODp+ODs1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRPcHRpb24oKTogT3B0aW9uc1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZyA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMgPSBuZXcgT3B0aW9ucygpO1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmdyYXZpdHkueSA9IC0xLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuZ3Jhdml0eS54ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy53aW5kLnggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLndpbmQueSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnID0gdm9pZCAwO1xyXG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHBoeXNpY3MzLmpzb27jgpLjg5Hjg7zjgrnjgZnjgovjgIJcclxuICAgICAgICAgKiBAcGFyYW0gcGh5c2ljc0pzb24gcGh5c2ljczMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAgICAgICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBwYXJzZShwaHlzaWNzSnNvbjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcgPSBuZXcgQ3ViaXNtUGh5c2ljc1JpZygpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbGV0IGpzb246IEN1YmlzbVBoeXNpY3NKc29uID0gbmV3IEN1YmlzbVBoeXNpY3NKc29uKHBoeXNpY3NKc29uLCBzaXplKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuZ3Jhdml0eSA9IGpzb24uZ2V0R3Jhdml0eSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLndpbmQgPSBqc29uLmdldFdpbmQoKTtcclxuICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudCA9IGpzb24uZ2V0U3ViUmlnQ291bnQoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MudXBkYXRlU2l6ZSh0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50LCBDdWJpc21QaHlzaWNzU3ViUmlnLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMudXBkYXRlU2l6ZShqc29uLmdldFRvdGFsSW5wdXRDb3VudCgpLCBDdWJpc21QaHlzaWNzSW5wdXQsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMudXBkYXRlU2l6ZShqc29uLmdldFRvdGFsT3V0cHV0Q291bnQoKSwgQ3ViaXNtUGh5c2ljc091dHB1dCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLnVwZGF0ZVNpemUoanNvbi5nZXRWZXJ0ZXhDb3VudCgpLCBDdWJpc21QaHlzaWNzUGFydGljbGUsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGlucHV0SW5kZXg6IG51bWJlciA9IDAsIG91dHB1dEluZGV4OiBudW1iZXIgPSAwLCBwYXJ0aWNsZUluZGV4OiBudW1iZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5nZXRTaXplKCk7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5ub3JtYWxpemF0aW9uUG9zaXRpb24ubWluaW11bSA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWluaW11bVZhbHVlKGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5ub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWF4aW11bVZhbHVlKGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5ub3JtYWxpemF0aW9uUG9zaXRpb24uZGVmYWx1dCA9IGpzb24uZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uRGVmYXVsdFZhbHVlKGkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkubm9ybWFsaXphdGlvbkFuZ2xlLm1pbmltdW0gPSBqc29uLmdldE5vcm1hbGl6YXRpb25BbmdsZU1pbmltdW1WYWx1ZShpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkubm9ybWFsaXphdGlvbkFuZ2xlLm1heGltdW0gPSBqc29uLmdldE5vcm1hbGl6YXRpb25BbmdsZU1heGltdW1WYWx1ZShpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkubm9ybWFsaXphdGlvbkFuZ2xlLmRlZmFsdXQgPSBqc29uLmdldE5vcm1hbGl6YXRpb25BbmdsZURlZmF1bHRWYWx1ZShpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJbnB1dFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5pbnB1dENvdW50ID0ganNvbi5nZXRJbnB1dENvdW50KGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5iYXNlSW5wdXRJbmRleCA9IGlucHV0SW5kZXg7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgajogbnVtYmVyID0gMDsgaiA8IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuaW5wdXRDb3VudDsgKytqKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS5zb3VyY2VQYXJhbWV0ZXJJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS53ZWlnaHQgPSBqc29uLmdldElucHV0V2VpZ2h0KGksIGopO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS5yZWZsZWN0ID0ganNvbi5nZXRJbnB1dFJlZmxlY3QoaSwgaik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGpzb24uZ2V0SW5wdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnWClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS50eXBlID0gQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX1g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS5nZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWUgPSBnZXRJbnB1dFRyYW5zbGF0aW9uWEZyb21Ob3JtYWxpemVkUGFyYW1ldGVyVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoanNvbi5nZXRJbnB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdZKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnR5cGUgPSBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSA9IGdldElucHV0VHJhbnNsYXRpb25ZRnJvbU5vcm1hbGl6ZWRQYXJhbXRlclZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGpzb24uZ2V0SW5wdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnQW5nbGUpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikudHlwZSA9IEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9BbmdsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSA9IGdldElucHV0QW5nbGVGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnNvdXJjZS50YXJnZXRUeXBlID0gQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUuQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGVfUGFyYW1ldGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS5zb3VyY2UuaWQgPSBqc29uLmdldElucHV0U291cmNlSWQoaSwgaik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnB1dEluZGV4ICs9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuaW5wdXRDb3VudDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBPdXRwdXRcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkub3V0cHV0Q291bnQgPSBqc29uLmdldE91dHB1dENvdW50KGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5iYXNlT3V0cHV0SW5kZXggPSBvdXRwdXRJbmRleDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGo6IG51bWJlciA9IDA7IGogPCB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm91dHB1dENvdW50OyArK2opXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLnZlcnRleEluZGV4ID0ganNvbi5nZXRPdXRwdXRWZXJ0ZXhJbmRleChpLCBqKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5hbmdsZVNjYWxlID0ganNvbi5nZXRPdXRwdXRBbmdsZVNjYWxlKGksIGopO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLndlaWdodCA9IGpzb24uZ2V0T3V0cHV0V2VpZ2h0KGksIGopO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmRlc3RpbmF0aW9uLnRhcmdldFR5cGUgPSBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZS5DdWJpc21QaHlzaWNzVGFyZ2V0VHlwZV9QYXJhbWV0ZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmRlc3RpbmF0aW9uLmlkID0ganNvbi5nZXRPdXRwdXREZXN0aW5hdGlvbklkKGksIGopO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihqc29uLmdldE91dHB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdYKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikudHlwZSA9IEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9YO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5nZXRWYWx1ZSA9IGdldE91dHB1dFRyYW5zbGF0aW9uWDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZ2V0U2NhbGUgPSBnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihqc29uLmdldE91dHB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdZKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikudHlwZSA9IEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5nZXRWYWx1ZSA9IGdldE91dHB1dFRyYW5zbGF0aW9uWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZ2V0U2NhbGUgPSBnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihqc29uLmdldE91dHB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdBbmdsZSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLnR5cGUgPSBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfQW5nbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmdldFZhbHVlID0gZ2V0T3V0cHV0QW5nbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmdldFNjYWxlID0gZ2V0T3V0cHV0U2NhbGVBbmdsZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLnJlZmxlY3QgPSBqc29uLmdldE91dHB1dFJlZmxlY3QoaSwgaik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvdXRwdXRJbmRleCArPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm91dHB1dENvdW50O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFBhcnRpY2xlXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLnBhcnRpY2xlQ291bnQgPSBqc29uLmdldFBhcnRpY2xlQ291bnQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLmJhc2VQYXJ0aWNsZUluZGV4ID0gcGFydGljbGVJbmRleDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGo6IG51bWJlciA9IDA7IGogPCB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLnBhcnRpY2xlQ291bnQ7ICsrailcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5hdChwYXJ0aWNsZUluZGV4ICsgaikubW9iaWxpdHkgPSBqc29uLmdldFBhcnRpY2xlTW9iaWxpdHkoaSwgaik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQocGFydGljbGVJbmRleCArIGopLmRlbGF5ID0ganNvbi5nZXRQYXJ0aWNsZURlbGF5KGksIGopO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmF0KHBhcnRpY2xlSW5kZXggKyBqKS5hY2NlbGVyYXRpb24gPSBqc29uLmdldFBhcnRpY2xlQWNjZWxlcmF0aW9uKGksIGopO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmF0KHBhcnRpY2xlSW5kZXggKyBqKS5yYWRpdXMgPSBqc29uLmdldFBhcnRpY2xlUmFkaXVzKGksIGopO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmF0KHBhcnRpY2xlSW5kZXggKyBqKS5wb3NpdGlvbiA9IGpzb24uZ2V0UGFydGljbGVQb3NpdGlvbihpLCBqKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZUluZGV4ICs9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkucGFydGljbGVDb3VudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XHJcblxyXG4gICAgICAgICAgICBqc29uLnJlbGVhc2UoKTtcclxuICAgICAgICAgICAganNvbiA9IHZvaWQgMDtcclxuICAgICAgICAgICAganNvbiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDliJ3mnJ/ljJbjgZnjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaW5pdGlhbGl6ZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgc3RyYW5kOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXTtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRTZXR0aW5nOiBDdWJpc21QaHlzaWNzU3ViUmlnO1xyXG4gICAgICAgICAgICBsZXQgcmFkaXVzOiBDdWJpc21WZWN0b3IyO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgc2V0dGluZ0luZGV4OiBudW1iZXIgPSAwOyBzZXR0aW5nSW5kZXggPCB0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50OyArK3NldHRpbmdJbmRleClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFNldHRpbmcgPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KHNldHRpbmdJbmRleCk7XHJcbiAgICAgICAgICAgICAgICBzdHJhbmQgPSB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5nZXQoY3VycmVudFNldHRpbmcuYmFzZVBhcnRpY2xlSW5kZXgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdG9wIG9mIHBhcnRpY2xlLlxyXG4gICAgICAgICAgICAgICAgc3RyYW5kWzBdLmluaXRpYWxQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgICAgICAgICAgICAgIHN0cmFuZFswXS5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihzdHJhbmRbMF0uaW5pdGlhbFBvc2l0aW9uLngsIHN0cmFuZFswXS5pbml0aWFsUG9zaXRpb24ueSk7XHJcbiAgICAgICAgICAgICAgICBzdHJhbmRbMF0ubGFzdEdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIC0xLjApO1xyXG4gICAgICAgICAgICAgICAgc3RyYW5kWzBdLmxhc3RHcmF2aXR5LnkgKj0gLTEuMDtcclxuICAgICAgICAgICAgICAgIHN0cmFuZFswXS52ZWxvY2l0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgICAgICAgICAgICAgIHN0cmFuZFswXS5mb3JjZSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgcGFyaXRjbGVzLlxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMTsgaSA8IGN1cnJlbnRTZXR0aW5nLnBhcnRpY2xlQ291bnQ7ICsraSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByYWRpdXMgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzLnkgPSBzdHJhbmRbaV0ucmFkaXVzO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmFuZFtpXS5pbml0aWFsUG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihzdHJhbmRbaSAtIDFdLmluaXRpYWxQb3NpdGlvbi54ICsgcmFkaXVzLngsIHN0cmFuZFtpIC0gMV0uaW5pdGlhbFBvc2l0aW9uLnkgKyByYWRpdXMueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbi54LCBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uLnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmFuZFtpXS5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uLngsIHN0cmFuZFtpXS5pbml0aWFsUG9zaXRpb24ueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyYW5kW2ldLmxhc3RHcmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAtMS4wKTtcclxuICAgICAgICAgICAgICAgICAgICBzdHJhbmRbaV0ubGFzdEdyYXZpdHkueSAqPSAtMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmFuZFtpXS52ZWxvY2l0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgICAgICAgICAgICAgICAgICBzdHJhbmRbaV0uZm9yY2UgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF9waHlzaWNzUmlnOiBDdWJpc21QaHlzaWNzUmlnOyAgICAgIC8vIOeJqeeQhua8lOeul+OBruODh+ODvOOCv1xyXG4gICAgICAgIF9vcHRpb25zOiBPcHRpb25zOyAgICAvLyDjgqrjg5fjgrfjg6fjg7NcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeJqeeQhua8lOeul+OBruOCquODl+OCt+ODp+ODs1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgT3B0aW9uc1xyXG4gICAge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xyXG4gICAgICAgICAgICB0aGlzLndpbmQgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdyYXZpdHk6IEN1YmlzbVZlY3RvcjI7IC8vIOmHjeWKm+aWueWQkVxyXG4gICAgICAgIHdpbmQ6IEN1YmlzbVZlY3RvcjI7ICAgIC8vIOmiqOOBruaWueWQkVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBzaWduLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgRXZhbHVhdGlvbiB0YXJnZXQgdmFsdWUuXHJcbiAgICAgKiBcclxuICAgICAqIEByZXR1cm4gU2lnbiBvZiB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gc2lnbih2YWx1ZTogbnVtYmVyKTogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHJldDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgaWYodmFsdWUgPiAwLjApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXQgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHZhbHVlIDwgMC4wKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0ID0gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldElucHV0VHJhbnNsYXRpb25YRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZShcclxuICAgICAgICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcclxuICAgICAgICB0YXJnZXRBbmdsZToge2FuZ2xlOiBudW1iZXJ9LFxyXG4gICAgICAgIHZhbHVlOiBudW1iZXIsXHJcbiAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlOiBudW1iZXIsXHJcbiAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlOiBudW1iZXIsXHJcbiAgICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlOiBudW1iZXIsXHJcbiAgICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcclxuICAgICAgICBub3JtYWxpemF0aW9uQW5nbGU6IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxyXG4gICAgICAgIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXHJcbiAgICAgICAgd2VpZ2h0OiBudW1iZXIpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGFyZ2V0VHJhbnNsYXRpb24ueCArPSBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcclxuICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSxcclxuICAgICAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlLFxyXG4gICAgICAgICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWUsXHJcbiAgICAgICAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5taW5pbXVtLFxyXG4gICAgICAgICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSxcclxuICAgICAgICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLmRlZmFsdXQsXHJcbiAgICAgICAgICAgIGlzSW52ZXJ0ZWRcclxuICAgICAgICApICogd2VpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldElucHV0VHJhbnNsYXRpb25ZRnJvbU5vcm1hbGl6ZWRQYXJhbXRlclZhbHVlKFxyXG4gICAgICAgIHRhcmdldFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxyXG4gICAgICAgIHRhcmdldEFuZ2xlOiB7YW5nbGU6IG51bWJlcn0sXHJcbiAgICAgICAgdmFsdWU6IG51bWJlcixcclxuICAgICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IG51bWJlcixcclxuICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWU6IG51bWJlcixcclxuICAgICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWU6IG51bWJlcixcclxuICAgICAgICBub3JtYWxpemF0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxyXG4gICAgICAgIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXHJcbiAgICAgICAgaXNJbnZlcnRlZDogYm9vbGVhbixcclxuICAgICAgICB3ZWlnaHQ6IG51bWJlcik6IHZvaWRcclxuICAgIHtcclxuICAgICAgICB0YXJnZXRUcmFuc2xhdGlvbi55ICs9IG5vcm1hbGl6ZVBhcmFtZXRlclZhbHVlKFxyXG4gICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlLFxyXG4gICAgICAgICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUsXHJcbiAgICAgICAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZSxcclxuICAgICAgICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLm1pbmltdW0sXHJcbiAgICAgICAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5tYXhpbXVtLFxyXG4gICAgICAgICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24uZGVmYWx1dCxcclxuICAgICAgICAgICAgaXNJbnZlcnRlZFxyXG4gICAgICAgICkgKiB3ZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0SW5wdXRBbmdsZUZyb21Ob3JtYWxpemVkUGFyYW1ldGVyVmFsdWUoXHJcbiAgICAgICAgdGFyZ2V0VHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXHJcbiAgICAgICAgdGFyZ2V0QW5nbGU6IHthbmdsZTogbnVtYmVyfSxcclxuICAgICAgICB2YWx1ZTogbnVtYmVyLFxyXG4gICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZTogbnVtYmVyLFxyXG4gICAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxyXG4gICAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxyXG4gICAgICAgIG5vcm1hbGl6YWl0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxyXG4gICAgICAgIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXHJcbiAgICAgICAgaXNJbnZlcnRlZDogYm9vbGVhbixcclxuICAgICAgICB3ZWlnaHQ6IG51bWJlcik6IHZvaWRcclxuICAgIHtcclxuICAgICAgICB0YXJnZXRBbmdsZS5hbmdsZSArPSBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcclxuICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZSxcclxuICAgICAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlLFxyXG4gICAgICAgICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWUsXHJcbiAgICAgICAgICAgIG5vcm1hbGl6YXRpb25BbmdsZS5taW5pbXVtLFxyXG4gICAgICAgICAgICBub3JtYWxpemF0aW9uQW5nbGUubWF4aW11bSxcclxuICAgICAgICAgICAgbm9ybWFsaXphdGlvbkFuZ2xlLmRlZmFsdXQsXHJcbiAgICAgICAgICAgIGlzSW52ZXJ0ZWQsXHJcbiAgICAgICAgKSAqIHdlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRPdXRwdXRUcmFuc2xhdGlvblgoXHJcbiAgICAgICAgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXHJcbiAgICAgICAgcGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcclxuICAgICAgICBwYXJ0aWNsZUluZGV4OiBudW1iZXIsXHJcbiAgICAgICAgaXNJbnZlcnRlZDogYm9vbGVhbixcclxuICAgICAgICBwYXJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyKTogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXIgPSB0cmFuc2xhdGlvbi54O1xyXG5cclxuICAgICAgICBpZihpc0ludmVydGVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgb3V0cHV0VmFsdWUgKj0gLTEuMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvdXRwdXRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRPdXRwdXRUcmFuc2xhdGlvblkoXHJcbiAgICAgICAgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXHJcbiAgICAgICAgcGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcclxuICAgICAgICBwYXJ0aWNsZUluZGV4OiBudW1iZXIsXHJcbiAgICAgICAgaXNJbnZlcnRlZDogYm9vbGVhbixcclxuICAgICAgICBwYXJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyKTogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXIgPSB0cmFuc2xhdGlvbi55O1xyXG5cclxuICAgICAgICBpZihpc0ludmVydGVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgb3V0cHV0VmFsdWUgKj0gLTEuMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldE91dHB1dEFuZ2xlKFxyXG4gICAgICAgIHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxyXG4gICAgICAgIHBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW10sXHJcbiAgICAgICAgcGFydGljbGVJbmRleDogbnVtYmVyLFxyXG4gICAgICAgIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXHJcbiAgICAgICAgcGFyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMik6IG51bWJlclxyXG4gICAge1xyXG4gICAgICAgIGxldCBvdXRwdXRWYWx1ZTogbnVtYmVyO1xyXG5cclxuICAgICAgICBpZihwYXJ0aWNsZUluZGV4ID49IDIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwYXJlbnRHcmF2aXR5ID0gcGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAxXS5wb3NpdGlvbi5zdWJzdHJhY3QocGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAyXS5wb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHBhcmVudEdyYXZpdHkgPSBwYXJlbnRHcmF2aXR5Lm11bHRpcGx5QnlTY2FsZXIoLTEuMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvdXRwdXRWYWx1ZSA9IEN1YmlzbU1hdGguZGlyZWN0aW9uVG9SYWRpYW4ocGFyZW50R3Jhdml0eSwgdHJhbnNsYXRpb24pO1xyXG5cclxuICAgICAgICBpZihpc0ludmVydGVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgb3V0cHV0VmFsdWUgKj0gLTEuMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvdXRwdXRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRSYW5nZVZhbHVlKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlclxyXG4gICAge1xyXG4gICAgICAgIGxldCBtYXhWYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5tYXgobWluLCBtYXgpO1xyXG4gICAgICAgIGxldCBtaW5WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5taW4obWluLCBtYXgpO1xyXG5cclxuICAgICAgICByZXR1cm4gQ3ViaXNtTWF0aC5hYnMobWF4VmFsdWUgLSBtaW5WYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlclxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IG1pblZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1pbihtaW4sIG1heCk7XHJcbiAgICAgICAgcmV0dXJuIG1pblZhbHVlICsgKGdldFJhbmdlVmFsdWUobWluLCBtYXgpIC8gMi4wKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWCh0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyLCBhbmdsZVNjYWxlOiBudW1iZXIpOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0cmFuc2xhdGlvblNjYWxlLngpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWSh0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyLCBhbmdsZVNjYWxlOiBudW1iZXIpOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0cmFuc2xhdGlvblNjYWxlLnkpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRPdXRwdXRTY2FsZUFuZ2xlKHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsIGFuZ2xlU2NhbGU6IG51bWJlcik6IG51bWJlclxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGFuZ2xlU2NhbGUpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHBhcnRpY2xlcy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHN0cmFuZCAgICAgICAgICAgICAgICBUYXJnZXQgYXJyYXkgb2YgcGFydGljbGUuXHJcbiAgICAgKiBAcGFyYW0gc3RyYW5kQ291bnQgICAgICAgICAgIENvdW50IG9mIHBhcnRpY2xlLlxyXG4gICAgICogQHBhcmFtIHRvdGFsVHJhbnNsYXRpb24gICAgICBUb3RhbCB0cmFuc2xhdGlvbiB2YWx1ZS5cclxuICAgICAqIEBwYXJhbSB0b3RhbEFuZ2xlICAgICAgICAgICAgVG90YWwgYW5nbGUuXHJcbiAgICAgKiBAcGFyYW0gd2luZERpcmVjdGlvbiAgICAgICAgIERpcmVjdGlvbiBvZiBXaW5kLlxyXG4gICAgICogQHBhcmFtIHRocmVzaG9sZFZhbHVlICAgICAgICBUaHJlc2hvbGQgb2YgbW92ZW1lbnQuXHJcbiAgICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyAgICAgIERlbHRhIHRpbWUuXHJcbiAgICAgKiBAcGFyYW0gYWlyUmVzaXN0YW5jZSAgICAgICAgIEFpciByZXNpc3RhbmNlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiB1cGRhdGVQYXJ0aWNsZXMoXHJcbiAgICAgICAgc3RyYW5kOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcclxuICAgICAgICBzdHJhbmRDb3VudDogbnVtYmVyLFxyXG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXHJcbiAgICAgICAgdG90YWxBbmdsZTogbnVtYmVyLFxyXG4gICAgICAgIHdpbmREaXJlY3Rpb246IEN1YmlzbVZlY3RvcjIsXHJcbiAgICAgICAgdGhyZXNob2xkVmFsdWU6IG51bWJlcixcclxuICAgICAgICBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIsXHJcbiAgICAgICAgYWlyUmVzaXN0YW5jZTogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGxldCB0b3RhbFJhZGlhbjogbnVtYmVyO1xyXG4gICAgICAgIGxldCBkZWxheTogbnVtYmVyO1xyXG4gICAgICAgIGxldCByYWRpYW46IG51bWJlcjtcclxuICAgICAgICBsZXQgY3VycmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjI7XHJcbiAgICAgICAgbGV0IGRpcmVjdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgICAgICBsZXQgdmVsb2NpdHk6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICAgICAgbGV0IGZvcmNlOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xyXG4gICAgICAgIGxldCBuZXdEaXJlY3Rpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcblxyXG4gICAgICAgIHN0cmFuZFswXS5wb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKHRvdGFsVHJhbnNsYXRpb24ueCwgdG90YWxUcmFuc2xhdGlvbi55KTtcclxuXHJcbiAgICAgICAgdG90YWxSYWRpYW4gPSBDdWJpc21NYXRoLmRlZ3JlZXNUb1JhZGlhbih0b3RhbEFuZ2xlKTtcclxuICAgICAgICBjdXJyZW50R3Jhdml0eSA9IEN1YmlzbU1hdGgucmFkaWFuVG9EaXJlY3Rpb24odG90YWxSYWRpYW4pO1xyXG4gICAgICAgIGN1cnJlbnRHcmF2aXR5Lm5vcm1hbGl6ZSgpO1xyXG5cclxuICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDE7IGkgPCBzdHJhbmRDb3VudDsgKytpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3RyYW5kW2ldLmZvcmNlID0gY3VycmVudEdyYXZpdHkubXVsdGlwbHlCeVNjYWxlcihzdHJhbmRbaV0uYWNjZWxlcmF0aW9uKS5hZGQod2luZERpcmVjdGlvbik7XHJcblxyXG4gICAgICAgICAgICBzdHJhbmRbaV0ubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoc3RyYW5kW2ldLnBvc2l0aW9uLngsIHN0cmFuZFtpXS5wb3NpdGlvbi55KTtcclxuXHJcbiAgICAgICAgICAgIGRlbGF5ID0gc3RyYW5kW2ldLmRlbGF5ICogZGVsdGFUaW1lU2Vjb25kcyAqIDMwLjA7XHJcblxyXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBzdHJhbmRbaV0ucG9zaXRpb24uc3Vic3RyYWN0KHN0cmFuZFtpIC0gMV0ucG9zaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgcmFkaWFuID0gQ3ViaXNtTWF0aC5kaXJlY3Rpb25Ub1JhZGlhbihzdHJhbmRbaV0ubGFzdEdyYXZpdHksIGN1cnJlbnRHcmF2aXR5KSAvIGFpclJlc2lzdGFuY2U7XHJcblxyXG4gICAgICAgICAgICBkaXJlY3Rpb24ueCA9ICgoQ3ViaXNtTWF0aC5jb3MocmFkaWFuKSAqIGRpcmVjdGlvbi54KSAtIChkaXJlY3Rpb24ueSAqIEN1YmlzbU1hdGguc2luKHJhZGlhbikpKTtcclxuICAgICAgICAgICAgZGlyZWN0aW9uLnkgPSAoKEN1YmlzbU1hdGguc2luKHJhZGlhbikgKiBkaXJlY3Rpb24ueCkgKyAoZGlyZWN0aW9uLnkgKiBDdWJpc21NYXRoLmNvcyhyYWRpYW4pKSk7XHJcblxyXG4gICAgICAgICAgICBzdHJhbmRbaV0ucG9zaXRpb24gPSBzdHJhbmRbaSAtIDFdLnBvc2l0aW9uLmFkZChkaXJlY3Rpb24pO1xyXG5cclxuICAgICAgICAgICAgdmVsb2NpdHkgPSBzdHJhbmRbaV0udmVsb2NpdHkubXVsdGlwbHlCeVNjYWxlcihkZWxheSk7XHJcbiAgICAgICAgICAgIGZvcmNlID0gc3RyYW5kW2ldLmZvcmNlLm11bHRpcGx5QnlTY2FsZXIoZGVsYXkpLm11bHRpcGx5QnlTY2FsZXIoZGVsYXkpO1xyXG5cclxuICAgICAgICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gc3RyYW5kW2ldLnBvc2l0aW9uLmFkZCh2ZWxvY2l0eSkuYWRkKGZvcmNlKTtcclxuXHJcbiAgICAgICAgICAgIG5ld0RpcmVjdGlvbiA9IHN0cmFuZFtpXS5wb3NpdGlvbi5zdWJzdHJhY3Qoc3RyYW5kW2kgLSAxXS5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIG5ld0RpcmVjdGlvbi5ub3JtYWxpemUoKTtcclxuXHJcbiAgICAgICAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbiA9IHN0cmFuZFtpIC0gMV0ucG9zaXRpb24uYWRkKG5ld0RpcmVjdGlvbi5tdWx0aXBseUJ5U2NhbGVyKHN0cmFuZFtpXS5yYWRpdXMpKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChDdWJpc21NYXRoLmFicyhzdHJhbmRbaV0ucG9zaXRpb24ueCkgPCB0aHJlc2hvbGRWYWx1ZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uLnggPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWxheSAhPSAwLjApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cmFuZFtpXS52ZWxvY2l0eSA9IHN0cmFuZFtpXS5wb3NpdGlvbi5zdWJzdHJhY3Qoc3RyYW5kW2ldLmxhc3RQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBzdHJhbmRbaV0udmVsb2NpdHkuZGl2aXNpb25CeVNjYWxhcihkZWxheSk7XHJcbiAgICAgICAgICAgICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBzdHJhbmRbaV0udmVsb2NpdHkubXVsdGlwbHlCeVNjYWxlcihzdHJhbmRbaV0ubW9iaWxpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgc3RyYW5kW2ldLmZvcmNlID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xyXG4gICAgICAgICAgICBzdHJhbmRbaV0ubGFzdEdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMihjdXJyZW50R3Jhdml0eS54LCBjdXJyZW50R3Jhdml0eS55KTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgb3V0cHV0IHBhcmFtZXRlciB2YWx1ZS5cclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZSAgICAgICAgICAgIFRhcmdldCBwYXJhbWV0ZXIgdmFsdWUuXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVyVmFsdWVNaW5pbXVtICAgICBNaW5pbXVtIG9mIHBhcmFtZXRlciB2YWx1ZS5cclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZU1heGltdW0gICAgIE1heGltdW0gb2YgcGFyYW1ldGVyIHZhbHVlLlxyXG4gICAgICogQHBhcmFtIHRyYW5zbGF0aW9uICAgICAgICAgICAgICAgVHJhbnNsYXRpb24gdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU91dHB1dFBhcmFtZXRlclZhbHVlKFxyXG4gICAgICAgIHBhcmFtZXRlclZhbHVlOiBGbG9hdDMyQXJyYXksXHJcbiAgICAgICAgcGFyYW1ldGVyVmFsdWVNaW5pbXVtOiBudW1iZXIsXHJcbiAgICAgICAgcGFyYW1ldGVyVmFsdWVNYXhpbXVtOiBudW1iZXIsXHJcbiAgICAgICAgdHJhbnNsYXRpb246IG51bWJlcixcclxuICAgICAgICBvdXRwdXQ6IEN1YmlzbVBoeXNpY3NPdXRwdXQpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IG91dHB1dFNjYWxlOiBudW1iZXI7XHJcbiAgICAgICAgbGV0IHZhbHVlOiBudW1iZXI7XHJcbiAgICAgICAgbGV0IHdlaWdodDogbnVtYmVyO1xyXG4gICAgXHJcbiAgICAgICAgb3V0cHV0U2NhbGUgPSBvdXRwdXQuZ2V0U2NhbGUob3V0cHV0LnRyYW5zbGF0aW9uU2NhbGUsIG91dHB1dC5hbmdsZVNjYWxlKTtcclxuICAgIFxyXG4gICAgICAgIHZhbHVlID0gdHJhbnNsYXRpb24gKiBvdXRwdXRTY2FsZTtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlIDwgcGFyYW1ldGVyVmFsdWVNaW5pbXVtKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlIDwgb3V0cHV0LnZhbHVlQmVsb3dNaW5pbXVtKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXQudmFsdWVCZWxvd01pbmltdW0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIHZhbHVlID0gcGFyYW1ldGVyVmFsdWVNaW5pbXVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA+IHBhcmFtZXRlclZhbHVlTWF4aW11bSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IG91dHB1dC52YWx1ZUV4Y2VlZGVkTWF4aW11bSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnZhbHVlRXhjZWVkZWRNYXhpbXVtID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICB2YWx1ZSA9IHBhcmFtZXRlclZhbHVlTWF4aW11bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdlaWdodCA9IChvdXRwdXQud2VpZ2h0IC8gTWF4aW11bVdlaWdodCk7XHJcblxyXG4gICAgICAgIGlmICh3ZWlnaHQgPj0gMS4wKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcGFyYW1ldGVyVmFsdWVbMF0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUgPSAocGFyYW1ldGVyVmFsdWVbMF0gKiAoMS4wIC0gd2VpZ2h0KSkgKyAodmFsdWUgKiB3ZWlnaHQpO1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZVswXSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplUGFyYW1ldGVyVmFsdWUoXHJcbiAgICAgICAgdmFsdWU6IG51bWJlcixcclxuICAgICAgICBwYXJhbWV0ZXJNaW5pbXVtOiBudW1iZXIsXHJcbiAgICAgICAgcGFyYW1ldGVyTWF4aW11bTogbnVtYmVyLFxyXG4gICAgICAgIHBhcmFtZXRlckRlZmF1bHQ6IG51bWJlcixcclxuICAgICAgICBub3JtYWxpemVkTWluaW11bTogbnVtYmVyLFxyXG4gICAgICAgIG5vcm1hbGl6ZWRNYXhpbXVtOiBudW1iZXIsXHJcbiAgICAgICAgbm9ybWFsaXplZERlZmF1bHQ6IG51bWJlcixcclxuICAgICAgICBpc0ludmVydGVkOiBib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIGxldCByZXN1bHQ6IG51bWJlciA9IDAuMDtcclxuXHJcbiAgICAgICAgY29uc3QgbWF4VmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWF4KHBhcmFtZXRlck1heGltdW0sIHBhcmFtZXRlck1pbmltdW0pO1xyXG5cclxuICAgICAgICBpZihtYXhWYWx1ZSA8IHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG1pblZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1pbihwYXJhbWV0ZXJNYXhpbXVtLCBwYXJhbWV0ZXJNaW5pbXVtKTtcclxuXHJcbiAgICAgICAgaWYobWluVmFsdWUgPiB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBtaW5Ob3JtVmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWluKG5vcm1hbGl6ZWRNaW5pbXVtLCBub3JtYWxpemVkTWF4aW11bSk7XHJcbiAgICAgICAgY29uc3QgbWF4Tm9ybVZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1heChub3JtYWxpemVkTWluaW11bSwgbm9ybWFsaXplZE1heGltdW0pO1xyXG4gICAgICAgIGNvbnN0IG1pZGRsZU5vcm1WYWx1ZTogbnVtYmVyID0gbm9ybWFsaXplZERlZmF1bHQ7XHJcblxyXG4gICAgICAgIGNvbnN0IG1pZGRsZVZhbHVlOiBudW1iZXIgPSBnZXREZWZhdWx0VmFsdWUobWluVmFsdWUsIG1heFZhbHVlKTtcclxuICAgICAgICBjb25zdCBwYXJhbVZhbHVlOiBudW1iZXIgPSB2YWx1ZSAtIG1pZGRsZVZhbHVlO1xyXG5cclxuICAgICAgICBzd2l0Y2goc2lnbihwYXJhbVZhbHVlKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuTGVuZ3RoOiBudW1iZXIgPSBtYXhOb3JtVmFsdWUgLSBtaWRkbGVOb3JtVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcExlbmd0aDogbnVtYmVyID0gbWF4VmFsdWUgLSBtaWRkbGVWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYocExlbmd0aCAhPSAwLjApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBwYXJhbVZhbHVlICogKG5MZW5ndGggLyBwTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IG1pZGRsZU5vcm1WYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIC0xOlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5MZW5ndGg6IG51bWJlciA9IG1pbk5vcm1WYWx1ZSAtIG1pZGRsZU5vcm1WYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwTGVuZ3RoOiBudW1iZXIgPSBtaW5WYWx1ZSAtIG1pZGRsZVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHBMZW5ndGggIT0gMC4wKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcGFyYW1WYWx1ZSAqIChuTGVuZ3RoIC8gcExlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBtaWRkbGVOb3JtVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG1pZGRsZU5vcm1WYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKGlzSW52ZXJ0ZWQpXHJcbiAgICAgICAgICAgID8gcmVzdWx0XHJcbiAgICAgICAgICAgIDogKHJlc3VsdCAqIC0xLjApO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc212ZWN0b3IyfSBmcm9tICcuLi9tYXRoL2N1YmlzbXZlY3RvcjInO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3J9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcclxuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XHJcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xyXG5pbXBvcnQgQ3ViaXNtVmVjdG9yMiA9IGN1YmlzbXZlY3RvcjIuQ3ViaXNtVmVjdG9yMjtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8qKlxyXG4gICAgICog54mp55CG5ryU566X44Gu6YGp55So5YWI44Gu56iu6aGeXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBlbnVtIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlXHJcbiAgICB7XHJcbiAgICAgICAgQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGVfUGFyYW1ldGVyLCAgLy8g44OR44Op44Oh44O844K/44Gr5a++44GX44Gm6YGp55SoXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDniannkIbmvJTnrpfjga7lhaXlipvjga7nqK7poZ5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGVudW0gQ3ViaXNtUGh5c2ljc1NvdXJjZVxyXG4gICAge1xyXG4gICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2VfWCwgICAgICAgICAgLy8gWOi7uOOBruS9jee9ruOBi+OCiVxyXG4gICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2VfWSwgICAgICAgICAgLy8gWei7uOOBruS9jee9ruOBi+OCiVxyXG4gICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2VfQW5nbGUsICAgICAgLy8g6KeS5bqm44GL44KJXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAYnJpZWYg54mp55CG5ryU566X44Gn5L2/55So44GZ44KL5aSW6YOo44Gu5YqbXHJcbiAgICAgKiBcclxuICAgICAqIOeJqeeQhua8lOeul+OBp+S9v+eUqOOBmeOCi+WklumDqOOBruWKm+OAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgUGh5c2ljc0pzb25FZmZlY3RpdmVGb3JjZXNcclxuICAgIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICAgICAgICAgICAgdGhpcy53aW5kID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdyYXZpdHk6ICAgIEN1YmlzbVZlY3RvcjI7ICAgICAgICAgIC8vLzwg6YeN5YqbXHJcbiAgICAgICAgd2luZDogICAgICAgQ3ViaXNtVmVjdG9yMjsgICAgICAgICAgLy8vPCDpoqhcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeJqeeQhua8lOeul+OBruODkeODqeODoeODvOOCv+aDheWgsVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlclxyXG4gICAge1xyXG4gICAgICAgIGlkOiBDdWJpc21JZEhhbmRsZTsgICAvLyDjg5Hjg6njg6Hjg7zjgr9cclxuICAgICAgICB0YXJnZXRUeXBlOiBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZTsgICAgLy8g6YGp55So5YWI44Gu56iu6aGeXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDniannkIbmvJTnrpfjga7mraPopo/ljJbmg4XloLFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uXHJcbiAgICB7XHJcbiAgICAgICAgbWluaW11bTogbnVtYmVyOyAgICAvLyDmnIDlpKflgKRcclxuICAgICAgICBtYXhpbXVtOiBudW1iZXI7ICAgIC8vIOacgOWwj+WApFxyXG4gICAgICAgIGRlZmFsdXQ6IG51bWJlcjsgICAgLy8g44OH44OV44Kp44Or44OI5YCkXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDniannkIbmvJTnrpfjga7mvJTnrpflp5Tkvb/nlKjjgZnjgovniannkIbngrnjga7mg4XloLFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICAgICAgICAgICAgdGhpcy5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICAgICAgICAgICAgdGhpcy5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xyXG4gICAgICAgICAgICB0aGlzLmZvcmNlID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMudmVsb2NpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluaXRpYWxQb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgLy8g5Yid5pyf5L2N572uXHJcbiAgICAgICAgbW9iaWxpdHk6IG51bWJlcjsgICAgICAgICAgICAgICAvLyDli5XjgY3jgoTjgZnjgZVcclxuICAgICAgICBkZWxheTogbnVtYmVyOyAgICAgICAgICAgICAgICAgIC8vIOmBheOCjFxyXG4gICAgICAgIGFjY2VsZXJhdGlvbjogbnVtYmVyOyAgICAgICAgICAgLy8g5Yqg6YCf5bqmXHJcbiAgICAgICAgcmFkaXVzOiBudW1iZXI7ICAgICAgICAgICAgICAgICAvLyDot53pm6JcclxuICAgICAgICBwb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgICAgICAgIC8vIOePvuWcqOOBruS9jee9rlxyXG4gICAgICAgIGxhc3RQb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgICAgLy8g5pyA5b6M44Gu5L2N572uXHJcbiAgICAgICAgbGFzdEdyYXZpdHk6IEN1YmlzbVZlY3RvcjI7ICAgICAvLyDmnIDlvozjga7ph43liptcclxuICAgICAgICBmb3JjZTogQ3ViaXNtVmVjdG9yMjsgICAgICAgICAgIC8vIOePvuWcqOOBi+OBi+OBo+OBpuOBhOOCi+WKm1xyXG4gICAgICAgIHZlbG9jaXR5OiBDdWJpc21WZWN0b3IyOyAgICAgICAgLy8g54++5Zyo44Gu6YCf5bqmXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDniannkIbmvJTnrpfjga7niannkIbngrnjga7nrqHnkIZcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NTdWJSaWdcclxuICAgIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLm5vcm1hbGl6YXRpb25Qb3NpdGlvbiA9IG5ldyBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLm5vcm1hbGl6YXRpb25BbmdsZSA9IG5ldyBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnB1dENvdW50OiBudW1iZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5YWl5Yqb44Gu5YCL5pWwXHJcbiAgICAgICAgb3V0cHV0Q291bnQ6IG51bWJlcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWHuuWKm+OBruWAi+aVsFxyXG4gICAgICAgIHBhcnRpY2xlQ291bnQ6IG51bWJlcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDniannkIbngrnjga7lgIvmlbBcclxuICAgICAgICBiYXNlSW5wdXRJbmRleDogbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5YWl5Yqb44Gu5pyA5Yid44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgYmFzZU91dHB1dEluZGV4OiBudW1iZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWHuuWKm+OBruacgOWIneOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgIGJhc2VQYXJ0aWNsZUluZGV4OiBudW1iZXI7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDniannkIbngrnjga7mnIDliJ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICBub3JtYWxpemF0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uOyAgLy8g5q2j6KaP5YyW44GV44KM44Gf5L2N572uXHJcbiAgICAgICAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbjsgICAgIC8vIOato+imj+WMluOBleOCjOOBn+inkuW6plxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5q2j6KaP5YyW44GV44KM44Gf44OR44Op44Oh44O844K/44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0VHJhbnNsYXRpb24gICAgIC8vIOa8lOeul+e1kOaenOOBruenu+WLleWApFxyXG4gICAgICogQHBhcmFtIHRhcmdldEFuZ2xlICAgICAgICAgICAvLyDmvJTnrpfntZDmnpzjga7op5LluqZcclxuICAgICAqIEBwYXJhbSB2YWx1ZSAgICAgICAgICAgICAgICAgLy8g44OR44Op44Oh44O844K/44Gu5YCkXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVyTWluaW11blZhbHVlIC8vIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApFxyXG4gICAgICogQHBhcmFtIHBhcmFtZXRlck1heGltdW1WYWx1ZSAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlpKflgKRcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJEZWZhdWx0VmFsdWUgLy8g44OR44Op44Oh44O844K/44Gu44OH44OV44Kp44Or44OI5YCkXHJcbiAgICAgKiBAcGFyYW0gbm9ybWFsaXphdGlvblBvc2l0aW9uIC8vIOato+imj+WMluOBleOCjOOBn+S9jee9rlxyXG4gICAgICogQHBhcmFtIG5vcm1hbGl6YXRpb25BbmdsZSAgICAvLyDmraPopo/ljJbjgZXjgozjgZ/op5LluqZcclxuICAgICAqIEBwYXJhbSBpc0ludmVydGVkICAgICAgICAgICAgLy8g5YCk44GM5Y+N6Lui44GV44KM44Gm44GE44KL44GL77yfXHJcbiAgICAgKiBAcGFyYW0gd2VpZ2h0ICAgICAgICAgICAgICAgIC8vIOmHjeOBv1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIG5vcm1hbGl6ZWRQaHlzaWNzUGFyYW1ldGVyVmFsdWVHZXR0ZXJcclxuICAgIHtcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIHRhcmdldFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxyXG4gICAgICAgICAgICB0YXJnZXRBbmdsZToge2FuZ2xlOiBudW1iZXJ9LFxyXG4gICAgICAgICAgICB2YWx1ZTogbnVtYmVyLFxyXG4gICAgICAgICAgICBwYXJhbWV0ZXJNaW5pbXVuVmFsdWU6IG51bWJlcixcclxuICAgICAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlOiBudW1iZXIsXHJcbiAgICAgICAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxyXG4gICAgICAgICAgICBub3JtYWxpemF0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxyXG4gICAgICAgICAgICBub3JtYWxpemF0aW9uQW5nbGU6IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxyXG4gICAgICAgICAgICBpc0ludmVydGVkOiBib29sZWFuLFxyXG4gICAgICAgICAgICB3ZWlnaHQ6IG51bWJlclxyXG4gICAgICAgICk6IHZvaWRcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeJqeeQhua8lOeul+OBruWApOOBruWPluW+l+mWouaVsOOBruWuo+iogFxyXG4gICAgICogQHBhcmFtIHRyYW5zbGF0aW9uIOenu+WLleWApFxyXG4gICAgICogQHBhcmFtIHBhcnRpY2xlcyDniannkIbngrnjga7jg6rjgrnjg4hcclxuICAgICAqIEBwYXJhbSBpc0ludmVydGVkIOWApOOBjOWPjeaYoOOBleOCjOOBpuOBhOOCi+OBi1xyXG4gICAgICogQHBhcmFtIHBhcmVudEdyYXZpdHkg6YeN5YqbXHJcbiAgICAgKiBAcmV0dXJuIOWApFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIHBoeXNpY3NWYWx1ZUdldHRlclxyXG4gICAge1xyXG4gICAgICAgIChcclxuICAgICAgICAgICAgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXHJcbiAgICAgICAgICAgIHBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW10sXHJcbiAgICAgICAgICAgIHBhcnRpY2xlSW5kZXg6IG51bWJlcixcclxuICAgICAgICAgICAgaXNJbnZlcnRlZDogYm9vbGVhbixcclxuICAgICAgICAgICAgcGFyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMlxyXG4gICAgICAgICk6IG51bWJlclxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog54mp55CG5ryU566X44Gu44K544Kx44O844Or44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXHJcbiAgICAgKiBAcGFyYW0gdHJhbnNsYXRpb25TY2FsZSDnp7vli5XlgKTjga7jgrnjgrHjg7zjg6tcclxuICAgICAqIEBwYXJhbSBhbmdsZVNjYWxlICAgIOinkuW6puOBruOCueOCseODvOODq1xyXG4gICAgICogQHJldHVybiDjgrnjgrHjg7zjg6vlgKRcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBwaHlzaWNzU2NhbGVHZXR0ZXJcclxuICAgIHtcclxuICAgICAgICAoXHJcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsXHJcbiAgICAgICAgICAgIGFuZ2xlU2NhbGU6IG51bWJlclxyXG4gICAgICAgICk6IG51bWJlcjtcclxuICAgIH0gXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDniannkIbmvJTnrpfjga7lhaXlipvmg4XloLFcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NJbnB1dFxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlID0gbmV3IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc291cmNlOiBDdWJpc21QaHlzaWNzUGFyYW1ldGVyOyAgICAgLy8g5YWl5Yqb5YWD44Gu44OR44Op44Oh44O844K/XHJcbiAgICAgICAgc291cmNlUGFyYW1ldGVySW5kZXg6IG51bWJlcjsgICAgICAgLy8g5YWl5Yqb5YWD44Gu44OR44Op44Oh44O844K/44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgd2VpZ2h0OiBudW1iZXI7ICAgICAgICAgICAgICAgICAgICAgLy8g6YeN44G/XHJcbiAgICAgICAgdHlwZTogbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAgLy8g5YWl5Yqb44Gu56iu6aGeXHJcbiAgICAgICAgcmVmbGVjdDogYm9vbGVhbjsgICAgICAgICAgICAgICAgICAgLy8g5YCk44GM5Y+N6Lui44GV44KM44Gm44GE44KL44GL44Gp44GG44GLXHJcbiAgICAgICAgZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlOiBub3JtYWxpemVkUGh5c2ljc1BhcmFtZXRlclZhbHVlR2V0dGVyOyAgIC8vIOato+imj+WMluOBleOCjOOBn+ODkeODqeODoeODvOOCv+WApOOBruWPluW+l+mWouaVsFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGJyaWVmIOeJqeeQhua8lOeul+OBruWHuuWKm+aDheWgsVxyXG4gICAgICogXHJcbiAgICAgKiDniannkIbmvJTnrpfjga7lh7rlipvmg4XloLHjgIJcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NPdXRwdXRcclxuICAgIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIoKTtcclxuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGlvblNjYWxlID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZXN0aW5hdGlvbjogQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcjsgICAgICAgIC8vLzwg5Ye65Yqb5YWI44Gu44OR44Op44Oh44O844K/XHJcbiAgICAgICAgZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDogbnVtYmVyOyAgICAgICAgICAvLy88IOWHuuWKm+WFiOOBruODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgIHZlcnRleEluZGV4OiBudW1iZXI7ICAgICAgICAgICAgICAgICAgICAgICAgLy8vPCDmjK/jgorlrZDjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICB0cmFuc2xhdGlvblNjYWxlOiBDdWJpc21WZWN0b3IyOyAgICAgICAgICAgIC8vLzwg56e75YuV5YCk44Gu44K544Kx44O844OrXHJcbiAgICAgICAgYW5nbGVTY2FsZTogbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAgICAvLy88IOinkuW6puOBruOCueOCseODvOODq1xyXG4gICAgICAgIHdlaWdodDogbnVtYmVyOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIOmHjeOBv1xyXG4gICAgICAgIHR5cGU6IEN1YmlzbVBoeXNpY3NTb3VyY2U7ICAgICAgICAgICAgICAgICAgLy8vPCDlh7rlipvjga7nqK7poZ5cclxuICAgICAgICByZWZsZWN0OiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLzwg5YCk44GM5Y+N6Lui44GV44KM44Gm44GE44KL44GL44Gp44GG44GLXHJcbiAgICAgICAgdmFsdWVCZWxvd01pbmltdW06IG51bWJlcjsgICAgICAgICAgICAgICAgICAvLy88IOacgOWwj+WApOOCkuS4i+WbnuOBo+OBn+aZguOBruWApFxyXG4gICAgICAgIHZhbHVlRXhjZWVkZWRNYXhpbXVtOiBudW1iZXI7ICAgICAgICAgICAgICAgLy8vPCDmnIDlpKflgKTjgpLjgZPjgYjjgZ/mmYLjga7lgKRcclxuICAgICAgICBnZXRWYWx1ZTogcGh5c2ljc1ZhbHVlR2V0dGVyOyAgICAgICAgICAgICAvLy88IOeJqeeQhua8lOeul+OBruWApOOBruWPluW+l+mWouaVsFxyXG4gICAgICAgIGdldFNjYWxlOiBwaHlzaWNzU2NhbGVHZXR0ZXI7ICAgICAgICAgICAgIC8vLzwg54mp55CG5ryU566X44Gu44K544Kx44O844Or5YCk44Gu5Y+W5b6X6Zai5pWwXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAYnJpZWYg54mp55CG5ryU566X44Gu44OH44O844K/XHJcbiAgICAgKiBcclxuICAgICAqIOeJqeeQhua8lOeul+OBruODh+ODvOOCv+OAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc1JpZ1xyXG4gICAge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NTdWJSaWc+KCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzSW5wdXQ+KCk7XHJcbiAgICAgICAgICAgIHRoaXMub3V0cHV0cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc091dHB1dD4oKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZXMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NQYXJ0aWNsZT4oKTtcclxuICAgICAgICAgICAgdGhpcy5ncmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMud2luZCA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3ViUmlnQ291bnQ6IG51bWJlcjsgICAgICAgICAgICAgICAgICAgIC8vLzwg54mp55CG5ryU566X44Gu54mp55CG54K544Gu5YCL5pWwXHJcbiAgICAgICAgc2V0dGluZ3M6IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzU3ViUmlnPjsgICAgICAgIC8vLzwg54mp55CG5ryU566X44Gu54mp55CG54K544Gu566h55CG44Gu44Oq44K544OIXHJcbiAgICAgICAgaW5wdXRzOiBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc0lucHV0PjsgICAgICAgICAgIC8vLzwg54mp55CG5ryU566X44Gu5YWl5Yqb44Gu44Oq44K544OIXHJcbiAgICAgICAgb3V0cHV0czogY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NPdXRwdXQ+OyAgICAgICAgIC8vLzwg54mp55CG5ryU566X44Gu5Ye65Yqb44Gu44Oq44K544OIXHJcbiAgICAgICAgcGFydGljbGVzOiBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc1BhcnRpY2xlPjsgICAgIC8vLzwg54mp55CG5ryU566X44Gu54mp55CG54K544Gu44Oq44K544OIXHJcbiAgICAgICAgZ3Jhdml0eTogQ3ViaXNtVmVjdG9yMjsgICAgICAgICAgICAgICAgIC8vLzwg6YeN5YqbXHJcbiAgICAgICAgd2luZDogQ3ViaXNtVmVjdG9yMjsgICAgICAgICAgICAgICAgICAgIC8vLzwg6aKoXHJcbiAgICB9O1xyXG59IiwiLypcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21qc29ufSBmcm9tICcuLi91dGlscy9jdWJpc21qc29uJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtdmVjdG9yMn0gZnJvbSAnLi4vbWF0aC9jdWJpc212ZWN0b3IyJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWR9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQgQ3ViaXNtRnJhbWV3b3JrID0gY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yaztcclxuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XHJcbmltcG9ydCBDdWJpc21WZWN0b3IyID0gY3ViaXNtdmVjdG9yMi5DdWJpc21WZWN0b3IyO1xyXG5pbXBvcnQgQ3ViaXNtSnNvbiA9IGN1YmlzbWpzb24uQ3ViaXNtSnNvbjtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8vIEpTT04ga2V5c1xyXG4gICAgY29uc3QgUG9zaXRpb246IHN0cmluZyA9IFwiUG9zaXRpb25cIjtcclxuICAgIGNvbnN0IFg6IHN0cmluZyA9IFwiWFwiO1xyXG4gICAgY29uc3QgWTogc3RyaW5nID0gXCJZXCI7XHJcbiAgICBjb25zdCBBbmdsZTogc3RyaW5nID0gXCJBbmdsZVwiO1xyXG4gICAgY29uc3QgVHlwZTogc3RyaW5nID0gXCJUeXBlXCI7XHJcbiAgICBjb25zdCBJZDogc3RyaW5nID0gXCJJZFwiO1xyXG5cclxuICAgIC8vIE1ldGFcclxuICAgIGNvbnN0IE1ldGE6IHN0cmluZyA9IFwiTWV0YVwiO1xyXG4gICAgY29uc3QgRWZmZWN0aXZlRm9yY2VzOiBzdHJpbmcgPSBcIkVmZmVjdGl2ZUZvcmNlc1wiO1xyXG4gICAgY29uc3QgVG90YWxJbnB1dENvdW50OiBzdHJpbmcgPSBcIlRvdGFsSW5wdXRDb3VudFwiO1xyXG4gICAgY29uc3QgVG90YWxPdXRwdXRDb3VudDogc3RyaW5nID0gXCJUb3RhbE91dHB1dENvdW50XCI7XHJcbiAgICBjb25zdCBQaHlzaWNzU2V0dGluZ0NvdW50OiBzdHJpbmcgPSBcIlBoeXNpY3NTZXR0aW5nQ291bnRcIjtcclxuICAgIGNvbnN0IEdyYXZpdHk6IHN0cmluZyA9IFwiR3Jhdml0eVwiO1xyXG4gICAgY29uc3QgV2luZDogc3RyaW5nID0gXCJXaW5kXCI7XHJcbiAgICBjb25zdCBWZXJ0ZXhDb3VudDogc3RyaW5nID0gXCJWZXJ0ZXhDb3VudFwiO1xyXG5cclxuICAgIC8vIFBoeXNpY3NTZXR0aW5nc1xyXG4gICAgY29uc3QgUGh5c2ljc1NldHRpbmdzOiBzdHJpbmcgPSBcIlBoeXNpY3NTZXR0aW5nc1wiO1xyXG4gICAgY29uc3QgTm9ybWFsaXphdGlvbjogc3RyaW5nID0gXCJOb3JtYWxpemF0aW9uXCI7XHJcbiAgICBjb25zdCBNaW5pbXVtOiBzdHJpbmcgPSBcIk1pbmltdW1cIjtcclxuICAgIGNvbnN0IE1heGltdW06IHN0cmluZyA9IFwiTWF4aW11bVwiO1xyXG4gICAgY29uc3QgRGVmYXVsdDogc3RyaW5nID0gXCJEZWZhdWx0XCI7XHJcbiAgICBjb25zdCBSZWZsZWN0OiBzdHJpbmcgPSBcIlJlZmxlY3RcIjtcclxuICAgIGNvbnN0IFdlaWdodDogc3RyaW5nID0gXCJXZWlnaHRcIjtcclxuXHJcbiAgICAvLyBJbnB1dFxyXG4gICAgY29uc3QgSW5wdXQ6IHN0cmluZyA9IFwiSW5wdXRcIjtcclxuICAgIGNvbnN0IFNvdXJjZTogc3RyaW5nID0gXCJTb3VyY2VcIjtcclxuXHJcbiAgICAvLyBPdXRwdXRcclxuICAgIGNvbnN0IE91dHB1dDogc3RyaW5nID0gXCJPdXRwdXRcIjtcclxuICAgIGNvbnN0IFNjYWxlOiBzdHJpbmcgPSBcIlNjYWxlXCI7XHJcbiAgICBjb25zdCBWZXJ0ZXhJbmRleDogc3RyaW5nID0gXCJWZXJ0ZXhJbmRleFwiO1xyXG4gICAgY29uc3QgRGVzdGluYXRpb246IHN0cmluZyA9IFwiRGVzdGluYXRpb25cIjtcclxuXHJcbiAgICAvLyBQYXJ0aWNsZVxyXG4gICAgY29uc3QgVmVydGljZXM6IHN0cmluZyA9IFwiVmVydGljZXNcIjtcclxuICAgIGNvbnN0IE1vYmlsaXR5OiBzdHJpbmcgPSBcIk1vYmlsaXR5XCI7XHJcbiAgICBjb25zdCBEZWxheTogc3RyaW5nID0gXCJEZWxheVwiO1xyXG4gICAgY29uc3QgUmFkaXVzOiBzdHJpbmcgPSBcIlJhZGl1c1wiO1xyXG4gICAgY29uc3QgQWNjZWxlcmF0aW9uOiBzdHJpbmcgPSBcIkFjY2VsZXJhdGlvblwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogcGh5c2ljczMuanNvbuOBruOCs+ODs+ODhuODiuOAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc0pzb25cclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKiBAcGFyYW0gYnVmZmVyIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcclxuICAgICAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDdWJpc21Kc29uLmRlbGV0ZSh0aGlzLl9qc29uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOmHjeWKm+OBruWPluW+l1xyXG4gICAgICAgICAqIEByZXR1cm4g6YeN5YqbXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldEdyYXZpdHkoKTogQ3ViaXNtVmVjdG9yMlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xyXG4gICAgICAgICAgICByZXQueCA9IHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKE1ldGEpLmdldE1hcCgpLmdldFZhbHVlKEVmZmVjdGl2ZUZvcmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoR3Jhdml0eSkuZ2V0TWFwKCkuZ2V0VmFsdWUoWCkudG9GbG9hdCgpO1xyXG4gICAgICAgICAgICByZXQueSA9IHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKE1ldGEpLmdldE1hcCgpLmdldFZhbHVlKEVmZmVjdGl2ZUZvcmNlcykuZ2V0TWFwKCkuZ2V0VmFsdWUoR3Jhdml0eSkuZ2V0TWFwKCkuZ2V0VmFsdWUoWSkudG9GbG9hdCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6aKo44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDpoqhcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0V2luZCgpOiBDdWJpc21WZWN0b3IyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XHJcbiAgICAgICAgICAgIHJldC54ID0gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoTWV0YSkuZ2V0TWFwKCkuZ2V0VmFsdWUoRWZmZWN0aXZlRm9yY2VzKS5nZXRNYXAoKS5nZXRWYWx1ZShXaW5kKS5nZXRNYXAoKS5nZXRWYWx1ZShYKS50b0Zsb2F0KCk7XHJcbiAgICAgICAgICAgIHJldC55ID0gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoTWV0YSkuZ2V0TWFwKCkuZ2V0VmFsdWUoRWZmZWN0aXZlRm9yY2VzKS5nZXRNYXAoKS5nZXRWYWx1ZShXaW5kKS5nZXRNYXAoKS5nZXRWYWx1ZShZKS50b0Zsb2F0KCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDniannkIblupfjga7nrqHnkIbjga7lgIvmlbDjga7lj5blvpdcclxuICAgICAgICAgKiBAcmV0dXJuIOeJqeeQhuW6l+OBrueuoeeQhuOBruWAi+aVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRTdWJSaWdDb3VudCgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShNZXRhKS5nZXRNYXAoKS5nZXRWYWx1ZShQaHlzaWNzU2V0dGluZ0NvdW50KS50b0ludCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlhaXlipvjga7nt4/lkIjoqIjjga7lj5blvpdcclxuICAgICAgICAgKiBAcmV0dXJuIOWFpeWKm+OBrue3j+WQiOioiFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRUb3RhbElucHV0Q291bnQoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoTWV0YSkuZ2V0TWFwKCkuZ2V0VmFsdWUoVG90YWxJbnB1dENvdW50KS50b0ludCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Ye65Yqb44Gu57eP5ZCI6KiI44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDlh7rlipvjga7nt4/lkIjoqIhcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0VG90YWxPdXRwdXRDb3VudCgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShNZXRhKS5nZXRNYXAoKS5nZXRWYWx1ZShUb3RhbE91dHB1dENvdW50KS50b0ludCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog54mp55CG54K544Gu5YCL5pWw44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHJldHVybiDniannkIbngrnjga7lgIvmlbBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0VmVydGV4Q291bnQoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoTWV0YSkuZ2V0TWFwKCkuZ2V0VmFsdWUoVmVydGV4Q291bnQpLnRvSW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOato+imj+WMluOBleOCjOOBn+S9jee9ruOBruacgOWwj+WApOOBruWPluW+l1xyXG4gICAgICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5bCP5YCkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE5vcm1hbGl6YXRpb25Qb3NpdGlvbk1pbmltdW1WYWx1ZShwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShQaHlzaWNzU2V0dGluZ3MpLmdldFZlY3RvcigpLmF0KHBoeXNpY3NTZXR0aW5nSW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKE5vcm1hbGl6YXRpb24pLmdldE1hcCgpLmdldFZhbHVlKFBvc2l0aW9uKS5nZXRNYXAoKS5nZXRWYWx1ZShNaW5pbXVtKS50b0Zsb2F0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+S9jee9ruOBruacgOWkp+WApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uUG9zaXRpb25NYXhpbXVtVmFsdWUocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoUGh5c2ljc1NldHRpbmdzKS5nZXRWZWN0b3IoKS5hdChwaHlzaWNzU2V0dGluZ0luZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShOb3JtYWxpemF0aW9uKS5nZXRNYXAoKS5nZXRWYWx1ZShQb3NpdGlvbikuZ2V0TWFwKCkuZ2V0VmFsdWUoTWF4aW11bSkudG9GbG9hdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu44OH44OV44Kp44Or44OI5YCk44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7jg4fjg5Xjgqnjg6vjg4jlgKRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uRGVmYXVsdFZhbHVlKHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKFBoeXNpY3NTZXR0aW5ncykuZ2V0VmVjdG9yKCkuYXQocGh5c2ljc1NldHRpbmdJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoTm9ybWFsaXphdGlvbikuZ2V0TWFwKCkuZ2V0VmFsdWUoUG9zaXRpb24pLmdldE1hcCgpLmdldFZhbHVlKERlZmF1bHQpLnRvRmxvYXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOato+imj+WMluOBleOCjOOBn+inkuW6puOBruacgOWwj+WApOOBruWPluW+l1xyXG4gICAgICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5bCP5YCkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE5vcm1hbGl6YXRpb25BbmdsZU1pbmltdW1WYWx1ZShwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShQaHlzaWNzU2V0dGluZ3MpLmdldFZlY3RvcigpLmF0KHBoeXNpY3NTZXR0aW5nSW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKE5vcm1hbGl6YXRpb24pLmdldE1hcCgpLmdldFZhbHVlKEFuZ2xlKS5nZXRNYXAoKS5nZXRWYWx1ZShNaW5pbXVtKS50b0Zsb2F0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlpKflgKTjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleFxyXG4gICAgICAgICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5aSn5YCkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE5vcm1hbGl6YXRpb25BbmdsZU1heGltdW1WYWx1ZShwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShQaHlzaWNzU2V0dGluZ3MpLmdldFZlY3RvcigpLmF0KHBoeXNpY3NTZXR0aW5nSW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKE5vcm1hbGl6YXRpb24pLmdldE1hcCgpLmdldFZhbHVlKEFuZ2xlKS5nZXRNYXAoKS5nZXRWYWx1ZShNYXhpbXVtKS50b0Zsb2F0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7jg4fjg5Xjgqnjg6vjg4jlgKTjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOato+imj+WMluOBleOCjOOBn+inkuW6puOBruODh+ODleOCqeODq+ODiOWApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uQW5nbGVEZWZhdWx0VmFsdWUocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoUGh5c2ljc1NldHRpbmdzKS5nZXRWZWN0b3IoKS5hdChwaHlzaWNzU2V0dGluZ0luZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShOb3JtYWxpemF0aW9uKS5nZXRNYXAoKS5nZXRWYWx1ZShBbmdsZSkuZ2V0TWFwKCkuZ2V0VmFsdWUoRGVmYXVsdCkudG9GbG9hdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5YWl5Yqb44Gu5YCL5pWw44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiDlhaXlipvjga7lgIvmlbBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0SW5wdXRDb3VudChwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShQaHlzaWNzU2V0dGluZ3MpLmdldFZlY3RvcigpLmF0KHBoeXNpY3NTZXR0aW5nSW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKElucHV0KS5nZXRWZWN0b3IoKS5nZXRTaXplKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlhaXlipvjga7ph43jgb/jga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcGFyYW0gaW5wdXRJbmRleCDlhaXlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOWFpeWKm+OBrumHjeOBv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRJbnB1dFdlaWdodChwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsIGlucHV0SW5kZXg6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKFBoeXNpY3NTZXR0aW5ncykuZ2V0VmVjdG9yKCkuYXQocGh5c2ljc1NldHRpbmdJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoSW5wdXQpLmdldFZlY3RvcigpLmF0KGlucHV0SW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKFdlaWdodCkudG9GbG9hdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5YWl5Yqb44Gu5Y+N6Lui44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiDlhaXlipvjga7lj43ou6JcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0SW5wdXRSZWZsZWN0KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlciwgaW5wdXRJbmRleDogbnVtYmVyKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKFBoeXNpY3NTZXR0aW5ncykuZ2V0VmVjdG9yKCkuYXQocGh5c2ljc1NldHRpbmdJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoSW5wdXQpLmdldFZlY3RvcigpLmF0KGlucHV0SW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKFJlZmxlY3QpLnRvQm9vbGVhbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5YWl5Yqb44Gu56iu6aGe44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiDlhaXlipvjga7nqK7poZ5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0SW5wdXRUeXBlKHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlciwgaW5wdXRJbmRleDogbnVtYmVyKTogc3RyaW5nXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoUGh5c2ljc1NldHRpbmdzKS5nZXRWZWN0b3IoKS5hdChwaHlzaWNzU2V0dGluZ0luZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShJbnB1dCkuZ2V0VmVjdG9yKCkuYXQoaW5wdXRJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoVHlwZSkuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlhaXlipvlhYPjga5JROOBruWPluW+l1xyXG4gICAgICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEBwYXJhbSBpbnB1dEluZGV4IOWFpeWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g5YWl5Yqb5YWD44GuSURcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0SW5wdXRTb3VyY2VJZChwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsIGlucHV0SW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKFBoeXNpY3NTZXR0aW5ncykuZ2V0VmVjdG9yKCkuYXQocGh5c2ljc1NldHRpbmdJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoSW5wdXQpLmdldFZlY3RvcigpLmF0KGlucHV0SW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKFNvdXJjZSkuZ2V0TWFwKCkuZ2V0VmFsdWUoSWQpLmdldFJhd1N0cmluZygpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWHuuWKm+OBruWAi+aVsOOBruWPluW+l1xyXG4gICAgICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g5Ye65Yqb44Gu5YCL5pWwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE91dHB1dENvdW50KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKFBoeXNpY3NTZXR0aW5ncykuZ2V0VmVjdG9yKCkuYXQocGh5c2ljc1NldHRpbmdJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoT3V0cHV0KS5nZXRWZWN0b3IoKS5nZXRTaXplKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlh7rlipvjga7niannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcGFyYW0gb3V0cHV0SW5kZXgg5Ye65Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiDlh7rlipvjga7niannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0T3V0cHV0VmVydGV4SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLCBvdXRwdXRJbmRleDogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoUGh5c2ljc1NldHRpbmdzKS5nZXRWZWN0b3IoKS5hdChwaHlzaWNzU2V0dGluZ0luZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShPdXRwdXQpLmdldFZlY3RvcigpLmF0KG91dHB1dEluZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShWZXJ0ZXhJbmRleCkudG9JbnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWHuuWKm+OBruinkuW6puOBruOCueOCseODvOODq+OCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOWHuuWKm+OBruinkuW6puOBruOCueOCseODvOODq1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRPdXRwdXRBbmdsZVNjYWxlKHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlciwgb3V0cHV0SW5kZXg6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKFBoeXNpY3NTZXR0aW5ncykuZ2V0VmVjdG9yKCkuYXQocGh5c2ljc1NldHRpbmdJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoT3V0cHV0KS5nZXRWZWN0b3IoKS5hdChvdXRwdXRJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoU2NhbGUpLnRvRmxvYXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWHuuWKm+OBrumHjeOBv+OBruWPluW+l1xyXG4gICAgICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOWHuuWKm+OBrumHjeOBv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRPdXRwdXRXZWlnaHQocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLCBvdXRwdXRJbmRleDogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoUGh5c2ljc1NldHRpbmdzKS5nZXRWZWN0b3IoKS5hdChwaHlzaWNzU2V0dGluZ0luZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShPdXRwdXQpLmdldFZlY3RvcigpLmF0KG91dHB1dEluZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShXZWlnaHQpLnRvRmxvYXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWHuuWKm+WFiOOBrklE44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHBhcmFtIG91dHB1dEluZGV444CA5Ye65Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiDlh7rlipvlhYjjga5JRFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRPdXRwdXREZXN0aW5hdGlvbklkKHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlciwgb3V0cHV0SW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKFBoeXNpY3NTZXR0aW5ncykuZ2V0VmVjdG9yKCkuYXQocGh5c2ljc1NldHRpbmdJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoT3V0cHV0KS5nZXRWZWN0b3IoKS5hdChvdXRwdXRJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoRGVzdGluYXRpb24pLmdldE1hcCgpLmdldFZhbHVlKElkKS5nZXRSYXdTdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlh7rlipvjga7nqK7poZ7jga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcGFyYW0gb3V0cHV0SW5kZXgg5Ye65Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiDlh7rlipvjga7nqK7poZ5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0T3V0cHV0VHlwZShwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsIG91dHB1dEluZGV4OiBudW1iZXIpOiBzdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShQaHlzaWNzU2V0dGluZ3MpLmdldFZlY3RvcigpLmF0KHBoeXNpY3NTZXR0aW5nSW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKE91dHB1dCkuZ2V0VmVjdG9yKCkuYXQob3V0cHV0SW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKFR5cGUpLmdldFJhd1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Ye65Yqb44Gu5Y+N6Lui44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g5Ye65Yqb44Gu5Y+N6LuiXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE91dHB1dFJlZmxlY3QocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLCBvdXRwdXRJbmRleDogbnVtYmVyKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKFBoeXNpY3NTZXR0aW5ncykuZ2V0VmVjdG9yKCkuYXQocGh5c2ljc1NldHRpbmdJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoT3V0cHV0KS5nZXRWZWN0b3IoKS5hdChvdXRwdXRJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoUmVmbGVjdCkudG9Cb29sZWFuKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDniannkIbngrnjga7lgIvmlbDjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfnlLfoqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruWAi+aVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRQYXJ0aWNsZUNvdW50KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKFBoeXNpY3NTZXR0aW5ncykuZ2V0VmVjdG9yKCkuYXQocGh5c2ljc1NldHRpbmdJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoVmVydGljZXMpLmdldFZlY3RvcigpLmdldFNpemUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeJqeeQhueCueOBruWLleOBjeOChOOBmeOBleOBruWPluW+l1xyXG4gICAgICAgICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEBwYXJhbSB2ZXJ0ZXhJbmRleCDniannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruWLleOBjeOChOOBmeOBlVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRQYXJ0aWNsZU1vYmlsaXR5KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlciwgdmVydGV4SW5kZXg6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKFBoeXNpY3NTZXR0aW5ncykuZ2V0VmVjdG9yKCkuYXQocGh5c2ljc1NldHRpbmdJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoVmVydGljZXMpLmdldFZlY3RvcigpLmF0KHZlcnRleEluZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShNb2JpbGl0eSkudG9GbG9hdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog54mp55CG54K544Gu6YGF44KM44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHBhcmFtIHZlcnRleEluZGV4IOeJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g54mp55CG54K544Gu6YGF44KMXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFBhcnRpY2xlRGVsYXkocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLCB2ZXJ0ZXhJbmRleDogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoUGh5c2ljc1NldHRpbmdzKS5nZXRWZWN0b3IoKS5hdChwaHlzaWNzU2V0dGluZ0luZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShWZXJ0aWNlcykuZ2V0VmVjdG9yKCkuYXQodmVydGV4SW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKERlbGF5KS50b0Zsb2F0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDniannkIbngrnjga7liqDpgJ/luqbjga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrppcclxuICAgICAgICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHJldHVybiDniannkIbngrnjga7liqDpgJ/luqZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0UGFydGljbGVBY2NlbGVyYXRpb24ocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLCB2ZXJ0ZXhJbmRleDogbnVtYmVyKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvbi5nZXRSb290KCkuZ2V0TWFwKCkuZ2V0VmFsdWUoUGh5c2ljc1NldHRpbmdzKS5nZXRWZWN0b3IoKS5hdChwaHlzaWNzU2V0dGluZ0luZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShWZXJ0aWNlcykuZ2V0VmVjdG9yKCkuYXQodmVydGV4SW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKEFjY2VsZXJhdGlvbikudG9GbG9hdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog54mp55CG54K544Gu6Led6Zui44Gu5Y+W5b6XXHJcbiAgICAgICAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHBhcmFtIHZlcnRleEluZGV4IOeJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICAgICAqIEByZXR1cm4g54mp55CG54K544Gu6Led6ZuiXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFBhcnRpY2xlUmFkaXVzKHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlciwgdmVydGV4SW5kZXg6IG51bWJlcik6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb24uZ2V0Um9vdCgpLmdldE1hcCgpLmdldFZhbHVlKFBoeXNpY3NTZXR0aW5ncykuZ2V0VmVjdG9yKCkuYXQocGh5c2ljc1NldHRpbmdJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoVmVydGljZXMpLmdldFZlY3RvcigpLmF0KHZlcnRleEluZGV4KS5nZXRNYXAoKS5nZXRWYWx1ZShSYWRpdXMpLnRvSW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDniannkIbngrnjga7kvY3nva7jga7lj5blvpdcclxuICAgICAgICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcGFyYW0gdmVydGV4SW5kZSDniannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruS9jee9rlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRQYXJ0aWNsZVBvc2l0aW9uKHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlciwgdmVydGV4SW5kZXg6IG51bWJlcik6IEN1YmlzbVZlY3RvcjJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcclxuICAgICAgICAgICAgcmV0LnggPSB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShQaHlzaWNzU2V0dGluZ3MpLmdldFZlY3RvcigpLmF0KHBoeXNpY3NTZXR0aW5nSW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKFZlcnRpY2VzKS5nZXRWZWN0b3IoKS5hdCh2ZXJ0ZXhJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoUG9zaXRpb24pLmdldE1hcCgpLmdldFZhbHVlKFgpLnRvRmxvYXQoKTtcclxuICAgICAgICAgICAgcmV0LnkgPSB0aGlzLl9qc29uLmdldFJvb3QoKS5nZXRNYXAoKS5nZXRWYWx1ZShQaHlzaWNzU2V0dGluZ3MpLmdldFZlY3RvcigpLmF0KHBoeXNpY3NTZXR0aW5nSW5kZXgpLmdldE1hcCgpLmdldFZhbHVlKFZlcnRpY2VzKS5nZXRWZWN0b3IoKS5hdCh2ZXJ0ZXhJbmRleCkuZ2V0TWFwKCkuZ2V0VmFsdWUoUG9zaXRpb24pLmdldE1hcCgpLmdldFZhbHVlKFkpLnRvRmxvYXQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF9qc29uOiBDdWJpc21Kc29uOyAgLy8gcGh5c2ljczMuanNvbuODh+ODvOOCv1xyXG4gICAgfVxyXG5cclxufSIsIi8qXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwOi8vbGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0cml4NDR9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0cml4NDQnO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xyXG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcclxuaW1wb3J0IEN1YmlzbU1hdHJpeDQ0ID0gY3ViaXNtbWF0cml4NDQuQ3ViaXNtTWF0cml4NDQ7XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29ya1xyXG57XHJcbiAgICAvKipcclxuICAgICAqIOODouODh+ODq+aPj+eUu+OCkuWHpueQhuOBmeOCi+ODrOODs+ODgOODqVxyXG4gICAgICogXHJcbiAgICAgKiDjgrXjg5bjgq/jg6njgrnjgavnkrDlooPkvp3lrZjjga7mj4/nlLvlkb3ku6TjgpLoqJjov7DjgZnjgovjgIJcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEN1YmlzbVJlbmRlcmVyXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Os44Oz44OA44Op44Gu44Kk44Oz44K544K/44Oz44K544KS55Sf5oiQ44GX44Gm5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHJldHVybiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOiBDdWJpc21SZW5kZXJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLop6PmlL7jgZnjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShyZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZW5kZXJlciA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmVuZGVyZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6ZaL5pS+44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBTdGF0aWNSZWxlYXNlKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vQ3ViaXNtUmVuZGVyZXJfV2ViR0wuZG9TdGF0aWNSZWxlYXNlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcclxuICAgICAgICAgKiDlvJXmlbDjgavmuKHjgZfjgZ/jg6Ljg4fjg6vjgYvjgonjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgavlv4XopoHjgarmg4XloLHjgpLlj5bjgorlh7rjgZnjgZPjgajjgYzjgafjgY3jgotcclxuICAgICAgICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGluaXRpYWxpemUobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fbW9kZWwgPSBtb2RlbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBkcmF3TW9kZWwoKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYodGhpcy5nZXRNb2RlbCgpID09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZG9EcmF3TW9kZWwoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJfjgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgICAgICAgKiDphY3liJfjga/opIfoo73jgZXjgozjgovjga7jgafjgIHlhYPjga7phY3liJfjga/lpJbjgafnoLTmo4TjgZfjgaboia/jgYRcclxuICAgICAgICAgKiBAcGFyYW0gbWF0cml4NDQgTW9kZWwtVmlldy1Qcm9qZWN0aW9uIOihjOWIl1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRNdnBNYXRyaXgobWF0cml4NDQ6IEN1YmlzbU1hdHJpeDQ0KTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fbXZwTWF0cml4NHg0LnNldE1hdHJpeChtYXRyaXg0NC5nZXRBcnJheSgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJfjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJdcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0TXZwTWF0cml4KCk6IEN1YmlzbU1hdHJpeDQ0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbXZwTWF0cml4NHg0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44OH44Or44Gu6Imy44KS44K744OD44OI44GZ44KLXHJcbiAgICAgICAgICog5ZCE6ImyMC4wfjEuMOOBrumWk+OBp+aMh+WumuOBmeOCi++8iDEuMOOBjOaomea6luOBrueKtuaFi++8iVxyXG4gICAgICAgICAqIEBwYXJhbSByZWQg6LWk44OB44Oj44Oz44ON44Or44Gu5YCkXHJcbiAgICAgICAgICogQHBhcmFtIGdyZWVuIOe3keODgeODo+ODs+ODjeODq+OBruWApFxyXG4gICAgICAgICAqIEBwYXJhbSBibHVlIOmdkuODgeODo+ODs+ODjeODq+OBruWApFxyXG4gICAgICAgICAqIEBwYXJhbSBhbHBoYSDOseODgeODo+ODs+ODjeODq+OBruWApFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRNb2RlbENvbG9yKHJlZDogbnVtYmVyLCBncmVlbjogbnVtYmVyLCBibHVlOiBudW1iZXIsIGFscGhhOiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihyZWQgPCAwLjApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJlZCA9IDAuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHJlZCA+IDEuMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmVkID0gMS4wO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihncmVlbiA8IDAuMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZ3JlZW4gPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihncmVlbiA+IDEuMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZ3JlZW4gPSAxLjA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKGJsdWUgPCAwLjApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJsdWUgPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihibHVlID4gMS4wKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBibHVlID0gMS4wO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihhbHBoYSA8IDAuMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYWxwaGEgPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihhbHBoYSA+IDEuMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYWxwaGEgPSAxLjA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsQ29sb3IuUiA9IHJlZDtcclxuICAgICAgICAgICAgdGhpcy5fbW9kZWxDb2xvci5HID0gZ3JlZW47XHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsQ29sb3IuQiA9IGJsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsQ29sb3IuQSA9IGFscGhhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44OH44Or44Gu6Imy44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICog5ZCE6ImyMC4wfjEuMOOBrumWk+OBp+aMh+WumuOBmeOCiygxLjDjgYzmqJnmupbjga7nirbmhYspXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHJldHVybiBSR0JB44Gu44Kr44Op44O85oOF5aCxXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE1vZGVsQ29sb3IoKTogQ3ViaXNtVGV4dHVyZUNvbG9yXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLl9tb2RlbENvbG9yKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDkuZfnrpfmuIjjgb/OseOBruacieWKueODu+eEoeWKueOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAgICAgICAqIOacieWKueOBq+OBmeOCi+OBquOCiXRydWXjgIHnhKHlirnjgavjgZnjgovjgarjgolmYWxzZeOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRJc1ByZW11bHRpcGxpZWRBbHBoYShlbmFibGU6IGJvb2xlYW4pOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9pc1ByZW11bHRpcGxpZWRBbHBoYSA9IGVuYWJsZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOS5l+eul+a4iOOBv86x44Gu5pyJ5Yq544O754Sh5Yq544KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiB0cnVlIOS5l+eul+a4iOOBv+OBrs6x5pyJ5Yq5XHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZSDkuZfnrpfmuIjjgb/jga7OseeEoeWKuVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc1ByZW11bHRpcGxpZWRBbHBoYSgpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNQcmVtdWx0aXBsaWVkQWxwaGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgqvjg6rjg7PjgrDvvIjniYfpnaLmj4/nlLvvvInjga7mnInlirnjg7vnhKHlirnjgpLjgrvjg4Pjg4jjgZnjgovjgIJcclxuICAgICAgICAgKiDmnInlirnjgavjgZnjgovjgarjgol0cnVl44CB54Sh5Yq544Gr44GZ44KL44Gq44KJZmFsc2XjgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0SXNDdWxsaW5nKGN1bGxpbmc6IGJvb2xlYW4pOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9pc0N1bGxpbmcgPSBjdWxsaW5nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kr44Oq44Oz44Kw77yI54mH6Z2i5o+P55S777yJ44Gu5pyJ5Yq544O754Sh5Yq544KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICAgICAgICogQHJldHVybiB0cnVlIOOCq+ODquODs+OCsOacieWKuVxyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2Ug44Kr44Oq44Oz44Kw54Sh5Yq5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzQ3VsbGluZygpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNDdWxsaW5nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OG44Kv44K544OB44Oj44Gu55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/44KS44K744OD44OI44GZ44KLXHJcbiAgICAgICAgICog44OR44Op44Oh44O844K/5YCk44Gu5b2x6Z+/5bqm44Gv44Os44Oz44OA44Op44Gu5a6f6KOF44Gr5L6d5a2Y44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIG4g44OR44Op44Oh44O844K/44Gu5YCkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldEFuaXNvdHJvcHkobjogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fYW5pc29ydG9weSA9IG47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODhuOCr+OCueODgeODo+OBrueVsOaWueaAp+ODleOCo+ODq+OCv+ODquODs+OCsOOBruODkeODqeODoeODvOOCv+OCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4g55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldEFuaXNvdHJvcHkoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5pc29ydG9weTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODrOODs+ODgOODquODs+OCsOOBmeOCi+ODouODh+ODq+OCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4g44Os44Oz44OA44Oq44Oz44Kw44GZ44KL44Oi44OH44OrXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE1vZGVsKCk6IEN1YmlzbU1vZGVsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5faXNDdWxsaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaXNvcnRvcHkgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbW9kZWxDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOWNmOS9jeihjOWIl+OBq+WIneacn+WMllxyXG4gICAgICAgICAgICB0aGlzLl9tdnBNYXRyaXg0eDQgPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcclxuICAgICAgICAgICAgdGhpcy5fbXZwTWF0cml4NHg0LmxvYWRJZGVudGl0eSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oi44OH44Or5o+P55S744Gu5a6f6KOFXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFic3RyYWN0IGRvRHJhd01vZGVsKCk6IHZvaWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiO+8iOOCouODvOODiOODoeODg+OCt+ODpe+8ieOCkuaPj+eUu+OBmeOCi1xyXG4gICAgICAgICAqIOODneODquOCtOODs+ODoeODg+OCt+ODpeOBqOODhuOCr+OCueODgeODo+eVquWPt+OCkuOCu+ODg+ODiOOBp+a4oeOBmeOAglxyXG4gICAgICAgICAqIEBwYXJhbSB0ZXh0dXJlTm8g5o+P55S744GZ44KL44OG44Kv44K544OB44Oj55Wq5Y+3XHJcbiAgICAgICAgICogQHBhcmFtIGluZGV4Q291bnQg5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Kk44Oz44OH44OD44Kv44K55YCkXHJcbiAgICAgICAgICogQHBhcmFtIHZlcnRleENvdW50IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCueaVsFxyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpemggueCueOBruOCpOODs+ODh+ODg+OCr+OCuemFjeWIl1xyXG4gICAgICAgICAqIEBwYXJhbSB2ZXJ0ZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnphY3liJdcclxuICAgICAgICAgKiBAcGFyYW0gdXZBcnJheSB1dumFjeWIl1xyXG4gICAgICAgICAqIEBwYXJhbSBvcGFjaXR5IOS4jemAj+aYjuW6plxyXG4gICAgICAgICAqIEBwYXJhbSBjb2xvckJsZW5kTW9kZSDjgqvjg6njg7zjg5bjg6zjg7Pjg4fjgqPjg7PjgrDjga7jgr/jgqTjg5dcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYWJzdHJhY3QgZHJhd01lc2godGV4dHVyZU5vOiBudW1iZXIsIGluZGV4Q291bnQ6IG51bWJlciwgdmVydGV4Q291bnQ6IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhBcnJheTogVWludDE2QXJyYXksIHZlcnRleEFycmF5OiBGbG9hdDMyQXJyYXksIHV2QXJyYXk6IEZsb2F0MzJBcnJheSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogbnVtYmVyLCBjb2xvckJsZW5kTW9kZTogQ3ViaXNtQmxlbmRNb2RlKTogdm9pZDtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIF9tdnBNYXRyaXg0eDQ6IEN1YmlzbU1hdHJpeDQ0OyAgICAgICAgICAgICAgICAgIC8vIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJdcclxuICAgICAgICBwcm90ZWN0ZWQgX21vZGVsQ29sb3I6IEN1YmlzbVRleHR1cmVDb2xvcjsgLy8g44Oi44OH44Or6Ieq5L2T44Gu44Kr44Op44O877yIUkdCQe+8iVxyXG4gICAgICAgIHByb3RlY3RlZCBfaXNDdWxsaW5nOiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDjgqvjg6rjg7PjgrDjgYzmnInlirnjgarjgol0cnVlXHJcbiAgICAgICAgcHJvdGVjdGVkIF9pc1ByZW11bHRpcGxpZWRBbHBoYTogYm9vbGVhbjsgICAgICAgICAgICAgICAgIC8vIOS5l+eul+a4iOOBv86x44Gq44KJdHJ1ZVxyXG4gICAgICAgIHByb3RlY3RlZCBfYW5pc29ydG9weTogYW55OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjga7nlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjga7jg5Hjg6njg6Hjg7zjgr9cclxuICAgICAgICBwcm90ZWN0ZWQgX21vZGVsOiBDdWJpc21Nb2RlbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Os44Oz44OA44Oq44Oz44Kw5a++6LGh44Gu44Oi44OH44OrXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGVudW0gQ3ViaXNtQmxlbmRNb2RlXHJcbiAgICB7XHJcbiAgICAgICAgQ3ViaXNtQmxlbmRNb2RlX05vcm1hbCA9IDAsICAgICAgICAgLy8g6YCa5bi4XHJcbiAgICAgICAgQ3ViaXNtQmxlbmRNb2RlX0FkZGl0aXZlID0gMSwgICAgICAgLy8g5Yqg566XXHJcbiAgICAgICAgQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlID0gMiwgLy8g5LmX566XXHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OG44Kv44K544OB44Oj44Gu6Imy44KSUkdCQeOBp+aJseOBhuOBn+OCgeOBruOCr+ODqeOCuVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtVGV4dHVyZUNvbG9yXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5SID0gMS4wO1xyXG4gICAgICAgICAgICB0aGlzLkcgPSAxLjA7XHJcbiAgICAgICAgICAgIHRoaXMuQiA9IDEuMDtcclxuICAgICAgICAgICAgdGhpcy5BID0gMS4wO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgUjogbnVtYmVyOyAgLy8g6LWk44OB44Oj44Oz44ON44OrXHJcbiAgICAgICAgRzogbnVtYmVyOyAgLy8g57eR44OB44Oj44Oz44ON44OrXHJcbiAgICAgICAgQjogbnVtYmVyOyAgLy8g6Z2S44OB44Oj44Oz44ON44OrXHJcbiAgICAgICAgQTogbnVtYmVyOyAgLy8gzrHjg4Hjg6Pjg7Pjg43jg6tcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwOi8vbGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrfSBmcm9tIFwiLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXJlY3R9IGZyb20gXCIuLi90eXBlL2NzbXJlY3RmXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbXJlbmRlcmVyfSBmcm9tIFwiLi9jdWJpc21yZW5kZXJlclwiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbH0gZnJvbSBcIi4uL21vZGVsL2N1YmlzbW1vZGVsXCI7XHJcbmltcG9ydCB7TGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YnNpbW1hdHJpeDQ0fSBmcm9tIFwiLi4vbWF0aC9jdWJpc21tYXRyaXg0NFwiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21tYXB9IGZyb20gXCIuLi90eXBlL2NzbW1hcFwiO1xyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3J9IGZyb20gXCIuLi90eXBlL2NzbXZlY3RvclwiO1xyXG5pbXBvcnQge0N1YmlzbUxvZ0Vycm9yfSBmcm9tIFwiLi4vdXRpbHMvY3ViaXNtZGVidWdcIjtcclxuaW1wb3J0IENvbnN0YW50ID0gY3ViaXNtZnJhbWV3b3JrLkNvbnN0YW50O1xyXG5pbXBvcnQgQ3ViaXNtTWF0cml4NDQgPSBjdWJzaW1tYXRyaXg0NC5DdWJpc21NYXRyaXg0NDtcclxuaW1wb3J0IGNzbVJlY3QgPSBjc21yZWN0LmNzbVJlY3Q7XHJcbmltcG9ydCBjc21NYXAgPSBjc21tYXAuY3NtTWFwO1xyXG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcclxuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XHJcbmltcG9ydCBDdWJpc21SZW5kZXJlciA9IGN1YmlzbXJlbmRlcmVyLkN1YmlzbVJlbmRlcmVyO1xyXG5pbXBvcnQgQ3ViaXNtQmxlbmRNb2RlID0gY3ViaXNtcmVuZGVyZXIuQ3ViaXNtQmxlbmRNb2RlO1xyXG5pbXBvcnQgQ3ViaXNtVGV4dHVyZUNvbG9yID0gY3ViaXNtcmVuZGVyZXIuQ3ViaXNtVGV4dHVyZUNvbG9yO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmtcclxue1xyXG4gICAgY29uc3QgQ29sb3JDaGFubmVsQ291bnQ6IG51bWJlciA9IDQ7ICAgIC8vIOWun+mok+aZguOBqzHjg4Hjg6Pjg7Pjg43jg6vjga7loLTlkIjjga8x44CBUkdC44Gg44GR44Gu5aC05ZCI44GvM+OAgeOCouODq+ODleOCoeOCguWQq+OCgeOCi+WgtOWQiOOBrzRcclxuXHJcbiAgICBjb25zdCBzaGFkZXJDb3VudDogbnVtYmVyID0gNzsgLy8g44K344Kn44O844OA44O844Gu5pWwID0g44Oe44K544Kv55Sf5oiQ55SoICsgKOmAmuW4uOeUqCArIOWKoOeulyArIOS5l+eulykgKiAo44Oe44K544Kv54Sh44Gu5LmX566X5riI44Ki44Or44OV44Kh5a++5b+c54mIICsg44Oe44K544Kv5pyJ44Gu5LmX566X5riI44Ki44Or44OV44Kh5a++5b+c54mIKVxyXG4gICAgbGV0IHNfaW5zdGFuY2U6IEN1YmlzbVNoYWRlcl9XZWJHTDtcclxuICAgIGxldCBzX3ZpZXdwb3J0OiBudW1iZXJbXTtcclxuICAgIGxldCBzX2ZibzogV2ViR0xGcmFtZWJ1ZmZlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruWHpueQhuOCkuWun+ihjOOBmeOCi+OCr+ODqeOCuVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kr44Op44O844OB44Oj44Oz44ON44Or77yIUkdCQe+8ieOBruODleODqeOCsOOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBjaGFubmVsTm8g44Kr44Op44O844OB44Oj44Oz44ON44Or77yIUkdCQe+8ieOBrueVquWPt++8iDA6UiwgMTpHLCAyOkIsIDM6Qe+8iVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRDaGFubmVsRmxhZ0FzQ29sb3IoY2hhbm5lbE5vOiBudW1iZXIpOiBDdWJpc21UZXh0dXJlQ29sb3JcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGFubmVsQ29sb3JzLmF0KGNoYW5uZWxObyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4bjg7Pjg53jg6njg6rjga7jg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjga7jgqLjg4njg6zjgrnjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBGcmFtZUJ1ZmZlck9iamVjdOOBjOWtmOWcqOOBl+OBquOBhOWgtOWQiOOAgeaWsOOBl+OBj+eUn+aIkOOBmeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4g44Os44Oz44OA44O844OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE1hc2tSZW5kZXJUZXh0dXJlKCk6IFdlYkdMRnJhbWVidWZmZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCByZXQ6IFdlYkdMRnJhbWVidWZmZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgLy8g44OG44Oz44Od44Op44Oq44GuUmVuZGVyVGV4dHVyZeOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAgICBpZih0aGlzLl9tYXNrVGV4dHVyZSAmJiB0aGlzLl9tYXNrVGV4dHVyZS50ZXh0dXJlICE9IDApICAvLyDliY3lm57kvb/jgaPjgZ/jgoLjga7jgpLov5TjgZlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFza1RleHR1cmUuZnJhbWVObyA9IHRoaXMuX2N1cnJlbnRGcmFtZU5vO1xyXG4gICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5fbWFza1RleHR1cmUudGV4dHVyZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYocmV0ID09IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIEZyYW1lQnVmZmVyT2JqZWN044GM5a2Y5Zyo44GX44Gq44GE5aC05ZCI44CB5paw44GX44GP55Sf5oiQ44GZ44KLXHJcblxyXG4gICAgICAgICAgICAgICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44OQ44OD44OV44Kh44K144Kk44K644KS5Y+W5b6XXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaXplOiBudW1iZXIgPSB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbG9yQnVmZmVyID0gdGhpcy5nbC5jcmVhdGVUZXh0dXJlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5fY29sb3JCdWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKHRoaXMuZ2wuVEVYVFVSRV8yRCwgMCAsdGhpcy5nbC5SR0JBLCBzaXplLCBzaXplLCAwLCB0aGlzLmdsLlJHQkEsIHRoaXMuZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLmdsLlRFWFRVUkVfV1JBUF9TLCB0aGlzLmdsLkNMQU1QX1RPX0VER0UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5nbC5URVhUVVJFX1dSQVBfVCwgdGhpcy5nbC5DTEFNUF9UT19FREdFKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCB0aGlzLmdsLkxJTkVBUik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLmdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgdGhpcy5nbC5MSU5FQVIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHJldCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHRoaXMuZ2wuQ09MT1JfQVRUQUNITUVOVDAsIHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5fY29sb3JCdWZmZXIsIDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgc19mYm8pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbmV3IEN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZSh0aGlzLl9jdXJyZW50RnJhbWVObywgcmV0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdlYkdM44Os44Oz44OA44Oq44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS6Kit5a6a44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIGdsIFdlYkdM44Os44Oz44OA44Oq44Oz44Kw44Kz44Oz44OG44Kt44K544OIXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldEdMKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmdsID0gZ2w7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg57jgrnjgq/jgZXjgozjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jnvqTlhajkvZPjgpLlm7LjgoDnn6nlvaLvvIjjg6Ljg4fjg6vluqfmqJnns7vvvInjgpLoqIjnrpfjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XHJcbiAgICAgICAgICogQHBhcmFtIGNsaXBwaW5nQ29udGV4dCDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jgrPjg7Pjg4bjgq3jgrnjg4hcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY2FsY0NsaXBwZWREcmF3VG90YWxCb3VuZHMobW9kZWw6IEN1YmlzbU1vZGVsLCBjbGlwcGluZ0NvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIOiiq+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr++8iOODnuOCueOCr+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiO+8ieOBruWFqOS9k+OBruefqeW9olxyXG4gICAgICAgICAgICBsZXQgY2xpcHBlZERyYXdUb3RhbE1pblg6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XHJcbiAgICAgICAgICAgIGxldCBjbGlwcGVkRHJhd1RvdGFsTWluWTogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcclxuICAgICAgICAgICAgbGV0IGNsaXBwZWREcmF3VG90YWxNYXhYOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xyXG4gICAgICAgICAgICBsZXQgY2xpcHBlZERyYXdUb3RhbE1heFk6IG51bWJlciA9IE51bWJlci5NSU5fVkFMVUU7XHJcblxyXG4gICAgICAgICAgICAvLyDjgZPjga7jg57jgrnjgq/jgYzlrp/pmpvjgavlv4XopoHjgYvliKTlrprjgZnjgotcclxuICAgICAgICAgICAgLy8g44GT44Gu44Kv44Oq44OD44OU44Oz44Kw44KS5Yip55So44GZ44KL44CM5o+P55S744Kq44OW44K444Kn44Kv44OI44CN44GM44Gy44Go44Gk44Gn44KC5L2/55So5Y+v6IO944Gn44GC44KM44Gw44Oe44K544Kv44KS55Sf5oiQ44GZ44KL5b+F6KaB44GM44GC44KLXHJcbiAgICAgICAgICAgIGNvbnN0IGNsaXBwZWREcmF3Q291bnQ6IG51bWJlciA9IGNsaXBwaW5nQ29udGV4dC5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgY2xpcHBlZERyYXdhYmxlSW5kZXg6IG51bWJlciA9IDA7IGNsaXBwZWREcmF3YWJsZUluZGV4IDwgY2xpcHBlZERyYXdDb3VudDsgY2xpcHBlZERyYXdhYmxlSW5kZXgrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8g44Oe44K544Kv44KS5L2/55So44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5o+P55S744GV44KM44KL55+p5b2i44KS5rGC44KB44KLXHJcbiAgICAgICAgICAgICAgICBjb25zdCBkcmF3YWJsZUluZGV4OiBudW1iZXIgPSBjbGlwcGluZ0NvbnRleHQuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdFtjbGlwcGVkRHJhd2FibGVJbmRleF07XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZHJhd2FibGVWZXJ0ZXhDb3VudDogbnVtYmVyID0gbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChkcmF3YWJsZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIGxldCBkcmF3YWJsZVZlcnRleGVzOiBGbG9hdDMyQXJyYXkgPSBtb2RlbC5nZXREcmF3YWJsZVZlcnRpY2VzKGRyYXdhYmxlSW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBtaW5YOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1pblk6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWF4WDogbnVtYmVyID0gTnVtYmVyLk1JTl9WQUxVRTtcclxuICAgICAgICAgICAgICAgIGxldCBtYXhZOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBsb29wOiBudW1iZXIgPSBkcmF3YWJsZVZlcnRleENvdW50ICogQ29uc3RhbnQudmVydGV4U3RlcDtcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgcGk6IG51bWJlciA9IENvbnN0YW50LnZlcnRleE9mZnNldDsgcGkgPCBsb29wOyBwaSArPSBDb25zdGFudC52ZXJ0ZXhTdGVwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB4OiBudW1iZXIgPSBkcmF3YWJsZVZlcnRleGVzW3BpXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeTogbnVtYmVyID0gZHJhd2FibGVWZXJ0ZXhlc1twaSArIDFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZih4IDwgbWluWClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pblggPSB4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZih4ID4gbWF4WClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heFggPSB4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZih5IDwgbWluWSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pblkgPSB5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZih5ID4gbWF4WSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heFkgPSB5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyDmnInlirnjgarngrnjgYzkuIDjgaTjgoLlj5bjgozjgarjgYvjgaPjgZ/jga7jgafjgrnjgq3jg4Pjg5dcclxuICAgICAgICAgICAgICAgIGlmKG1pblggPT0gTnVtYmVyLk1BWF9WQUxVRSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL+OAgOWFqOS9k+OBruefqeW9ouOBq+WPjeaYoFxyXG4gICAgICAgICAgICAgICAgaWYobWluWCA8IGNsaXBwZWREcmF3VG90YWxNaW5YKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaXBwZWREcmF3VG90YWxNaW5YID0gbWluWDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKG1pblkgPCBjbGlwcGVkRHJhd1RvdGFsTWluWSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGlwcGVkRHJhd1RvdGFsTWluWSA9IG1pblk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihtYXhYID4gY2xpcHBlZERyYXdUb3RhbE1heFgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcHBlZERyYXdUb3RhbE1heFggPSBtYXhYO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYobWF4WSA+IGNsaXBwZWREcmF3VG90YWxNYXhZKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaXBwZWREcmF3VG90YWxNYXhZID0gbWF4WTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZihjbGlwcGVkRHJhd1RvdGFsTWluWCA9PSBOdW1iZXIuTUFYX1ZBTFVFKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnggPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QueSA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC53aWR0aCA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC5oZWlnaHQgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9pc1VzaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9pc1VzaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdzogbnVtYmVyID0gY2xpcHBlZERyYXdUb3RhbE1heFggLSBjbGlwcGVkRHJhd1RvdGFsTWluWDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaDogbnVtYmVyID0gY2xpcHBlZERyYXdUb3RhbE1heFkgLSBjbGlwcGVkRHJhd1RvdGFsTWluWTtcclxuICAgICAgICAgICAgICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC54ID0gY2xpcHBlZERyYXdUb3RhbE1pblg7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QueSA9IGNsaXBwZWREcmF3VG90YWxNaW5ZO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LndpZHRoID0gdztcclxuICAgICAgICAgICAgICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC5oZWlnaHQgPSBoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fY29sb3JCdWZmZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50RnJhbWVObyA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nTWFza0J1ZmZlclNpemUgPSAyNTY7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrID0gbmV3IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3ID0gbmV3IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVRleHR1cmVDb2xvcj4oKTtcclxuICAgICAgICAgICAgdGhpcy5fdG1wQm91bmRzT25Nb2RlbCA9IG5ldyBjc21SZWN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xyXG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXhGb3JNYXNrID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeEZvckRyYXcgPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcclxuICAgICAgICAgICAgdGhpcy5fbWFza1RleHR1cmUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgbGV0IHRtcDogQ3ViaXNtVGV4dHVyZUNvbG9yID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xyXG4gICAgICAgICAgICB0bXAuUiA9IDEuMDtcclxuICAgICAgICAgICAgdG1wLkcgPSAwLjA7XHJcbiAgICAgICAgICAgIHRtcC5CID0gMC4wO1xyXG4gICAgICAgICAgICB0bXAuQSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fY2hhbm5lbENvbG9ycy5wdXNoQmFjayh0bXApO1xyXG5cclxuICAgICAgICAgICAgdG1wID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xyXG4gICAgICAgICAgICB0bXAuUiA9IDAuMDtcclxuICAgICAgICAgICAgdG1wLkcgPSAxLjA7XHJcbiAgICAgICAgICAgIHRtcC5CID0gMC4wO1xyXG4gICAgICAgICAgICB0bXAuQSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fY2hhbm5lbENvbG9ycy5wdXNoQmFjayh0bXApO1xyXG5cclxuICAgICAgICAgICAgdG1wID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xyXG4gICAgICAgICAgICB0bXAuUiA9IDAuMDtcclxuICAgICAgICAgICAgdG1wLkcgPSAwLjA7XHJcbiAgICAgICAgICAgIHRtcC5CID0gMS4wO1xyXG4gICAgICAgICAgICB0bXAuQSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fY2hhbm5lbENvbG9ycy5wdXNoQmFjayh0bXApO1xyXG5cclxuICAgICAgICAgICAgdG1wID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xyXG4gICAgICAgICAgICB0bXAuUiA9IDAuMDtcclxuICAgICAgICAgICAgdG1wLkcgPSAwLjA7XHJcbiAgICAgICAgICAgIHRtcC5CID0gMC4wO1xyXG4gICAgICAgICAgICB0bXAuQSA9IDEuMDtcclxuICAgICAgICAgICAgdGhpcy5fY2hhbm5lbENvbG9ycy5wdXNoQmFjayh0bXApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJlbGVhc2UoKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGkpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGkpLnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5zZXQoaSwgdm9pZCAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLnNldChpLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzayA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAvLyBfY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXfjga9fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2vjgavjgYLjgovjgqTjg7Pjgrnjgr/jg7PjgrnjgpLmjIfjgZfjgabjgYTjgovjgILkuIroqJjjga7lh6bnkIbjgavjgojjgoropoHntKDjgZTjgajjga5ERUxFVEXjga/kuI3opoHjgIJcclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcuZ2V0U2l6ZSgpOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3LnNldChpLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdyA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLl9tYXNrVGV4dHVyZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5kZWxldGVGcmFtZWJ1ZmZlcih0aGlzLl9tYXNrVGV4dHVyZS50ZXh0dXJlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fY2hhbm5lbENvbG9ycy5nZXRTaXplKCk7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbm5lbENvbG9ycy5zZXQoaSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy8g44OG44Kv44K544OB44Oj6Kej5pS+XHJcbiAgICAgICAgICAgIHRoaXMuZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLl9jb2xvckJ1ZmZlcik7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbG9yQnVmZmVyID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODnuODjeODvOOCuOODo+OBruWIneacn+WMluWHpueQhlxyXG4gICAgICAgICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+OBhuaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBrueZu+mMsuOCkuihjOOBhlxyXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAgICAgKiBAcGFyYW0gZHJhd2FibGVDb3VudCDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mlbBcclxuICAgICAgICAgKiBAcGFyYW0gZHJhd2FibGVNYXNrcyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7jg6rjgrnjg4hcclxuICAgICAgICAgKiBAcGFyYW0gZHJhd2FibGVDb3VudHMg5o+P55S744Kq44OW44K444Kn44Kv44OI44KS44Oe44K544Kv44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5pWwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGluaXRpYWxpemUobW9kZWw6IEN1YmlzbU1vZGVsLCBkcmF3YWJsZUNvdW50OiBudW1iZXIsIGRyYXdhYmxlTWFza3M6IEludDMyQXJyYXlbXSwgZHJhd2FibGVNYXNrQ291bnRzOiBJbnQzMkFycmF5KTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44KS5L2/44GG5o+P55S744Kq44OW44K444Kn44Kv44OI44KS44GZ44G544Gm55m76Yyy44GZ44KLXHJcbiAgICAgICAgICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBr+OAgemAmuW4uOaVsOWAi+eoi+W6puOBq+mZkOWumuOBl+OBpuS9v+OBhuOCguOBruOBqOOBmeOCi1xyXG4gICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCBkcmF3YWJsZUNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKGRyYXdhYmxlTWFza0NvdW50c1tpXSA8PSAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBjOS9v+eUqOOBleOCjOOBpuOBhOOBquOBhOOCouODvOODiOODoeODg+OCt+ODpe+8iOWkmuOBj+OBruWgtOWQiOS9v+eUqOOBl+OBquOBhO+8iVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3LnB1c2hCYWNrKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIOaXouOBq+OBguOCi0NsaXBDb250ZXh044Go5ZCM44GY44GL44OB44Kn44OD44Kv44GZ44KLXHJcbiAgICAgICAgICAgICAgICBsZXQgY2xpcHBpbmdDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLmZpbmRTYW1lQ2xpcChkcmF3YWJsZU1hc2tzW2ldLCBkcmF3YWJsZU1hc2tDb3VudHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgaWYoY2xpcHBpbmdDb250ZXh0ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5ZCM5LiA44Gu44Oe44K544Kv44GM5a2Y5Zyo44GX44Gm44GE44Gq44GE5aC05ZCI44Gv55Sf5oiQ44GZ44KLXHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcHBpbmdDb250ZXh0ID0gbmV3IEN1YmlzbUNsaXBwaW5nQ29udGV4dCh0aGlzLCBkcmF3YWJsZU1hc2tzW2ldLCBkcmF3YWJsZU1hc2tDb3VudHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLnB1c2hCYWNrKGNsaXBwaW5nQ29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY2xpcHBpbmdDb250ZXh0LmFkZENsaXBwZWREcmF3YWJsZShpKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdy5wdXNoQmFjayhjbGlwcGluZ0NvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLkvZzmiJDjgZnjgovjgILjg6Ljg4fjg6vmj4/nlLvmmYLjgavlrp/ooYzjgZnjgovjgIJcclxuICAgICAgICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XHJcbiAgICAgICAgICogQHBhcmFtIHJlbmRlcmVyIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCuVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXR1cENsaXBwaW5nQ29udGV4dChtb2RlbDogQ3ViaXNtTW9kZWwsIHJlbmRlcmVyOiBDdWJpc21SZW5kZXJlcl9XZWJHTCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRGcmFtZU5vKys7XHJcblxyXG4gICAgICAgICAgICAvLyDlhajjgabjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjgpLnlKjmhI/jgZnjgotcclxuICAgICAgICAgICAgLy8g5ZCM44GY44Kv44Oq44OD44OX77yI6KSH5pWw44Gu5aC05ZCI44Gv44G+44Go44KB44Gm5LiA44Gk44Gu44Kv44Oq44OD44OX77yJ44KS5L2/44GG5aC05ZCI44GvMeW6puOBoOOBkeioreWumuOBmeOCi1xyXG4gICAgICAgICAgICBsZXQgdXNpbmdDbGlwQ291bnQ6IG51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIGZvcihsZXQgY2xpcEluZGV4ID0gMDsgY2xpcEluZGV4IDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBjbGlwSW5kZXgrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gMeOBpOOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBq+mWouOBl+OBplxyXG4gICAgICAgICAgICAgICAgbGV0IGNjOiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjbGlwSW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOOBk+OBruOCr+ODquODg+ODl+OCkuWIqeeUqOOBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOe+pOWFqOS9k+OCkuWbsuOCgOefqeW9ouOCkuioiOeul1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxjQ2xpcHBlZERyYXdUb3RhbEJvdW5kcyhtb2RlbCwgY2MpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGNjLl9pc1VzaW5nKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHVzaW5nQ2xpcENvdW50Kys7IC8vIOS9v+eUqOS4reOBqOOBl+OBpuOCq+OCpuODs+ODiFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDjg57jgrnjgq/kvZzmiJDlh6bnkIZcclxuICAgICAgICAgICAgaWYodXNpbmdDbGlwQ291bnQgPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyDnlJ/miJDjgZfjgZ9GcmFtZUJ1ZmZlcuOBqOWQjOOBmOOCteOCpOOCuuOBp+ODk+ODpeODvOODneODvOODiOOCkuioreWumlxyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC52aWV3cG9ydCgwLCAwLCB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplLCB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDjg57jgrnjgq/jgpJhY3RpdmXjgavjgZnjgotcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlID0gdGhpcy5nZXRNYXNrUmVuZGVyVGV4dHVyZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOODouODh+ODq+aPj+eUu+aZguOBq0RyYXdNZXNoTm9344Gr5rih44GV44KM44KL5aSJ5o+bKOODouODh+ODq3Rv44Ov44O844Or44OJ5bqn5qiZ5aSJ5o+bKVxyXG4gICAgICAgICAgICAgICAgbGV0IG1vZGVsVG9Xb3JsZEY6IEN1YmlzbU1hdHJpeDQ0ID0gcmVuZGVyZXIuZ2V0TXZwTWF0cml4KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVuZGVyZXIucHJlRHJhdygpOyAvLyDjg5Djg4Pjg5XjgqHjgpLjgq/jg6rjgqLjgZnjgotcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDlkITjg57jgrnjgq/jga7jg6zjgqTjgqLjgqbjg4jjgpLmsbrlrprjgZfjgabjgYTjgY9cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBMYXlvdXRCb3VuZHModXNpbmdDbGlwQ291bnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0g44Oe44K544Kv5o+P55S75Yem55CGIC0tLS0tLS0tLS1cclxuICAgICAgICAgICAgICAgIC8vIOODnuOCueOCr+eUqFJlbmRlclRleHR1cmXjgpJhY3RpdmXjgavjgrvjg4Pjg4hcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDjg57jgrnjgq/jgpLjgq/jg6rjgqLjgZnjgotcclxuICAgICAgICAgICAgICAgIC8vICjku67ku5Xmp5gpIDHjgYznhKHlirnvvIjmj4/jgYvjgozjgarjgYTvvInpoJjln5/jgIEw44GM5pyJ5Yq577yI5o+P44GL44KM44KL77yJ6aCY5Z+f44CC77yI44K344Kn44O844OA44O8Q2QqQ3Pjgacw44Gr6L+R44GE5YCk44KS44GL44GR44Gm44Oe44K544Kv44KS5L2c44KL44CCMeOCkuOBi+OBkeOCi+OBqOS9leOCgui1t+OBk+OCieOBquOBhO+8iVxyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5jbGVhckNvbG9yKDEuMCwgMS4wLCAxLjAsIDEuMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g5a6f6Zqb44Gr44Oe44K544Kv44KS55Sf5oiQ44GZ44KLXHJcbiAgICAgICAgICAgICAgICAvLyDlhajjgabjga7jg57jgrnjgq/jgpLjganjga7jgojjgYbjgavjg6zjgqTjgqLjgqbjg4jjgZfjgabmj4/jgY/jgYvjgpLmsbrlrprjgZfjgIFDbGlwQ29udGV4dCwgQ2xpcHBlZERyYXdDb250ZXh044Gr6KiY5oa244GZ44KLXHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGNsaXBJbmRleDogbnVtYmVyID0gMDsgY2xpcEluZGV4IDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBjbGlwSW5kZXgrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAtLS0g5a6f6Zqb44GrMeOBpOOBruODnuOCueOCr+OCkuaPj+OBjyAtLS1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2xpcENvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGNsaXBJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFsbENsaXBlZERyYXdSZWN0OiBjc21SZWN0ID0gY2xpcENvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdDsgICAvLyDjgZPjga7jg57jgrnjgq/jgpLkvb/jgYbjgIHjgZnjgbnjgabjga7mj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7oq5bnkIbluqfmqJnkuIrjga7lm7Ljgb/nn6nlvaJcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGF5b3V0Qm91bmRzT25UZXgwMTogY3NtUmVjdCA9IGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHM7IC8vIOOBk+OBruS4reOBq+ODnuOCueOCr+OCkuWPjuOCgeOCi1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyDjg6Ljg4fjg6vluqfmqJnkuIrjga7nn6nlvaLjgpLjgIHpganlrpzjg57jg7zjgrjjg7PjgpLku5jjgZHjgabkvb/jgYZcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBNQVJHSU46IG51bWJlciA9IDAuMDU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdG1wQm91bmRzT25Nb2RlbC5zZXRSZWN0KGFsbENsaXBlZERyYXdSZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90bXBCb3VuZHNPbk1vZGVsLmV4cGFuZChhbGxDbGlwZWREcmF3UmVjdC53aWR0aCAqIE1BUkdJTiwgYWxsQ2xpcGVkRHJhd1JlY3QuaGVpZ2h0ICogTUFSR0lOKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyMjIyMjIyMjIyMg5pys5p2l44Gv5Ymy44KK5b2T44Gm44KJ44KM44Gf6aCY5Z+f44Gu5YWo5L2T44KS5L2/44KP44Ga5b+F6KaB5pyA5L2O6ZmQ44Gu44K144Kk44K644GM44KI44GEXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOOCt+OCp+ODvOODgOeUqOOBruioiOeul+W8j+OCkuaxguOCgeOCi+OAguWbnui7ouOCkuiAg+aFruOBl+OBquOBhOWgtOWQiOOBr+S7peS4i+OBruOBqOOBiuOCilxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmVQZXJpb2QnID0gbW92ZVBlcmlvZCAqIHNjYWxlWCArIG9mZlhcdFx0ICBbWyBtb3ZlUGVyaW9kJyA9IChtb3ZlUGVyaW9kIC0gdG1wQm91bmRzT25Nb2RlbC5tb3ZlUGVyaW9kKSpzY2FsZSArIGxheW91dEJvdW5kc09uVGV4MDEubW92ZVBlcmlvZCBdXVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlWDogbnVtYmVyID0gbGF5b3V0Qm91bmRzT25UZXgwMS53aWR0aCAvIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NhbGVZOiBudW1iZXIgPSBsYXlvdXRCb3VuZHNPblRleDAxLmhlaWdodCAvIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyDjg57jgrnjgq/nlJ/miJDmmYLjgavkvb/jgYbooYzliJfjgpLmsYLjgoHjgotcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOOCt+OCp+ODvOODgOOBq+a4oeOBmeihjOWIl+OCkuaxguOCgeOCiyA8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwg6KaB5pyA6YGp5YyW77yI6YCG6aCG44Gr6KiI566X44GZ44KM44Gw44K344Oz44OX44Or44Gr44Gn44GN44KL77yJXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5sb2FkSWRlbnRpdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGF5b3V0MC4uMSDjgpIgLTEuLjHjgavlpInmj5tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZSgtMS4wLCAtMS4wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5zY2FsZVJlbGF0aXZlKDIuMCwgMi4wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2aWV3IHRvIGxheW91dDAuLjFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZShsYXlvdXRCb3VuZHNPblRleDAxLngsIGxheW91dEJvdW5kc09uVGV4MDEueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZShzY2FsZVgsIHNjYWxlWSk7ICAvLyBuZXcgPSBbdHJhbnNsYXRlXVtzY2FsZV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZSgtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC54LCAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVt0cmFuc2xhdGVdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG1wTWF0cml4Rm9yTWFza+OBjOioiOeul+e1kOaenFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90bXBNYXRyaXhGb3JNYXNrLnNldE1hdHJpeCh0aGlzLl90bXBNYXRyaXguZ2V0QXJyYXkoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLy0tLS0tLS0tLSBkcmF35pmC44GuIG1hc2sg5Y+C54Wn55So6KGM5YiX44KS6KiI566XXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDjgrfjgqfjg7zjg4DjgavmuKHjgZnooYzliJfjgpLmsYLjgoHjgosgPDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8IOimgeacgOmBqeWMlu+8iOmAhumghuOBq+ioiOeul+OBmeOCjOOBsOOCt+ODs+ODl+ODq+OBq+OBp+OBjeOCi++8iVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90bXBNYXRyaXgubG9hZElkZW50aXR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZShsYXlvdXRCb3VuZHNPblRleDAxLngsIGxheW91dEJvdW5kc09uVGV4MDEueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZShzY2FsZVgsIHNjYWxlWSk7ICAvLyBuZXcgPSBbdHJhbnNsYXRlXVtzY2FsZV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZSgtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC54LCAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVt0cmFuc2xhdGVdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4Rm9yRHJhdy5zZXRNYXRyaXgodGhpcy5fdG1wTWF0cml4LmdldEFycmF5KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjbGlwQ29udGV4dC5fbWF0cml4Rm9yTWFzay5zZXRNYXRyaXgodGhpcy5fdG1wTWF0cml4Rm9yTWFzay5nZXRBcnJheSgpKTtcclxuICAgICAgICAgICAgICAgICAgICBjbGlwQ29udGV4dC5fbWF0cml4Rm9yRHJhdy5zZXRNYXRyaXgodGhpcy5fdG1wTWF0cml4Rm9yRHJhdy5nZXRBcnJheSgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xpcERyYXdDb3VudDogbnVtYmVyID0gY2xpcENvbnRleHQuX2NsaXBwaW5nSWRDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCBjbGlwRHJhd0NvdW50OyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGlwRHJhd0luZGV4OiBudW1iZXIgPSBjbGlwQ29udGV4dC5fY2xpcHBpbmdJZExpc3RbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDpoILngrnmg4XloLHjgYzmm7TmlrDjgZXjgozjgabjgYrjgonjgZrjgIHkv6HpoLzmgKfjgYzjgarjgYTloLTlkIjjga/mj4/nlLvjgpLjg5HjgrnjgZnjgotcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIW1vZGVsLmdldERyYXdhYmxlRHluYW1pY0ZsYWdWZXJ0ZXhQb3NpdGlvbnNEaWRDaGFuZ2UoY2xpcERyYXdJbmRleCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlci5zZXRJc0N1bGxpbmcobW9kZWwuZ2V0RHJhd2FibGVDdWxsaW5nKGNsaXBEcmF3SW5kZXgpICE9IGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOS7iuWbnuWwgueUqOOBruWkieaPm+OCkumBqeeUqOOBl+OBpuaPj+OBj1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDjg4Hjg6Pjg7Pjg43jg6vjgoLliIfjgormm7/jgYjjgovlv4XopoHjgYzjgYLjgosoQSxSLEcsQilcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhjbGlwQ29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLmRyYXdNZXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVUZXh0dXJlSW5kaWNlcyhjbGlwRHJhd0luZGV4KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGV4SW5kZXhDb3VudChjbGlwRHJhd0luZGV4KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGV4Q291bnQoY2xpcERyYXdJbmRleCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleEluZGljZXMoY2xpcERyYXdJbmRleCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRpY2VzKGNsaXBEcmF3SW5kZXgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhVdnMoY2xpcERyYXdJbmRleCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZU9wYWNpdHkoY2xpcERyYXdJbmRleCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX05vcm1hbCAgIC8vIOOCr+ODquODg+ODlOODs+OCsOOBr+mAmuW4uOaPj+eUu+OCkuW8t+WItlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyAtLS0g5b6M5Yem55CGIC0tLVxyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgc19mYm8pOyAgIC8vIOaPj+eUu+WvvuixoeOCkuaIu+OBmVxyXG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KHNfdmlld3BvcnRbMF0sIHNfdmlld3BvcnRbMV0sIHNfdmlld3BvcnRbMl0sIHNfdmlld3BvcnRbM10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDml6Ljgavjg57jgrnjgq/jgpLkvZzjgaPjgabjgYTjgovjgYvjgpLnorroqo1cclxuICAgICAgICAgKiDkvZzjgaPjgabjgYTjgovmp5jjgafjgYLjgozjgbDoqbLlvZPjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLov5TjgZlcclxuICAgICAgICAgKiDkvZzjgaPjgabjgYTjgarjgZHjgozjgbBOVUxM44KS6L+U44GZXHJcbiAgICAgICAgICogQHBhcmFtIGRyYXdhYmxlTWFza3Mg5o+P55S744Kq44OW44K444Kn44Kv44OI44KS44Oe44K544Kv44GZ44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Oq44K544OIXHJcbiAgICAgICAgICogQHBhcmFtIGRyYXdhYmxlTWFza0NvdW50cyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mlbBcclxuICAgICAgICAgKiBAcmV0dXJuIOipsuW9k+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBjOWtmOWcqOOBmeOCjOOBsOOCpOODs+OCueOCv+ODs+OCueOCkui/lOOBl+OAgeOBquOBkeOCjOOBsE5VTEzjgpLov5TjgZlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZmluZFNhbWVDbGlwKGRyYXdhYmxlTWFza3M6IEludDMyQXJyYXksIGRyYXdhYmxlTWFza0NvdW50czogbnVtYmVyKTogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyDkvZzmiJDmuIjjgb9DbGlwcGluZ0NvbnRleHTjgajkuIDoh7TjgZnjgovjgYvnorroqo1cclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCBjbGlwcGluZ0NvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY291bnQ6IG51bWJlciA9IGNsaXBwaW5nQ29udGV4dC5fY2xpcHBpbmdJZENvdW50O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyDlgIvmlbDjgYzpgZXjgYbloLTlkIjjga/liKXnialcclxuICAgICAgICAgICAgICAgIGlmKGNvdW50ICE9IGRyYXdhYmxlTWFza0NvdW50cylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc2FtZUNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDlkIzjgZhJROOCkuaMgeOBpOOBi+eiuuiqjeOAgumFjeWIl+OBruaVsOOBjOWQjOOBmOOBquOBruOBp+OAgeS4gOiHtOOBl+OBn+WAi+aVsOOBjOWQjOOBmOOBquOCieWQjOOBmOeJqeOCkuaMgeOBpOOBqOOBmeOCi1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBqOiBudW1iZXIgPSAwOyBqIDwgY291bnQ7IGorKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGlwSWQ6IG51bWJlciA9IGNsaXBwaW5nQ29udGV4dC5fY2xpcHBpbmdJZExpc3Rbal07XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBrOiBudW1iZXIgPSAwOyBrIDwgY291bnQ7IGsrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRyYXdhYmxlTWFza3Nba10gPT0gY2xpcElkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1lQ291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHNhbWVDb3VudCA9PSBjb3VudClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xpcHBpbmdDb250ZXh0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8g6KaL44Gk44GL44KJ44Gq44GL44Gj44GfXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLphY3nva7jgZnjgovjg6zjgqTjgqLjgqbjg4hcclxuICAgICAgICAgKiDkuIDjgaTjga7jg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6PjgpLmpbXlipvjgYTjgaPjgbHjgYTjgavkvb/jgaPjgabjg57jgrnjgq/jgpLjg6zjgqTjgqLjgqbjg4jjgZnjgotcclxuICAgICAgICAgKiDjg57jgrnjgq/jgrDjg6vjg7zjg5fjga7mlbDjgYw05Lul5LiL44Gq44KJUkdCQeWQhOODgeODo+ODs+ODjeODq+OBq+S4gOOBpOOBmuOBpOODnuOCueOCr+OCkumFjee9ruOBl+OAgTXku6XkuIo25Lul5LiL44Gq44KJUkdCQeOCkjIsMiwxLDHjgajphY3nva7jgZnjgovjgIJcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gdXNpbmdDbGlwQ291bnQg6YWN572u44GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44Gu5pWwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldHVwTGF5b3V0Qm91bmRzKHVzaW5nQ2xpcENvdW50OiBudW1iZXIpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyDjgbLjgajjgaTjga5SZW5kZXJUZXh0dXJl44KS5qW15Yqb44GE44Gj44Gx44GE44Gr5L2/44Gj44Gm44Oe44K544Kv44KS44Os44Kk44Ki44Km44OI44GZ44KLXHJcbiAgICAgICAgICAgIC8vIOODnuOCueOCr+OCsOODq+ODvOODl+OBruaVsOOBjDTku6XkuIvjgarjgolSR0JB5ZCE44OB44Oj44Oz44ON44Or44GrMeOBpOOBmuOBpOODnuOCueOCr+OCkumFjee9ruOBl+OAgTXku6XkuIo25Lul5LiL44Gq44KJUkdCQeOCkjIsMiwxLDHjgajphY3nva7jgZnjgotcclxuXHJcbiAgICAgICAgICAgIC8vIFJHQkHjgpLpoIbnlarjgavkvb/jgaPjgabjgYTjgY9cclxuICAgICAgICAgICAgbGV0IGRpdjogbnVtYmVyID0gdXNpbmdDbGlwQ291bnQgLyBDb2xvckNoYW5uZWxDb3VudDsgLy/jgIAx44OB44Oj44Oz44ON44Or44Gr6YWN572u44GZ44KL5Z+65pys44Gu44Oe44K544KvXHJcbiAgICAgICAgICAgIGxldCBtb2Q6IG51bWJlciA9IHVzaW5nQ2xpcENvdW50ICUgQ29sb3JDaGFubmVsQ291bnQ7IC8vIOS9meOCiuOAgeOBk+OBrueVquWPt+OBruODgeODo+ODs+ODjeODq+OBvuOBp+OBq+S4gOOBpOOBmuOBpOmFjeWIhuOBmeOCi1xyXG5cclxuICAgICAgICAgICAgLy8g5bCP5pWw54K544Gv5YiH44KK5o2o44Gm44KLXHJcbiAgICAgICAgICAgIGRpdiA9IH5+ZGl2O1xyXG4gICAgICAgICAgICBtb2QgPSB+fm1vZDtcclxuXHJcbiAgICAgICAgICAgIC8vIFJHQkHjgZ3jgozjgZ7jgozjga7jg4Hjg6Pjg7Pjg43jg6vjgpLnlKjmhI/jgZfjgabjgYTjgY/vvIgwOlIsIDE6RywgMjpCLCAzOkHvvIlcclxuICAgICAgICAgICAgbGV0IGN1ckNsaXBJbmRleDogbnVtYmVyID0gMDsgLy8g6aCG55Wq44Gr6Kit5a6a44GX44Gm44GE44GPXHJcblxyXG4gICAgICAgICAgICBmb3IobGV0IGNoYW5uZWxObzogbnVtYmVyID0gMDsgY2hhbm5lbE5vIDwgQ29sb3JDaGFubmVsQ291bnQ7IGNoYW5uZWxObysrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyDjgZPjga7jg4Hjg6Pjg7Pjg43jg6vjgavjg6zjgqTjgqLjgqbjg4jjgZnjgovmlbBcclxuICAgICAgICAgICAgICAgIGxldCBsYXlvdXRDb3VudDogbnVtYmVyID0gZGl2ICsgKGNoYW5uZWxObyA8IG1vZCA/IDEgOiAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDliIblibLmlrnms5XjgpLmsbrlrprjgZnjgotcclxuICAgICAgICAgICAgICAgIGlmKGxheW91dENvdW50ID09IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5L2V44KC44GX44Gq44GEXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGxheW91dENvdW50ID09IDEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5YWo44Gm44KS44Gd44Gu44G+44G+5L2/44GGXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNsaXBDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjdXJDbGlwSW5kZXgrKyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcENvbnRleHQuX2xheW91dENoYW5uZWxObyA9IGNoYW5uZWxObztcclxuICAgICAgICAgICAgICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLnggPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcENvbnRleHQuX2xheW91dEJvdW5kcy55ID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHMud2lkdGggPSAxLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcENvbnRleHQuX2xheW91dEJvdW5kcy5oZWlnaHQgPSAxLjA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGxheW91dENvdW50ID09IDIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgbGF5b3V0Q291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4cG9zOiBudW1iZXIgPSBpICUgMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWwj+aVsOeCueOBr+WIh+OCiuaNqOOBpuOCi1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4cG9zID0gfn54cG9zO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNjOiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjdXJDbGlwSW5kZXgrKyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLl9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnggPSB4cG9zICogMC41O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnkgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMud2lkdGggPSAwLjU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMuaGVpZ2h0ID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVVuOCkjLjgaTjgavliIbop6PjgZfjgabkvb/jgYZcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGxheW91dENvdW50IDw9IDQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gNOWIhuWJsuOBl+OBpuS9v+OBhlxyXG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaTogbnVtYmVyID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeHBvczogbnVtYmVyID0gaSAlIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB5cG9zOiBudW1iZXIgPSBpIC8gMjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWwj+aVsOeCueOBr+WIh+OCiuaNqOOBpuOCi1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4cG9zID0gfn54cG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5cG9zID0gfn55cG9zO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNjID0gdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoY3VyQ2xpcEluZGV4KyspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYy5fbGF5b3V0Q2hhbm5lbE5vID0gY2hhbm5lbE5vO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy54ID0geHBvcyAqIDAuNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy55ID0geXBvcyAqIDAuNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy53aWR0aCA9IDAuNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy5oZWlnaHQgPSAwLjU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihsYXlvdXRDb3VudCA8PSA5KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIDnliIblibLjgZfjgabkvb/jgYZcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCBsYXlvdXRDb3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHhwb3MgPSBpICUgMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHlwb3MgPSBpIC8gMztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWwj+aVsOeCueOBr+WIh+OCiuaNqOOBpuOCi1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4cG9zID0gfn54cG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5cG9zID0gfn55cG9zO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNjOiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjdXJDbGlwSW5kZXgrKyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLl9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnggPSB4cG9zIC8gMy4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnkgPSB5cG9zIC8gMy4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMS4wIC8gMy4wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDEuMCAvIDMuMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ3ViaXNtTG9nRXJyb3IoXCJub3Qgc3VwcG9ydGVkIG1hc2sgY291bnQgOiB7MH1cIiwgbGF5b3V0Q291bnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kr44Op44O844OQ44OD44OV44Kh44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiDjgqvjg6njg7zjg5Djg4Pjg5XjgqFcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0Q29sb3JCdWZmZXIoKTogV2ViR0xUZXh0dXJlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29sb3JCdWZmZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnlLvpnaLmj4/nlLvjgavkvb/nlKjjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jg6rjgrnjg4jjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIOeUu+mdouaPj+eUu+OBq+S9v+eUqOOBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruODquOCueODiFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRDbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdygpOiBjc21WZWN0b3I8Q3ViaXNtQ2xpcHBpbmdDb250ZXh0PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K644KS6Kit5a6a44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIHNpemUg44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldENsaXBwaW5nTWFza0J1ZmZlclNpemUoc2l6ZTogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSA9IHNpemU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrrjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplKCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NsaXBwaW5nTWFza0J1ZmZlclNpemU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgX21hc2tSZW5kZXJUZXh0dXJlOiBXZWJHTEZyYW1lYnVmZmVyOyAvLyDjg57jgrnjgq/nlKjjg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjga7jgqLjg4njg6zjgrlcclxuICAgICAgICBwdWJsaWMgX2NvbG9yQnVmZmVyOiBXZWJHTFRleHR1cmU7ICAgICAgIC8vIOODnuOCueOCr+eUqOOCq+ODqeODvOODkOODg+ODleOCoeODvOOBruOCouODieODrOOCuVxyXG4gICAgICAgIHB1YmxpYyBfY3VycmVudEZyYW1lTm86IG51bWJlcjsgICAgLy8g44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5LiO44GI44KL44OV44Os44O844Og55Wq5Y+3XHJcblxyXG4gICAgICAgIHB1YmxpYyBfY2hhbm5lbENvbG9yczogY3NtVmVjdG9yPEN1YmlzbVRleHR1cmVDb2xvcj47XHJcbiAgICAgICAgcHVibGljIF9tYXNrVGV4dHVyZTogQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlOyAgICAgICAgICAgLy8g44Oe44K544Kv55So44Gu44OG44Kv44K544OB44Oj44Oq44K944O844K544Gu44Oq44K544OIXHJcbiAgICAgICAgcHVibGljIF9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzazogY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD47ICAgLy8g44Oe44K544Kv55So44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44Gu44Oq44K544OIXHJcbiAgICAgICAgcHVibGljIF9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdzogY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD47ICAgLy8g5o+P55S755So44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44Gu44Oq44K544OIXHJcbiAgICAgICAgcHVibGljIF9jbGlwcGluZ01hc2tCdWZmZXJTaXplOiBudW1iZXI7ICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruODkOODg+ODleOCoeOCteOCpOOCuu+8iOWIneacn+WApDoyNTbvvIlcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfdG1wTWF0cml4OiBDdWJpc21NYXRyaXg0NDsgICAgICAgICAvLyDjg57jgrnjgq/oqIjnrpfnlKjjga7ooYzliJdcclxuICAgICAgICBwcml2YXRlIF90bXBNYXRyaXhGb3JNYXNrOiBDdWJpc21NYXRyaXg0NDsgIC8vIOODnuOCueOCr+ioiOeul+eUqOOBruihjOWIl1xyXG4gICAgICAgIHByaXZhdGUgX3RtcE1hdHJpeEZvckRyYXc6IEN1YmlzbU1hdHJpeDQ0OyAgLy8g44Oe44K544Kv6KiI566X55So44Gu6KGM5YiXXHJcbiAgICAgICAgcHJpdmF0ZSBfdG1wQm91bmRzT25Nb2RlbDogY3NtUmVjdDsgICAgICAgICAvLyDjg57jgrnjgq/phY3nva7oqIjnrpfnlKjjga7nn6nlvaJcclxuXHJcbiAgICAgICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDsgIC8vIFdlYkdM44Os44Oz44OA44Oq44Oz44Kw44Kz44Oz44OG44Kt44K544OIXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgr3jg7zjgrnjgpLlrprnvqnjgZnjgovmp4vpgKDkvZNcclxuICAgICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBp+S9v+eUqOOBmeOCi1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICogQHBhcmFtIGZyYW1lTm8g44Os44Oz44OA44Op44O844Gu44OV44Os44O844Og55Wq5Y+3XHJcbiAgICAgICAgICogQHBhcmFtIHRleHR1cmUg44OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKGZyYW1lTm86IG51bWJlciwgdGV4dHVyZTogV2ViR0xGcmFtZWJ1ZmZlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVObyA9IGZyYW1lTm87XHJcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZSA9IHRleHR1cmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZnJhbWVObzogbnVtYmVyOyAgICAvLyDjg6zjg7Pjg4Djg6njga7jg5Xjg6zjg7zjg6Dnlarlj7dcclxuICAgICAgICBwdWJsaWMgdGV4dHVyZTogV2ViR0xGcmFtZWJ1ZmZlcjsgICAgLy8g44OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K5XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jgrPjg7Pjg4bjgq3jgrnjg4hcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbUNsaXBwaW5nQ29udGV4dFxyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihtYW5hZ2VyOiBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wsIGNsaXBwaW5nRHJhd2FibGVJbmRpY2VzOiBJbnQzMkFycmF5LCBjbGlwQ291bnQ6IG51bWJlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX293bmVyID0gbWFuYWdlcjtcclxuXHJcbiAgICAgICAgICAgIC8vIOOCr+ODquODg+ODl+OBl+OBpuOBhOOCi++8iO+8neODnuOCueOCr+eUqOOBru+8iURyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K544Oq44K544OIXHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nSWRMaXN0ID0gY2xpcHBpbmdEcmF3YWJsZUluZGljZXM7XHJcblxyXG4gICAgICAgICAgICAvLyDjg57jgrnjgq/jga7mlbBcclxuICAgICAgICAgICAgdGhpcy5fY2xpcHBpbmdJZENvdW50ID0gY2xpcENvdW50O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ID0gbmV3IGNzbVJlY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5fbGF5b3V0Qm91bmRzID0gbmV3IGNzbVJlY3QoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdCA9IG5ldyBBcnJheSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fbWF0cml4Rm9yTWFzayA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRyaXhGb3JEcmF3ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZih0aGlzLl9sYXlvdXRCb3VuZHMgIT0gbnVsbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0Qm91bmRzID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FsbENsaXBwZWREcmF3UmVjdCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdCAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGlwcGVkRHJhd2FibGVJbmRleExpc3QgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgZPjga7jg57jgrnjgq/jgavjgq/jg6rjg4Pjg5fjgZXjgozjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLov73liqDjgZnjgotcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCDjgq/jg6rjg4Pjg5Tjg7PjgrDlr77osaHjgavov73liqDjgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYWRkQ2xpcHBlZERyYXdhYmxlKGRyYXdhYmxlSW5kZXg6IG51bWJlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdC5wdXNoKGRyYXdhYmxlSW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44GT44Gu44Oe44K544Kv44KS566h55CG44GZ44KL44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K544KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jg43jg7zjgrjjg6Pjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0Q2xpcHBpbmdNYW5hZ2VyKCk6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX293bmVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHNldEdsKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9vd25lci5zZXRHTChnbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgX2lzVXNpbmc6IGJvb2xlYW47ICAvLyDnj77lnKjjga7mj4/nlLvnirbmhYvjgafjg57jgrnjgq/jga7mupblgpnjgYzlv4XopoHjgarjgol0cnVlXHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IF9jbGlwcGluZ0lkTGlzdDogSW50MzJBcnJheTsgICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44GuSUTjg6rjgrnjg4hcclxuICAgICAgICBwdWJsaWMgX2NsaXBwaW5nSWRDb3VudDogbnVtYmVyOyAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruaVsFxyXG4gICAgICAgIHB1YmxpYyBfbGF5b3V0Q2hhbm5lbE5vOiBudW1iZXI7ICAvLyBSR0JB44Gu44GE44Ga44KM44Gu44OB44Oj44Oz44ON44Or44Gr44GT44Gu44Kv44Oq44OD44OX44KS6YWN572u44GZ44KL44GL77yIMDpSLCAxOkcsIDI6QiwgMzpB77yJXHJcbiAgICAgICAgcHVibGljIF9sYXlvdXRCb3VuZHM6IGNzbVJlY3Q7IC8vIOODnuOCueOCr+eUqOODgeODo+ODs+ODjeODq+OBruOBqeOBrumgmOWfn+OBq+ODnuOCueOCr+OCkuWFpeOCjOOCi+OBi++8iFZpZXfluqfmqJktMX4xLCBVVuOBrzB+MeOBq+ebtOOBme+8iVxyXG4gICAgICAgIHB1YmxpYyBfYWxsQ2xpcHBlZERyYXdSZWN0OiBjc21SZWN0OyAgIC8vIOOBk+OBruOCr+ODquODg+ODlOODs+OCsOOBp+OAgeOCr+ODquODg+ODlOODs+OCsOOBleOCjOOCi+OBmeOBueOBpuOBruaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruWbsuOBv+efqeW9ou+8iOavjuWbnuabtOaWsO+8iVxyXG4gICAgICAgIHB1YmxpYyBfbWF0cml4Rm9yTWFzazogQ3ViaXNtTWF0cml4NDQ7IC8vIOODnuOCueOCr+OBruS9jee9ruioiOeul+e1kOaenOOCkuS/neaMgeOBmeOCi+ihjOWIl1xyXG4gICAgICAgIHB1YmxpYyBfbWF0cml4Rm9yRHJhdzogQ3ViaXNtTWF0cml4NDQ7IC8vIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruS9jee9ruioiOeul+e1kOaenOOCkuS/neaMgeOBmeOCi+ihjOWIl1xyXG4gICAgICAgIHB1YmxpYyBfY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0OiBudW1iZXJbXTsgLy8g44GT44Gu44Oe44K544Kv44Gr44Kv44Oq44OD44OX44GV44KM44KL5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu44Oq44K544OIXHJcblxyXG4gICAgICAgIHByaXZhdGUgX293bmVyOiBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0w7ICAgIC8vIOOBk+OBruODnuOCueOCr+OCkueuoeeQhuOBl+OBpuOBhOOCi+ODnuODjeODvOOCuOODo+OBruOCpOODs+OCueOCv+ODs+OCuVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2ViR0znlKjjga7jgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLnlJ/miJDjg7vnoLTmo4TjgZnjgovjgq/jg6njgrlcclxuICAgICAqIOOCt+ODs+OCsOODq+ODiOODs+OBquOCr+ODqeOCueOBp+OBguOCiuOAgUN1YmlzbVNoYWRlcl9XZWJHTC5nZXRJbnN0YW5jZeOBi+OCieOCouOCr+OCu+OCueOBmeOCi+OAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtU2hhZGVyX1dlYkdMXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kk44Oz44K544K/44Oz44K544KS5Y+W5b6X44GZ44KL77yI44K344Oz44Kw44Or44OI44Oz77yJXHJcbiAgICAgICAgICogQHJldHVybiDjgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IEN1YmlzbVNoYWRlcl9XZWJHTFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoc19pbnN0YW5jZSA9PSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzX2luc3RhbmNlID0gbmV3IEN1YmlzbVNoYWRlcl9XZWJHTCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBzX2luc3RhbmNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzX2luc3RhbmNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kk44Oz44K544K/44Oz44K544KS6ZaL5pS+44GZ44KL77yI44K344Oz44Kw44Or44OI44Oz77yJXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBkZWxldGVJbnN0YW5jZSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihzX2luc3RhbmNlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzX2luc3RhbmNlLnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgIHNfaW5zdGFuY2UgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICBzX2luc3RhbmNlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogcHJpdmF0ZeOBquOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtU2hhZGVyU2V0PigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJlbGVhc2UoKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5yZWxlYXNlU2hhZGVyUHJvZ3JhbSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gu5LiA6YCj44Gu44K744OD44OI44Ki44OD44OX44KS5a6f6KGM44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIHJlbmRlcmVyIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCuVxyXG4gICAgICAgICAqIEBwYXJhbSB0ZXh0dXJlSWQgR1BV44Gu44OG44Kv44K544OB44OjSURcclxuICAgICAgICAgKiBAcGFyYW0gdmVydGV4Q291bnQg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K55pWwXHJcbiAgICAgICAgICogQHBhcmFtIHZlcnRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCuemFjeWIl1xyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleEFycmF544CA44Kk44Oz44OH44OD44Kv44K544OQ44OD44OV44Kh44Gu6aCC54K56YWN5YiXXHJcbiAgICAgICAgICogQHBhcmFtIHV2QXJyYXkgdXbphY3liJdcclxuICAgICAgICAgKiBAcGFyYW0gb3BhY2l0eSDkuI3pgI/mmI7luqZcclxuICAgICAgICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O844OW44Os44Oz44OH44Kj44Oz44Kw44Gu44K/44Kk44OXXHJcbiAgICAgICAgICogQHBhcmFtIGJhc2VDb2xvciDjg5njg7zjgrnjgqvjg6njg7xcclxuICAgICAgICAgKiBAcGFyYW0gaXNQcmVtdWx0aXBsaWVkQWxwaGEg5LmX566X5riI44G/44Ki44Or44OV44Kh44GL44Gp44GG44GLXHJcbiAgICAgICAgICogQHBhcmFtIG1hdHJpeDR4NCBNb2RlbC1WaWV3LVByb2plY3Rpb27ooYzliJdcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0dXBTaGFkZXJQcm9ncmFtKHJlbmRlcmVyOiBDdWJpc21SZW5kZXJlcl9XZWJHTCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZUlkOiBXZWJHTFRleHR1cmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleENvdW50OiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleEFycmF5OiBGbG9hdDMyQXJyYXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4QXJyYXk6IFVpbnQxNkFycmF5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlckRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleDogV2ViR0xCdWZmZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1djogV2ViR0xCdWZmZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogV2ViR0xCdWZmZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JCbGVuZE1vZGU6IEN1YmlzbUJsZW5kTW9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUHJlbXVsdGlwbGllZEFscGhhOiBib29sZWFuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXg0eDQ6IEN1YmlzbU1hdHJpeDQ0KTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYoIWlzUHJlbXVsdGlwbGllZEFscGhhKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Mb2dFcnJvcihcIk5vUHJlbXVsdGlwbGllZEFscGhhIGlzIG5vdCBhbGxvd2VkXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLl9zaGFkZXJTZXRzLmdldFNpemUoKSA9PSAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlU2hhZGVycygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBCbGVuZGluZ1xyXG4gICAgICAgICAgICBsZXQgU1JDX0NPTE9SOiBudW1iZXI7XHJcbiAgICAgICAgICAgIGxldCBEU1RfQ09MT1I6IG51bWJlcjtcclxuICAgICAgICAgICAgbGV0IFNSQ19BTFBIQTogbnVtYmVyO1xyXG4gICAgICAgICAgICBsZXQgRFNUX0FMUEhBOiBudW1iZXI7XHJcblxyXG4gICAgICAgICAgICBpZihyZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCkgIT0gbnVsbCkgIC8vIOODnuOCueOCr+eUn+aIkOaZglxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2hhZGVyU2V0OiBDdWJpc21TaGFkZXJTZXQgPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFNoYWRlck5hbWVzLlNoYWRlck5hbWVzX1NldHVwTWFzayk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0oc2hhZGVyU2V0LnNoYWRlclByb2dyYW0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOODhuOCr+OCueODgeODo+ioreWumlxyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRleHR1cmVJZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnVuaWZvcm0xaShzaGFkZXJTZXQuc2FtcGxlclRleHR1cmUwTG9jYXRpb24sIDApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOmggueCuemFjeWIl+OBruioreWumihWQk8pXHJcbiAgICAgICAgICAgICAgICBpZihidWZmZXJEYXRhLnZlcnRleCA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlckRhdGEudmVydGV4ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS52ZXJ0ZXgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0ZXhBcnJheSwgdGhpcy5nbC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoc2hhZGVyU2V0LmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24sIDIsIHRoaXMuZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PpoILngrnjga7oqK3lrppcclxuICAgICAgICAgICAgICAgIGlmKGJ1ZmZlckRhdGEudXYgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXJEYXRhLnV2ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS51dik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHV2QXJyYXksIHRoaXMuZ2wuRFlOQU1JQ19EUkFXKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoc2hhZGVyU2V0LmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHNoYWRlclNldC5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uLCAyLCB0aGlzLmdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g44OB44Oj44Oz44ON44OrXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFubmVsTm86IG51bWJlciA9IHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKS5fbGF5b3V0Q2hhbm5lbE5vO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbG9yQ2hhbm5lbDogQ3ViaXNtVGV4dHVyZUNvbG9yID0gcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpLmdldENsaXBwaW5nTWFuYWdlcigpLmdldENoYW5uZWxGbGFnQXNDb2xvcihjaGFubmVsTm8pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC51bmlmb3JtNGYoc2hhZGVyU2V0LnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uLCBjb2xvckNoYW5uZWwuUiwgY29sb3JDaGFubmVsLkcsIGNvbG9yQ2hhbm5lbC5CLCBjb2xvckNoYW5uZWwuQSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC51bmlmb3JtTWF0cml4NGZ2KHNoYWRlclNldC51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uLCBmYWxzZSwgcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpLl9tYXRyaXhGb3JNYXNrLmdldEFycmF5KCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCByZWN0OiBjc21SZWN0ID0gcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpLl9sYXlvdXRCb3VuZHM7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXHJcbiAgICAgICAgICAgICAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICByZWN0LnggKiAyLjAgLSAxLjAsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjdC55ICogMi4wIC0gMS4wLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlY3QuZ2V0UmlnaHQoKSAqIDIuMCAtIDEuMCxcclxuICAgICAgICAgICAgICAgICAgICByZWN0LmdldEJvdHRvbSgpICogMi4wIC0gMS4wXHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIFNSQ19DT0xPUiA9IHRoaXMuZ2wuWkVSTztcclxuICAgICAgICAgICAgICAgIERTVF9DT0xPUiA9IHRoaXMuZ2wuT05FX01JTlVTX1NSQ19DT0xPUjtcclxuICAgICAgICAgICAgICAgIFNSQ19BTFBIQSA9IHRoaXMuZ2wuWkVSTztcclxuICAgICAgICAgICAgICAgIERTVF9BTFBIQSA9IHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIC8vIOODnuOCueOCr+eUn+aIkOS7peWkluOBruWgtOWQiFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXNrZWQ6IGJvb2xlYW4gPSByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KCkgIT0gbnVsbDsgLy8g44GT44Gu5o+P55S744Kq44OW44K444Kn44Kv44OI44Gv44Oe44K544Kv5a++6LGh44GLXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQ6IG51bWJlciA9IChtYXNrZWQgPyAxIDogMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHNoYWRlclNldDogQ3ViaXNtU2hhZGVyU2V0ID0gbmV3IEN1YmlzbVNoYWRlclNldCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaChjb2xvckJsZW5kTW9kZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTm9ybWFsOlxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRlclNldCA9IHRoaXMuX3NoYWRlclNldHMuYXQoU2hhZGVyTmFtZXMuU2hhZGVyTmFtZXNfTm9ybWFsUHJlbXVsdGlwbGllZEFscGhhICsgb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU1JDX0NPTE9SID0gdGhpcy5nbC5PTkU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERTVF9DT0xPUiA9IHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5PTkU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERTVF9BTFBIQSA9IHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhZGVyU2V0ID0gdGhpcy5fc2hhZGVyU2V0cy5hdChTaGFkZXJOYW1lcy5TaGFkZXJOYW1lc19BZGRQcmVtdWx0aXBsaWVkQWxwaGEgKyBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTUkNfQ09MT1IgPSB0aGlzLmdsLk9ORTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNSQ19BTFBIQSA9IHRoaXMuZ2wuWkVSTztcclxuICAgICAgICAgICAgICAgICAgICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9NdWx0aXBsaWNhdGl2ZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhZGVyU2V0ID0gdGhpcy5fc2hhZGVyU2V0cy5hdChTaGFkZXJOYW1lcy5TaGFkZXJOYW1lc19NdWx0UHJlbXVsdGlwbGllZEFscGhhICsgb2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU1JDX0NPTE9SID0gdGhpcy5nbC5EU1RfQ09MT1I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERTVF9DT0xPUiA9IHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5aRVJPO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEU1RfQUxQSEEgPSB0aGlzLmdsLk9ORTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC51c2VQcm9ncmFtKHNoYWRlclNldC5zaGFkZXJQcm9ncmFtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDpoILngrnphY3liJfjga7oqK3lrppcclxuICAgICAgICAgICAgICAgIGlmKGJ1ZmZlckRhdGEudmVydGV4ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyRGF0YS52ZXJ0ZXggPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXJEYXRhLnZlcnRleCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHZlcnRleEFycmF5LCB0aGlzLmdsLkRZTkFNSUNfRFJBVyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHNoYWRlclNldC5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiwgMiwgdGhpcy5nbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOODhuOCr+OCueODgeODo+mggueCueOBruioreWumlxyXG4gICAgICAgICAgICAgICAgaWYoYnVmZmVyRGF0YS51diA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlckRhdGEudXYgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXJEYXRhLnV2KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YSh0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdXZBcnJheSwgdGhpcy5nbC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoc2hhZGVyU2V0LmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24sIDIsIHRoaXMuZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihtYXNrZWQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZXg6IFdlYkdMVGV4dHVyZSA9IHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKS5nZXRDbGlwcGluZ01hbmFnZXIoKS5nZXRDb2xvckJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wudW5pZm9ybTFpKHNoYWRlclNldC5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiwgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZpZXfluqfmqJnjgpJDbGlwcGluZ0NvbnRleHTjga7luqfmqJnjgavlpInmj5vjgZnjgovjgZ/jgoHjga7ooYzliJfjgpLoqK3lrppcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoc2hhZGVyU2V0LnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24sIGZhbHNlLHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKS5fbWF0cml4Rm9yRHJhdy5nZXRBcnJheSgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5L2/55So44GZ44KL44Kr44Op44O844OB44Oj44Oz44ON44Or44KS6Kit5a6aXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhbm5lbE5vOiBudW1iZXIgPSByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KCkuX2xheW91dENoYW5uZWxObztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29sb3JDaGFubmVsOiBDdWJpc21UZXh0dXJlQ29sb3IgPSByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KCkuZ2V0Q2xpcHBpbmdNYW5hZ2VyKCkuZ2V0Q2hhbm5lbEZsYWdBc0NvbG9yKGNoYW5uZWxObyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC51bmlmb3JtNGYoc2hhZGVyU2V0LnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uLCBjb2xvckNoYW5uZWwuUiwgY29sb3JDaGFubmVsLkcsIGNvbG9yQ2hhbm5lbC5CLCBjb2xvckNoYW5uZWwuQSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g44OG44Kv44K544OB44Oj6Kit5a6aXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZUlkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wudW5pZm9ybTFpKHNoYWRlclNldC5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiwgMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g5bqn5qiZ5aSJ5o+bXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoc2hhZGVyU2V0LnVuaWZvcm1NYXRyaXhMb2NhdGlvbiwgZmFsc2UsIG1hdHJpeDR4NC5nZXRBcnJheSgpKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC51bmlmb3JtNGYoc2hhZGVyU2V0LnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiwgYmFzZUNvbG9yLlIsIGJhc2VDb2xvci5HLCBiYXNlQ29sb3IuQiwgYmFzZUNvbG9yLkEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJQk/jgpLkvZzmiJDjgZfjgIHjg4fjg7zjgr/jgpLou6LpgIFcclxuICAgICAgICAgICAgaWYoYnVmZmVyRGF0YS5pbmRleCA9PSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXJEYXRhLmluZGV4ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS5pbmRleCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YSh0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpbmRleEFycmF5LCB0aGlzLmdsLkRZTkFNSUNfRFJBVyk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2wuYmxlbmRGdW5jU2VwYXJhdGUoU1JDX0NPTE9SLCBEU1RfQ09MT1IsIFNSQ19BTFBIQSwgRFNUX0FMUEhBKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOCkuino+aUvuOBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyByZWxlYXNlU2hhZGVyUHJvZ3JhbSgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLl9zaGFkZXJTZXRzLmdldFNpemUoKTsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmRlbGV0ZVByb2dyYW0odGhpcy5fc2hhZGVyU2V0cy5hdChpKS5zaGFkZXJQcm9ncmFtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoaSkuc2hhZGVyUHJvZ3JhbSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLnNldChpLCB2b2lkIDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5zZXQoaSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOCkuWIneacn+WMluOBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSB2ZXJ0U2hhZGVyU3JjIOmggueCueOCt+OCp+ODvOODgOOBruOCveODvOOCuVxyXG4gICAgICAgICAqIEBwYXJhbSBmcmFnU2hhZGVyU3JjIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOOBruOCveODvOOCuVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZW5lcmF0ZVNoYWRlcnMoKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgc2hhZGVyQ291bnQ7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5wdXNoQmFjayhuZXcgQ3ViaXNtU2hhZGVyU2V0KCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0gPSB0aGlzLmxvYWRTaGFkZXJQcm9ncmFtKHZlcnRleFNoYWRlclNyY1NldHVwTWFzaywgZnJhZ21lbnRTaGFkZXJTcmNzZXR1cE1hc2spO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbSh2ZXJ0ZXhTaGFkZXJTcmMsIGZyYWdtZW50U2hhZGVyU3JjUHJlbXVsdGlwbGllZEFscGhhKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbSh2ZXJ0ZXhTaGFkZXJTcmNNYXNrZWQsIGZyYWdtZW50U2hhZGVyU3JjTWFza1ByZW11bHRpcGxpZWRBbHBoYSk7XHJcblxyXG4gICAgICAgICAgICAvLyDliqDnrpfjgoLpgJrluLjjgajlkIzjgZjjgrfjgqfjg7zjg4Djg7zjgpLliKnnlKjjgZnjgotcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW07XHJcblxyXG4gICAgICAgICAgICAvLyDkuZfnrpfjgoLpgJrluLjjgajlkIzjgZjjgrfjgqfjg7zjg4Djg7zjgpLliKnnlKjjgZnjgotcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW07XHJcblxyXG4gICAgICAgICAgICAvLyBTZXR1cE1hc2tcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sIFwiYV9wb3NpdGlvblwiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sIFwiYV90ZXhDb29yZFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSwgXCJzX3RleHR1cmUwXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sIFwidV9jbGlwTWF0cml4XCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLCBcInVfY2hhbm5lbEZsYWdcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLCBcInVfYmFzZUNvbG9yXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8g6YCa5bi477yIUHJlbXVsdGlwbGllZEFscGhh77yJXHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLCBcImFfcG9zaXRpb25cIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLCBcImFfdGV4Q29vcmRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sIFwic190ZXh0dXJlMFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sIFwidV9tYXRyaXhcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLCBcInVfYmFzZUNvbG9yXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8g6YCa5bi477yI44Kv44Oq44OD44OU44Oz44Kw44CBUHJlbXVsdGlwbGllZEFscGhh77yJXHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLCBcImFfcG9zaXRpb25cIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLCBcImFfdGV4Q29vcmRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sIFwic190ZXh0dXJlMFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zYW1wbGVyVGV4dHVyZTFMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSwgXCJzX3RleHR1cmUxXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSwgXCJ1X21hdHJpeFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLCBcInVfY2xpcE1hdHJpeFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSwgXCJ1X2NoYW5uZWxGbGFnXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSwgXCJ1X2Jhc2VDb2xvclwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOWKoOeul++8iFByZW11bHRpcGxpZWRBbHBoYe+8iVxyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSwgXCJhX3Bvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSwgXCJhX3RleENvb3JkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLCBcInNfdGV4dHVyZTBcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLCBcInVfbWF0cml4XCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSwgXCJ1X2Jhc2VDb2xvclwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOWKoOeul++8iOOCr+ODquODg+ODlOODs+OCsOOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSwgXCJhX3Bvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSwgXCJhX3RleENvb3JkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLCBcInNfdGV4dHVyZTBcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2FtcGxlclRleHR1cmUxTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sIFwic190ZXh0dXJlMVwiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sIFwidV9tYXRyaXhcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSwgXCJ1X2NsaXBNYXRyaXhcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sIFwidV9jaGFubmVsRmxhZ1wiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sIFwidV9iYXNlQ29sb3JcIik7XHJcblxyXG4gICAgICAgICAgICAvLyDkuZfnrpfvvIhQcmVtdWx0aXBsaWVkQWxwaGHvvIlcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sIFwiYV9wb3NpdGlvblwiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sIFwiYV90ZXhDb29yZFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSwgXCJzX3RleHR1cmUwXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnVuaWZvcm1NYXRyaXhMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSwgXCJ1X21hdHJpeFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sIFwidV9iYXNlQ29sb3JcIik7XHJcblxyXG4gICAgICAgICAgICAvLyDkuZfnrpfvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgIFQcmVtdWx0aXBsaWVkQWxwaGHvvIlcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sIFwiYV9wb3NpdGlvblwiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID0gdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sIFwiYV90ZXhDb29yZFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSwgXCJzX3RleHR1cmUwXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLCBcInNfdGV4dHVyZTFcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLCBcInVfbWF0cml4XCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sIFwidV9jbGlwTWF0cml4XCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLCBcInVfY2hhbm5lbEZsYWdcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLCBcInVfYmFzZUNvbG9yXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44K344Kn44O844OA44OX44Ot44Kw44Op44Og44KS44Ot44O844OJ44GX44Gm44Ki44OJ44Os44K544KS6L+U44GZXHJcbiAgICAgICAgICogQHBhcmFtIHZlcnRleFNoYWRlclNvdXJjZSAgICDpoILngrnjgrfjgqfjg7zjg4Djga7jgr3jg7zjgrlcclxuICAgICAgICAgKiBAcGFyYW0gZnJhZ21lbnRTaGFkZXJTb3VyY2UgIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOOBruOCveODvOOCuVxyXG4gICAgICAgICAqIEByZXR1cm4g44K344Kn44O844OA44OX44Ot44Kw44Op44Og44Gu44Ki44OJ44Os44K5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGxvYWRTaGFkZXJQcm9ncmFtKHZlcnRleFNoYWRlclNvdXJjZTogc3RyaW5nLCBmcmFnbWVudFNoYWRlclNvdXJjZTogc3RyaW5nKTogV2ViR0xQcm9ncmFtXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgU2hhZGVyIFByb2dyYW1cclxuICAgICAgICAgICAgbGV0IHNoYWRlclByb2dyYW06IFdlYkdMUHJvZ3JhbSA9IHRoaXMuZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHZlcnRTaGFkZXIgPSB0aGlzLmNvbXBpbGVTaGFkZXJTb3VyY2UodGhpcy5nbC5WRVJURVhfU0hBREVSLCB2ZXJ0ZXhTaGFkZXJTb3VyY2UpO1xyXG5cclxuICAgICAgICAgICAgaWYoIXZlcnRTaGFkZXIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIEN1YmlzbUxvZ0Vycm9yKFwiVmVydGV4IHNoYWRlciBjb21waWxlIGVycm9yIVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgZnJhZ1NoYWRlciA9IHRoaXMuY29tcGlsZVNoYWRlclNvdXJjZSh0aGlzLmdsLkZSQUdNRU5UX1NIQURFUiwgZnJhZ21lbnRTaGFkZXJTb3VyY2UpO1xyXG4gICAgICAgICAgICBpZighZnJhZ1NoYWRlcilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ3ViaXNtTG9nRXJyb3IoXCJWZXJ0ZXggc2hhZGVyIGNvbXBpbGUgZXJyb3IhXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEF0dGFjaCB2ZXJ0ZXggc2hhZGVyIHRvIHByb2dyYW1cclxuICAgICAgICAgICAgdGhpcy5nbC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgdmVydFNoYWRlcik7XHJcblxyXG4gICAgICAgICAgICAvLyBBdHRhY2ggZnJhZ21lbnQgc2hhZGVyIHRvIHByb2dyYW1cclxuICAgICAgICAgICAgdGhpcy5nbC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgZnJhZ1NoYWRlcik7XHJcblxyXG4gICAgICAgICAgICAvLyBsaW5rIHByb2dyYW1cclxuICAgICAgICAgICAgdGhpcy5nbC5saW5rUHJvZ3JhbShzaGFkZXJQcm9ncmFtKVxyXG4gICAgICAgICAgICBsZXQgbGlua1N0YXR1cyA9IHRoaXMuZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihzaGFkZXJQcm9ncmFtLCB0aGlzLmdsLkxJTktfU1RBVFVTKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIOODquODs+OCr+OBq+WkseaVl+OBl+OBn+OCieOCt+OCp+ODvOODgOODvOOCkuWJiumZpFxyXG4gICAgICAgICAgICBpZighbGlua1N0YXR1cylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ3ViaXNtTG9nRXJyb3IoXCJGYWlsZWQgdG8gbGluayBwcm9ncmFtOiB7MH1cIiwgc2hhZGVyUHJvZ3JhbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5kZWxldGVTaGFkZXIodmVydFNoYWRlcik7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0U2hhZGVyID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmRlbGV0ZVNoYWRlcihmcmFnU2hhZGVyKTtcclxuICAgICAgICAgICAgICAgIGZyYWdTaGFkZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHNoYWRlclByb2dyYW0pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC5kZWxldGVQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRlclByb2dyYW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZWxlYXNlIHZlcnRleCBhbmQgZnJhZ21lbnQgc2hhZGVycy5cclxuICAgICAgICAgICAgdGhpcy5nbC5kZWxldGVTaGFkZXIodmVydFNoYWRlcik7XHJcbiAgICAgICAgICAgIHRoaXMuZ2wuZGVsZXRlU2hhZGVyKGZyYWdTaGFkZXIpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNoYWRlclByb2dyYW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLjgrPjg7Pjg5HjgqTjg6vjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gc2hhZGVyVHlwZSDjgrfjgqfjg7zjg4Djgr/jgqTjg5coVmVydGV4L0ZyYWdtZW50KVxyXG4gICAgICAgICAqIEBwYXJhbSBzaGFkZXJTb3VyY2Ug44K344Kn44O844OA44K944O844K544Kz44O844OJXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHJldHVybiDjgrPjg7Pjg5HjgqTjg6vjgZXjgozjgZ/jgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6BcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29tcGlsZVNoYWRlclNvdXJjZShzaGFkZXJUeXBlOiBHTGVudW0sIHNoYWRlclNvdXJjZTogc3RyaW5nKTogV2ViR0xQcm9ncmFtXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2U6IHN0cmluZyA9IHNoYWRlclNvdXJjZTtcclxuXHJcbiAgICAgICAgICAgIGxldCBzaGFkZXI6IFdlYkdMUHJvZ3JhbSA9IHRoaXMuZ2wuY3JlYXRlU2hhZGVyKHNoYWRlclR5cGUpO1xyXG4gICAgICAgICAgICB0aGlzLmdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoIXNoYWRlcilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxvZzogc3RyaW5nID0gdGhpcy5nbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcik7XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Mb2dFcnJvcihcIlNoYWRlciBjb21waWxlIGxvZzogezB9IFwiLCBsb2cpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgc3RhdHVzOiBhbnkgPSB0aGlzLmdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIHRoaXMuZ2wuQ09NUElMRV9TVEFUVVMpO1xyXG4gICAgICAgICAgICBpZighc3RhdHVzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzaGFkZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc2V0R2woZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2wgPSBnbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF9zaGFkZXJTZXRzOiBjc21WZWN0b3I8Q3ViaXNtU2hhZGVyU2V0PjsgLy8g44Ot44O844OJ44GX44Gf44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS5L+d5oyB44GZ44KL5aSJ5pWwXHJcbiAgICAgICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDsgIC8vIHdlYmds44Kz44Oz44OG44Kt44K544OIXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDdWJpc21TaGFkZXJfV2ViR0zjga7jgqTjg7Pjg4rjg7zjgq/jg6njgrlcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEN1YmlzbVNoYWRlclNldFxyXG4gICAge1xyXG4gICAgICAgIHNoYWRlclByb2dyYW06IFdlYkdMUHJvZ3JhbTsgICAgICAgICAgICAgICAgICAgICAgICAgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gu44Ki44OJ44Os44K5XHJcbiAgICAgICAgYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbjogR0x1aW50OyAgICAgICAgICAgICAgICAgIC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFBvc2l0aW9u77yJXHJcbiAgICAgICAgYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbjogR0x1aW50OyAgICAgICAgICAgICAgICAgIC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFRleENvb3Jk77yJXHJcbiAgICAgICAgdW5pZm9ybU1hdHJpeExvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgICAgICAgIC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iE1hdHJpeO+8iVxyXG4gICAgICAgIHVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAgICAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhDbGlwTWF0cml477yJXHJcbiAgICAgICAgc2FtcGxlclRleHR1cmUwTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAgICAgIC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFRleHR1cmUw77yJXHJcbiAgICAgICAgc2FtcGxlclRleHR1cmUxTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAgICAgIC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFRleHR1cmUx77yJXHJcbiAgICAgICAgdW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgICAgIC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iEJhc2VDb2xvcu+8iVxyXG4gICAgICAgIHVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgICAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhDaGFubmVsRmxhZ++8iVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBlbnVtIFNoYWRlck5hbWVzXHJcbiAgICB7XHJcbiAgICAgICAgLy8gU2V0dXBNYXNrXHJcbiAgICAgICAgU2hhZGVyTmFtZXNfU2V0dXBNYXNrLFxyXG5cclxuICAgICAgICAvLyBOb3JtYWxcclxuICAgICAgICBTaGFkZXJOYW1lc19Ob3JtYWxQcmVtdWx0aXBsaWVkQWxwaGEsXHJcbiAgICAgICAgU2hhZGVyTmFtZXNfTm9ybWFsTWFza2VkUHJlbXVsdGlwbGllZEFscGhhLFxyXG5cclxuICAgICAgICAvLyBBZGRcclxuICAgICAgICBTaGFkZXJOYW1lc19BZGRQcmVtdWx0aXBsaWVkQWxwaGEsXHJcbiAgICAgICAgU2hhZGVyTmFtZXNfQWRkTWFza2VkUHJlbXVsdGlwbGVkQWxwaGEsXHJcblxyXG4gICAgICAgIC8vIE11bHRcclxuICAgICAgICBTaGFkZXJOYW1lc19NdWx0UHJlbXVsdGlwbGllZEFscGhhLFxyXG4gICAgICAgIFNoYWRlck5hbWVzX011bHRNYXNrZWRQcmVtdWx0aXBsaWVkQWxwaGEsXHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydCBjb25zdCB2ZXJ0ZXhTaGFkZXJTcmNTZXR1cE1hc2sgPVxyXG4gICAgICAgIFwiYXR0cmlidXRlIHZlYzQgICAgIGFfcG9zaXRpb247XCIgK1xyXG4gICAgICAgIFwiYXR0cmlidXRlIHZlYzIgICAgIGFfdGV4Q29vcmQ7XCIgK1xyXG4gICAgICAgIFwidmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7XCIgK1xyXG4gICAgICAgIFwidmFyeWluZyB2ZWM0ICAgICAgIHZfbXlQb3M7XCIgK1xyXG4gICAgICAgIFwidW5pZm9ybSBtYXQ0ICAgICAgIHVfY2xpcE1hdHJpeDtcIiArXHJcbiAgICAgICAgXCJ1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMDtcIiArXHJcbiAgICAgICAgXCJ2b2lkIG1haW4oKVwiICtcclxuICAgICAgICBcIntcIiArXHJcbiAgICAgICAgXCIgICBnbF9Qb3NpdGlvbiA9IHVfY2xpcE1hdHJpeCAqIGFfcG9zaXRpb247XCIgK1xyXG4gICAgICAgIFwiICAgdl9teVBvcyA9IHVfY2xpcE1hdHJpeCAqIGFfcG9zaXRpb247XCIgK1xyXG4gICAgICAgIFwiICAgdl90ZXhDb29yZCA9IGFfdGV4Q29vcmQ7XCIgK1xyXG4gICAgICAgIFwiICAgdl90ZXhDb29yZC55ID0gMS4wIC0gdl90ZXhDb29yZC55O1wiICtcclxuICAgICAgICBcIn1cIjtcclxuICAgIGV4cG9ydCBjb25zdCBmcmFnbWVudFNoYWRlclNyY3NldHVwTWFzayA9XHJcbiAgICAgICAgXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcIiArXHJcbiAgICAgICAgXCJ2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDtcIiArXHJcbiAgICAgICAgXCJ2YXJ5aW5nIHZlYzQgICAgICAgdl9teVBvcztcIiArXHJcbiAgICAgICAgXCJ1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3I7XCIgK1xyXG4gICAgICAgIFwidW5pZm9ybSB2ZWM0ICAgICAgIHVfY2hhbm5lbEZsYWc7XCIgK1xyXG4gICAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTA7XCIgK1xyXG4gICAgICAgIFwidm9pZCBtYWluKClcIiArXHJcbiAgICAgICAgXCJ7XCIgK1xyXG4gICAgICAgIFwiICAgZmxvYXQgaXNJbnNpZGUgPSBcIiArXHJcbiAgICAgICAgXCIgICAgICAgc3RlcCh1X2Jhc2VDb2xvci54LCB2X215UG9zLngvdl9teVBvcy53KVwiICtcclxuICAgICAgICBcIiAgICAgICAqIHN0ZXAodV9iYXNlQ29sb3IueSwgdl9teVBvcy55L3ZfbXlQb3MudylcIiArXHJcbiAgICAgICAgXCIgICAgICAgKiBzdGVwKHZfbXlQb3MueC92X215UG9zLncsIHVfYmFzZUNvbG9yLnopXCIgK1xyXG4gICAgICAgIFwiICAgICAgICogc3RlcCh2X215UG9zLnkvdl9teVBvcy53LCB1X2Jhc2VDb2xvci53KTtcIiArXHJcbiAgICAgICAgXCIgICBnbF9GcmFnQ29sb3IgPSB1X2NoYW5uZWxGbGFnICogdGV4dHVyZTJEKHNfdGV4dHVyZTAsIHZfdGV4Q29vcmQpLmEgKiBpc0luc2lkZTtcIiArXHJcbiAgICAgICAgXCJ9XCI7XHJcblxyXG4gICAgLy8tLS0tLSDjg5Djg7zjg4bjg4Pjgq/jgrnjgrfjgqfjg7zjg4Djg5fjg63jgrDjg6njg6AgLS0tLS1cclxuICAgIC8vIE5vcm1hbCAmIEFkZCAmIE11bHQg5YWx6YCaXHJcbiAgICBleHBvcnQgY29uc3QgdmVydGV4U2hhZGVyU3JjID1cclxuICAgICAgICBcImF0dHJpYnV0ZSB2ZWM0ICAgICBhX3Bvc2l0aW9uO1wiICsgLy92LnZlcnRleFxyXG4gICAgICAgIFwiYXR0cmlidXRlIHZlYzIgICAgIGFfdGV4Q29vcmQ7XCIgKyAvL3YudGV4Y29vcmRcclxuICAgICAgICBcInZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkO1wiICsgLy92MmYudGV4Y29vcmRcclxuICAgICAgICBcInVuaWZvcm0gbWF0NCAgICAgICB1X21hdHJpeDtcIiArXHJcbiAgICAgICAgXCJ1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMDtcIiArXHJcbiAgICAgICAgXCJ2b2lkIG1haW4oKVwiICtcclxuICAgICAgICBcIntcIiArXHJcbiAgICAgICAgXCIgICBnbF9Qb3NpdGlvbiA9IHVfbWF0cml4ICogYV9wb3NpdGlvbjtcIiArXHJcbiAgICAgICAgXCIgICB2X3RleENvb3JkID0gYV90ZXhDb29yZDtcIiArXHJcbiAgICAgICAgXCIgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7XCIgK1xyXG4gICAgICAgIFwifVwiO1xyXG5cclxuICAgIC8vIE5vcm1hbCAmIEFkZCAmIE11bHQg5YWx6YCa77yI44Kv44Oq44OD44OU44Oz44Kw44GV44KM44Gf44KC44Gu44Gu5o+P55S755So77yJXHJcbiAgICBleHBvcnQgY29uc3QgdmVydGV4U2hhZGVyU3JjTWFza2VkID1cclxuICAgICAgICBcImF0dHJpYnV0ZSB2ZWM0ICAgICBhX3Bvc2l0aW9uO1wiICtcclxuICAgICAgICBcImF0dHJpYnV0ZSB2ZWMyICAgICBhX3RleENvb3JkO1wiICtcclxuICAgICAgICBcInZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkO1wiICtcclxuICAgICAgICBcInZhcnlpbmcgdmVjNCAgICAgICB2X2NsaXBQb3M7XCIgK1xyXG4gICAgICAgIFwidW5pZm9ybSBtYXQ0ICAgICAgIHVfbWF0cml4O1wiICtcclxuICAgICAgICBcInVuaWZvcm0gbWF0NCAgICAgICB1X2NsaXBNYXRyaXg7XCIgK1xyXG4gICAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTA7XCIgK1xyXG4gICAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTE7XCIgK1xyXG4gICAgICAgIFwidm9pZCBtYWluKClcIiArXHJcbiAgICAgICAgXCJ7XCIgK1xyXG4gICAgICAgIFwiICAgZ2xfUG9zaXRpb24gPSB1X21hdHJpeCAqIGFfcG9zaXRpb247XCIgK1xyXG4gICAgICAgIFwiICAgdl9jbGlwUG9zID0gdV9jbGlwTWF0cml4ICogYV9wb3NpdGlvbjtcIiArXHJcbiAgICAgICAgXCIgICB2X3RleENvb3JkID0gYV90ZXhDb29yZDtcIiArXHJcbiAgICAgICAgXCIgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7XCIgK1xyXG4gICAgICAgIFwifVwiO1xyXG5cclxuICAgIC8vLS0tLS0g44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44OX44Ot44Kw44Op44OgIC0tLS0tXHJcbiAgICAvLyBOb3JtYWwgJiBBZGQgJiBNdWx0IOWFsemAmiDvvIhQcmVtdWx0aXBsaWVkQWxwaGHvvIlcclxuICAgIGV4cG9ydCBjb25zdCBmcmFnbWVudFNoYWRlclNyY1ByZW11bHRpcGxpZWRBbHBoYSA9XHJcbiAgICAgICAgXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcIiArXHJcbiAgICAgICAgXCJ2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDtcIiArIC8vdjJmLnRleGNvb3JkXHJcbiAgICAgICAgXCJ1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3I7XCIgK1xyXG4gICAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTA7XCIgKyAvL19NYWluVGV4XHJcbiAgICAgICAgXCJ2b2lkIG1haW4oKVwiICtcclxuICAgICAgICBcIntcIiArXHJcbiAgICAgICAgXCIgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoc190ZXh0dXJlMCAsIHZfdGV4Q29vcmQpICogdV9iYXNlQ29sb3I7XCIgK1xyXG4gICAgICAgIFwifVwiO1xyXG5cclxuICAgIC8vIE5vcm1hbCDvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjgZXjgozjgZ/jgoLjga7jga7mj4/nlLvnlKjjgIFQcmVtdWx0aXBsaWVkQWxwaGHlhbznlKjvvIlcclxuICAgIGV4cG9ydCBjb25zdCBmcmFnbWVudFNoYWRlclNyY01hc2tQcmVtdWx0aXBsaWVkQWxwaGEgPVxyXG4gICAgICAgIFwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XCIgK1xyXG4gICAgICAgIFwidmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7XCIgK1xyXG4gICAgICAgIFwidmFyeWluZyB2ZWM0ICAgICAgIHZfY2xpcFBvcztcIiArXHJcbiAgICAgICAgXCJ1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3I7XCIgK1xyXG4gICAgICAgIFwidW5pZm9ybSB2ZWM0ICAgICAgIHVfY2hhbm5lbEZsYWc7XCIgK1xyXG4gICAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTA7XCIgK1xyXG4gICAgICAgIFwidW5pZm9ybSBzYW1wbGVyMkQgIHNfdGV4dHVyZTE7XCIgK1xyXG4gICAgICAgIFwidm9pZCBtYWluKClcIiArXHJcbiAgICAgICAgXCJ7XCIgK1xyXG4gICAgICAgIFwiICAgdmVjNCBjb2xfZm9ybWFzayA9IHRleHR1cmUyRChzX3RleHR1cmUwICwgdl90ZXhDb29yZCkgKiB1X2Jhc2VDb2xvcjtcIiArXHJcbiAgICAgICAgXCIgICB2ZWM0IGNsaXBNYXNrID0gKDEuMCAtIHRleHR1cmUyRChzX3RleHR1cmUxLCB2X2NsaXBQb3MueHkgLyB2X2NsaXBQb3MudykpICogdV9jaGFubmVsRmxhZztcIiArXHJcbiAgICAgICAgXCIgICBmbG9hdCBtYXNrVmFsID0gY2xpcE1hc2suciArIGNsaXBNYXNrLmcgKyBjbGlwTWFzay5iICsgY2xpcE1hc2suYTtcIiArXHJcbiAgICAgICAgXCIgICBjb2xfZm9ybWFzayA9IGNvbF9mb3JtYXNrICogbWFza1ZhbDtcIiArXHJcbiAgICAgICAgXCIgICBnbF9GcmFnQ29sb3IgPSBjb2xfZm9ybWFzaztcIiArXHJcbiAgICAgICAgXCJ9XCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXZWJHTOeUqOOBruaPj+eUu+WRveS7pOOCkuWun+ijheOBl+OBn+OCr+ODqeOCuVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtUmVuZGVyZXJfV2ViR0wgZXh0ZW5kcyBDdWJpc21SZW5kZXJlclxyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODrOODs+ODgOODqeOBruWIneacn+WMluWHpueQhuOCkuWun+ihjOOBmeOCi1xyXG4gICAgICAgICAqIOW8leaVsOOBq+a4oeOBl+OBn+ODouODh+ODq+OBi+OCieODrOODs+ODgOODqeOBruWIneacn+WMluWHpueQhuOBq+W/heimgeOBquaDheWgseOCkuWPluOCiuWHuuOBmeOBk+OBqOOBjOOBp+OBjeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaW5pdGlhbGl6ZShtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihtb2RlbC5pc1VzaW5nTWFza2luZygpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSBuZXcgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMKCk7IC8vIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODu+ODkOODg+ODleOCoeWJjeWHpueQhuaWueW8j+OCkuWIneacn+WMllxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmluaXRpYWxpemUoXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVDb3VudCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlTWFza3MoKSxcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZU1hc2tDb3VudHMoKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3QucmVzaXplKG1vZGVsLmdldERyYXdhYmxlQ291bnQoKSwgMCk7XHJcblxyXG4gICAgICAgICAgICBzdXBlci5pbml0aWFsaXplKG1vZGVsKTsgLy8g6Kaq44Kv44Op44K544Gu5Yem55CG44KS5ZG844G2XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXZWJHTOODhuOCr+OCueODgeODo+OBruODkOOCpOODs+ODieWHpueQhlxyXG4gICAgICAgICAqIEN1YmlzbVJlbmRlcmVy44Gr44OG44Kv44K544OB44Oj44KS6Kit5a6a44GX44CBQ3ViaXNtUmVuZGVyZXLlhoXjgafjgZ3jga7nlLvlg4/jgpLlj4LnhafjgZnjgovjgZ/jgoHjga5JbmRleOWApOOCkuaIu+OCiuWApOOBqOOBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBtb2RlbFRleHR1cmVObyDjgrvjg4Pjg4jjgZnjgovjg6Ljg4fjg6vjg4bjgq/jgrnjg4Hjg6Pjga7nlarlj7dcclxuICAgICAgICAgKiBAcGFyYW0gZ2xUZXh0dXJlTm8gV2ViR0zjg4bjgq/jgrnjg4Hjg6Pjga7nlarlj7dcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYmluZFRleHR1cmUobW9kZWxUZXh0dXJlTm86IG51bWJlciwgZ2xUZXh0dXJlOiBXZWJHTFRleHR1cmUpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlcy5zZXRWYWx1ZShtb2RlbFRleHR1cmVObywgZ2xUZXh0dXJlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdlYkdM44Gr44OQ44Kk44Oz44OJ44GV44KM44Gf44OG44Kv44K544OB44Oj44Gu44Oq44K544OI44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgrnjg4hcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0QmluZGVkVGV4dHVyZXMoKTogY3NtTWFwPG51bWJlciwgV2ViR0xUZXh0dXJlPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K644KS6Kit5a6a44GZ44KLXHJcbiAgICAgICAgICog44Oe44K544Kv55So44GuRnJhbWVCdWZmZXLjgpLnoLTmo4TjgIHlho3kvZzmiJDjgZnjgovngrrlh6bnkIbjgrPjgrnjg4jjga/pq5jjgYRcclxuICAgICAgICAgKiBAcGFyYW0gc2l6ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZShzaXplOiBudW1iZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBGcmFtZUJ1ZmZlcuOBruOCteOCpOOCuuOCkuWkieabtOOBmeOCi+OBn+OCgeOBq+OCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOODu+WGjeS9nOaIkOOBmeOCi1xyXG4gICAgICAgICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIucmVsZWFzZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSBuZXcgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIuc2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZShzaXplKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5pbml0aWFsaXplKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlQ291bnQoKSxcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZU1hc2tzKCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVNYXNrQ291bnRzKClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG5ldyBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0woKTtcclxuICAgICAgICAgICAgdGhpcy5maXJzdERyYXcgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlcyA9IG5ldyBjc21NYXA8bnVtYmVyLCBudW1iZXI+KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0ID0gbmV3IGNzbVZlY3RvcjxudW1iZXI+KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlckRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0ZXg6IFdlYkdMQnVmZmVyID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIHV2OiBXZWJHTEJ1ZmZlciA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBpbmRleDogV2ViR0xCdWZmZXIgPSBudWxsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Plr77lv5zjg57jg4Pjg5fjga7lrrnph4/jgpLnorrkv53jgZfjgabjgYrjgY9cclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZXMucHJlcGFyZUNhcGFjaXR5KDMyLCB0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5yZWxlYXNlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IHZvaWQgMDtcclxuICAgICAgICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX2J1ZmZlckRhdGEudmVydGV4KTtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyRGF0YS52ZXJ0ZXggPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9idWZmZXJEYXRhLnV2KTtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyRGF0YS51diA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX2J1ZmZlckRhdGEuaW5kZXgpO1xyXG4gICAgICAgICAgICB0aGlzLl9idWZmZXJEYXRhLmluZGV4ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyRGF0YSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZTogY3NtbWFwLml0ZXJhdG9yPG51bWJlciwgV2ViR0xUZXh0dXJlPiA9IHRoaXMuX3RleHR1cmVzLmJlZ2luKCk7IGl0ZS5ub3RFcXVhbCh0aGlzLl90ZXh0dXJlcy5lbmQoKSk7IGl0ZS5wcmVJbmNyZW1lbnQoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5kZWxldGVUZXh0dXJlKGl0ZS5wdHIoKS5zZWNvbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3RleHR1cmVzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RleHR1cmVzID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+Wun+mam+OBruWHpueQhlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBkb0RyYXdNb2RlbCgpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLy0tLS0tLS0tLS0tLSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg7vjg5Djg4Pjg5XjgqHliY3lh6bnkIbmlrnlvI/jga7loLTlkIggLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX2NsaXBwaW5nTWFuYWdlciAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByZURyYXcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5zZXR1cENsaXBwaW5nQ29udGV4dCh0aGlzLmdldE1vZGVsKCksIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDkuIroqJjjgq/jg6rjg4Pjg5Tjg7PjgrDlh6bnkIblhoXjgafjgoLkuIDluqZQcmVEcmF344KS5ZG844G244Gu44Gn5rOo5oSPISFcclxuICAgICAgICAgICAgdGhpcy5wcmVEcmF3KCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkcmF3YWJsZUNvdW50OiBudW1iZXIgPSB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVDb3VudCgpO1xyXG4gICAgICAgICAgICBjb25zdCByZW5kZXJPcmRlcjogSW50MzJBcnJheSA9IHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVJlbmRlck9yZGVycygpO1xyXG5cclxuICAgICAgICAgICAgLy8g44Kk44Oz44OH44OD44Kv44K544KS5o+P55S76aCG44Gn44K944O844OIXHJcbiAgICAgICAgICAgIGZvcihsZXQgaTogbnVtYmVyID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3JkZXI6IG51bWJlciA9IHJlbmRlck9yZGVyW2ldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3Quc2V0KG9yZGVyLCBpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g5o+P55S7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaTogbnVtYmVyID0gMDsgaSA8IGRyYXdhYmxlQ291bnQ7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZHJhd2FibGVJbmRleDogbnVtYmVyID0gdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3QuYXQoaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRHJhd2FibGXjgYzooajnpLrnirbmhYvjgafjgarjgZHjgozjgbDlh6bnkIbjgpLjg5HjgrnjgZnjgotcclxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVEeW5hbWljRmxhZ0lzVmlzaWJsZShkcmF3YWJsZUluZGV4KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyhcclxuICAgICAgICAgICAgICAgICAgICAodGhpcy5fY2xpcHBpbmdNYW5hZ2VyICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgPyAodGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmdldENsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3KCkpLmF0KGRyYXdhYmxlSW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0SXNDdWxsaW5nKHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUN1bGxpbmcoZHJhd2FibGVJbmRleCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd01lc2goXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVGV4dHVyZUluZGljZXMoZHJhd2FibGVJbmRleCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGV4SW5kZXhDb3VudChkcmF3YWJsZUluZGV4KSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChkcmF3YWJsZUluZGV4KSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0ZXhJbmRpY2VzKGRyYXdhYmxlSW5kZXgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRpY2VzKGRyYXdhYmxlSW5kZXgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleFV2cyhkcmF3YWJsZUluZGV4KSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVPcGFjaXR5KGRyYXdhYmxlSW5kZXgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUJsZW5kTW9kZShkcmF3YWJsZUluZGV4KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogW+OCquODvOODkOODvOODqeOCpOODiV1cclxuICAgICAgICAgKiDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jvvIjjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvInjgpLmj4/nlLvjgZnjgovjgIJcclxuICAgICAgICAgKiDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjgajjg4bjgq/jgrnjg4Hjg6Pnlarlj7fjgpLjgrvjg4Pjg4jjgafmuKHjgZnjgIJcclxuICAgICAgICAgKiBAcGFyYW0gdGV4dHVyZU5vIOaPj+eUu+OBmeOCi+ODhuOCr+OCueODgeODo+eVquWPt1xyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleENvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAgICAgICAqIEBwYXJhbSB2ZXJ0ZXhDb3VudCDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnmlbBcclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7jgqTjg7Pjg4fjg4Pjgq/jgrnphY3liJdcclxuICAgICAgICAgKiBAcGFyYW0gdmVydGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K56YWN5YiXXHJcbiAgICAgICAgICogQHBhcmFtIHV2QXJyYXkgdXbphY3liJdcclxuICAgICAgICAgKiBAcGFyYW0gb3BhY2l0eSDkuI3pgI/mmI7luqZcclxuICAgICAgICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O85ZCI5oiQ44K/44Kk44OXXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGRyYXdNZXNoKHRleHR1cmVObzogbnVtYmVyLCBpbmRleENvdW50OiBudW1iZXIsIHZlcnRleENvdW50OiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4QXJyYXk6IFVpbnQxNkFycmF5LCB2ZXJ0ZXhBcnJheTogRmxvYXQzMkFycmF5LCB1dkFycmF5OiBGbG9hdDMyQXJyYXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IG51bWJlciwgY29sb3JCbGVuZE1vZGU6IEN1YmlzbUJsZW5kTW9kZSk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIOijj+mdouaPj+eUu+OBruacieWKueODu+eEoeWKuVxyXG4gICAgICAgICAgICBpZih0aGlzLmlzQ3VsbGluZygpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmVuYWJsZSh0aGlzLmdsLkNVTExfRkFDRSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5DVUxMX0ZBQ0UpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdsLmZyb250RmFjZSh0aGlzLmdsLkNDVyk7ICAgIC8vIEN1YmlzbTMgT3BlbkdM44Gv44Oe44K544Kv44O744Ki44O844OI44Oh44OD44K344Ol5YWx44GrQ0NX44GM6KGo6Z2iXHJcblxyXG4gICAgICAgICAgICBsZXQgbW9kZWxDb2xvclJHQkE6IEN1YmlzbVRleHR1cmVDb2xvciA9IHRoaXMuZ2V0TW9kZWxDb2xvcigpO1xyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrKCkgPT0gbnVsbCkgIC8vIOODnuOCueOCr+eUn+aIkOaZguS7peWkllxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtb2RlbENvbG9yUkdCQS5BICo9IG9wYWNpdHk7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmlzUHJlbXVsdGlwbGllZEFscGhhKCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxDb2xvclJHQkEuUiAqPSBtb2RlbENvbG9yUkdCQS5BO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsQ29sb3JSR0JBLkcgKj0gbW9kZWxDb2xvclJHQkEuQTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbENvbG9yUkdCQS5CICo9IG1vZGVsQ29sb3JSR0JBLkE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBkcmF3dGV4dHVyZTogV2ViR0xUZXh0dXJlOyAgLy8g44K344Kn44O844OA44Gr5rih44GZ44OG44Kv44K544OB44OjXHJcblxyXG4gICAgICAgICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjg57jg4Pjg5fjgYvjgonjg5DjgqTjg7Pjg4nmuIjjgb/jg4bjgq/jgrnjg4Hjg6PvvKnvvKTjgpLlj5blvpdcclxuICAgICAgICAgICAgLy8g44OQ44Kk44Oz44OJ44GV44KM44Gm44GE44Gq44GR44KM44Gw44OA44Of44O844Gu44OG44Kv44K544OB44OjSUTjgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgICAgICAgICAgaWYodGhpcy5fdGV4dHVyZXMuZ2V0VmFsdWUodGV4dHVyZU5vKSAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkcmF3dGV4dHVyZSA9IHRoaXMuX3RleHR1cmVzLmdldFZhbHVlKHRleHR1cmVObyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBkcmF3dGV4dHVyZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEN1YmlzbVNoYWRlcl9XZWJHTC5nZXRJbnN0YW5jZSgpLnNldHVwU2hhZGVyUHJvZ3JhbShcclxuICAgICAgICAgICAgICAgIHRoaXMsIGRyYXd0ZXh0dXJlLCB2ZXJ0ZXhDb3VudCwgdmVydGV4QXJyYXksIGluZGV4QXJyYXksIHV2QXJyYXksXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9idWZmZXJEYXRhLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eSwgY29sb3JCbGVuZE1vZGUsIG1vZGVsQ29sb3JSR0JBLCB0aGlzLmlzUHJlbXVsdGlwbGllZEFscGhhKCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldE12cE1hdHJpeCgpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6XjgpLmj4/nlLvjgZnjgotcclxuICAgICAgICAgICAgdGhpcy5nbC5kcmF3RWxlbWVudHModGhpcy5nbC5UUklBTkdMRVMsIGluZGV4Q291bnQsIHRoaXMuZ2wuVU5TSUdORURfU0hPUlQsIDApO1xyXG5cclxuICAgICAgICAgICAgLy8g5b6M5Yem55CGXHJcbiAgICAgICAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KG51bGwpO1xyXG4gICAgICAgICAgICB0aGlzLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2sobnVsbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6zjg7Pjg4Djg6njgYzkv53mjIHjgZnjgovpnZnnmoTjgarjg6rjgr3jg7zjgrnjgpLop6PmlL7jgZnjgotcclxuICAgICAgICAgKiBXZWJHTOOBrumdmeeahOOBquOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOCkuino+aUvuOBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZG9TdGF0aWNSZWxlYXNlKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEN1YmlzbVNoYWRlcl9XZWJHTC5kZWxldGVJbnN0YW5jZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Os44Oz44OA44O844K544OG44O844OI44KS6Kit5a6a44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIGZibyDjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PlgbTjgafmjIflrprjgZfjgabjgYTjgovjg5Xjg6zjg7zjg6Djg5Djg4Pjg5XjgqFcclxuICAgICAgICAgKiBAcGFyYW0gdmlld3BvcnQg44OT44Ol44O844Od44O844OIXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldFJlbmRlclN0YXRlKGZibzogV2ViR0xGcmFtZWJ1ZmZlciwgdmlld3BvcnQ6IG51bWJlcltdKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc19mYm8gPSBmYm87XHJcbiAgICAgICAgICAgIHNfdmlld3BvcnQgPSB2aWV3cG9ydDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaPj+eUu+mWi+Wni+aZguOBrui/veWKoOWHpueQhlxyXG4gICAgICAgICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+WJjeOBq+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBq+W/heimgeOBquWHpueQhuOCkuWun+ijheOBl+OBpuOBhOOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBwcmVEcmF3KCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuZmlyc3REcmF3KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcnN0RHJhdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOaLoeW8teapn+iDveOCkuacieWKueOBq+OBmeOCi1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYW5pc29ydG9weSA9IHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC5nZXRFeHRlbnNpb24oXCJXRUJLSVRfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC5nZXRFeHRlbnNpb24oXCJNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5TQ0lTU09SX1RFU1QpO1xyXG4gICAgICAgICAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5TVEVOQ0lMX1RFU1QpO1xyXG4gICAgICAgICAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5ERVBUSF9URVNUKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOOCq+ODquODs+OCsO+8iDEuMGJldGEz77yJXHJcbiAgICAgICAgICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHRoaXMuZ2wuQ1cpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5nbC5lbmFibGUodGhpcy5nbC5CTEVORCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2wuY29sb3JNYXNrKHRydWUsIHRydWUsIHRydWUsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTsgIC8vIOWJjeOBq+ODkOODg+ODleOCoeOBjOODkOOCpOODs+ODieOBleOCjOOBpuOBhOOBn+OCieegtOajhOOBmeOCi+W/heimgeOBjOOBguOCi1xyXG4gICAgICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6Pjgavmj4/nlLvjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhjbGlwOiBDdWJpc21DbGlwcGluZ0NvbnRleHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrID0gY2xpcDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODnuOCueOCr+ODhuOCr+OCueODgeODo+OBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIEByZXR1cm4g44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKTogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOeUu+mdouS4iuOBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KGNsaXA6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcgPSBjbGlwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55S76Z2i5LiK44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICogQHJldHVybiDnlLvpnaLkuIrjgavmj4/nlLvjgZnjgovjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpOiBDdWJpc21DbGlwcGluZ0NvbnRleHRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogZ2zjga7oqK3lrppcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhcnRVcChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5nbCA9IGdsO1xyXG4gICAgICAgICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIuc2V0R0woZ2wpO1xyXG4gICAgICAgICAgICBDdWJpc21TaGFkZXJfV2ViR0wuZ2V0SW5zdGFuY2UoKS5zZXRHbChnbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfdGV4dHVyZXM6IGNzbU1hcDxudW1iZXIsIFdlYkdMVGV4dHVyZT47ICAgICAgICAgICAgICAgICAgICAgIC8vIOODouODh+ODq+OBjOWPgueFp+OBmeOCi+ODhuOCr+OCueODgeODo+OBqOODrOODs+ODgOODqeOBp+ODkOOCpOODs+ODieOBl+OBpuOBhOOCi+ODhuOCr+OCueODgeODo+OBqOOBruODnuODg+ODl1xyXG4gICAgICAgIF9zb3J0ZWREcmF3YWJsZUluZGV4TGlzdDogY3NtVmVjdG9yPG51bWJlcj47ICAgICAgICAgICAgIC8vIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueOCkuaPj+eUu+mghuOBq+S4puOBueOBn+ODquOCueODiFxyXG4gICAgICAgIF9jbGlwcGluZ01hbmFnZXI6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDsgICAgICAgICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv566h55CG44Kq44OW44K444Kn44Kv44OIXHJcbiAgICAgICAgX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2s6IEN1YmlzbUNsaXBwaW5nQ29udGV4dDsgICAvLyDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6Pjgavmj4/nlLvjgZnjgovjgZ/jgoHjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcclxuICAgICAgICBfY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0OyAgIC8vIOeUu+mdouS4iuaPj+eUu+OBmeOCi+OBn+OCgeOBruOCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiFxyXG4gICAgICAgIGZpcnN0RHJhdzogYm9vbGVhbjtcclxuICAgICAgICBfYnVmZmVyRGF0YToge1xyXG4gICAgICAgICAgICB2ZXJ0ZXg6IFdlYkdMQnVmZmVyLFxyXG4gICAgICAgICAgICB1djogV2ViR0xCdWZmZXIsXHJcbiAgICAgICAgICAgIGluZGV4OiBXZWJHTEJ1ZmZlclxyXG4gICAgICAgIH07IC8vIOmggueCueODkOODg+ODleOCoeODh+ODvOOCv1xyXG4gICAgICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7ICAvLyB3ZWJnbOOCs+ODs+ODhuOCreOCueODiFxyXG4gICAgfVxyXG5cclxufSIsIi8qXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwOi8vbGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ3ViaXNtTG9nRGVidWcgfSBmcm9tIFwiLi4vdXRpbHMvY3ViaXNtZGVidWdcIjtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8qKlxyXG4gICAgICogS2V5LVZhbHVl44Gu44Oa44Ki44KS5a6a576p44GZ44KL44Kv44Op44K5XHJcbiAgICAgKiBjc21NYXDjgq/jg6njgrnjga7lhoXpg6jjg4fjg7zjgr/jgafkvb/nlKjjgZnjgovjgIJcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIGNzbVBhaXI8X0tleVQsIF9WYWxUPlxyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqIEBwYXJhbSBrZXkgS2V544Go44GX44Gm44K744OD44OI44GZ44KL5YCkXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIFZhbHVl44Go44GX44Gm44K744OD44OI44GZ44KL5YCkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKGtleT86IF9LZXlULCB2YWx1ZT86IF9WYWxUKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5maXJzdCA9IChrZXkgPT0gdW5kZWZpbmVkKSBcclxuICAgICAgICAgICAgICAgID8gbnVsbCBcclxuICAgICAgICAgICAgICAgIDoga2V5O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZWNvbmQgPSAodmFsdWUgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgPyBudWxsXHJcbiAgICAgICAgICAgICAgICA6IHZhbHVlOyAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGZpcnN0OiBfS2V5VDsgICAvLyBrZXnjgajjgZfjgabnlKjjgYTjgovlpInmlbBcclxuICAgICAgICBwdWJsaWMgc2Vjb25kOiBfVmFsVDsgIC8vIHZhbHVl44Go44GX44Gm55So44GE44KL5aSJ5pWwXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg57jg4Pjg5flnotcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIGNzbU1hcDxfS2V5VCwgX1ZhbFQ+XHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICogQHBhcmFtIHNpemUg5Yid5pyf5YyW5pmC54K544Gn56K65L+d44GZ44KL44K144Kk44K6XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKHNpemU/OiBudW1iZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihzaXplICE9IHVuZGVmaW5lZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoc2l6ZSA8IDEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5VmFsdWVzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHVtbXlWYWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5VmFsdWVzID0gbmV3IEFycmF5KHNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5VmFsdWVzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kdW1teVZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NpemUgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcmVsZWFzZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCreODvOOCkui/veWKoOOBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBrZXkg5paw44Gf44Gr6L+95Yqg44GZ44KL44Kt44O8XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFwcGVuZEtleShrZXk6IF9LZXlUKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8g5paw44GX44GPS2V5L1ZhbHVl44Gu44Oa44Ki44KS5L2c44KLXHJcbiAgICAgICAgICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KHRoaXMuX3NpemUgKyAxLCBmYWxzZSk7IC8vIDHjgaTku6XkuIrlhaXjgovpmpnplpPjgpLkvZzjgotcclxuICAgICAgICAgICAgLy8g5paw44GX44GEa2V5L3ZhbHVl44Gu44Kk44Oz44OH44OD44Kv44K544GvX3NpemVcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2tleVZhbHVlc1t0aGlzLl9zaXplXSA9IG5ldyBjc21QYWlyPF9LZXlULCBfVmFsVD4oa2V5KTtcclxuICAgICAgICAgICAgdGhpcy5fc2l6ZSArPSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5re75a2X5ryU566X5a2QW2tleV3jga7jgqrjg7zjg5Djg7zjg63jg7zjg4koZ2V0KVxyXG4gICAgICAgICAqIEBwYXJhbSBrZXkg5re75a2X44GL44KJ54m55a6a44GV44KM44KLVmFsdWXlgKRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0VmFsdWUoa2V5OiBfS2V5VCk6IF9WYWxUXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgZm91bmQgPSAtMTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvcihsZXQgaTogbnVtYmVyID0gMDsgaSA8IHRoaXMuX3NpemU7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5fa2V5VmFsdWVzW2ldLmZpcnN0ID09IGtleSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKGZvdW5kID49IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9rZXlWYWx1ZXNbZm91bmRdLnNlY29uZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kS2V5KGtleSk7IC8vIOaWsOimj+OCreODvOOCkui/veWKoFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2tleVZhbHVlc1t0aGlzLl9zaXplIC0gMV0uc2Vjb25kO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOa3u+Wtl+a8lOeul+WtkFtrZXld44Gu44Kq44O844OQ44O844Ot44O844OJKHNldClcclxuICAgICAgICAgKiBAcGFyYW0ga2V5IOa3u+Wtl+OBi+OCieeJueWumuOBleOCjOOCi1ZhbHVl5YCkXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIOS7o+WFpeOBmeOCi1ZhbHVl5YCkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldFZhbHVlKGtleTogX0tleVQsIHZhbHVlOiBfVmFsVCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IC0xO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9rZXlWYWx1ZXNbaV0uZmlyc3QgPT0ga2V5KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gaTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoZm91bmQgPj0gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5VmFsdWVzW2ZvdW5kXS5zZWNvbmQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kS2V5KGtleSk7IC8vIOaWsOimj+OCreODvOOCkui/veWKoFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5VmFsdWVzW3RoaXMuX3NpemUgLSAxXS5zZWNvbmQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlvJXmlbDjgafmuKHjgZfjgZ9LZXnjgpLmjIHjgaTopoHntKDjgYzlrZjlnKjjgZnjgovjgYtcclxuICAgICAgICAgKiBAcGFyYW0ga2V5IOWtmOWcqOOCkueiuuiqjeOBmeOCi2tleVxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSDlvJXmlbDjgafmuKHjgZfjgZ9rZXnjgpLmjIHjgaTopoHntKDjgYzlrZjlnKjjgZnjgotcclxuICAgICAgICAgKiBAcmV0dXJuIGZhbHNlIOW8leaVsOOBp+a4oeOBl+OBn2tleeOCkuaMgeOBpOimgee0oOOBjOWtmOWcqOOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc0V4aXN0KGtleTogX0tleVQpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLl9zaXplOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuX2tleVZhbHVlc1tpXS5maXJzdCA9PSBrZXkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBrZXlWYWx1ZeOBruODneOCpOODs+OCv+OCkuWFqOOBpuino+aUvuOBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBjbGVhcigpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9rZXlWYWx1ZXMgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2tleVZhbHVlcyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2tleVZhbHVlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+ODhuODiuOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqIEByZXR1cm4g44Kz44Oz44OG44OK44Gu44K144Kk44K6XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFNpemUoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+ODhuODiuOBruOCreODo+ODkeOCt+ODhuOCo+OCkueiuuS/neOBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBuZXdTaXplIOaWsOOBn+OBquOCreODo+ODkeOCt+ODhuOCo+OAguW8leaVsOOBruWApOOBjOePvuWcqOOBruOCteOCpOOCuuacqua6gOOBruWgtOWQiOOBr+S9leOCguOBl+OBquOBhOOAglxyXG4gICAgICAgICAqIEBwYXJhbSBmaXRUb1NpemUgdHJ1ZeOBquOCieaMh+WumuOBl+OBn+OCteOCpOOCuuOBq+WQiOOCj+OBm+OCi+OAgmZhbHNl44Gq44KJ44K144Kk44K644KSMuWAjeeiuuS/neOBl+OBpuOBiuOBj+OAglxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBwcmVwYXJlQ2FwYWNpdHkobmV3U2l6ZTogbnVtYmVyLCBmaXRUb1NpemU6IGJvb2xlYW4pOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihuZXdTaXplID4gdGhpcy5fa2V5VmFsdWVzLmxlbmd0aClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5fa2V5VmFsdWVzLmxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFmaXRUb1NpemUgJiYgbmV3U2l6ZSA8IGNzbU1hcC5EZWZhdWx0U2l6ZSkgbmV3U2l6ZSA9IGNzbU1hcC5EZWZhdWx0U2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoID0gbmV3U2l6ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZighZml0VG9TaXplICYmIG5ld1NpemUgPCB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoICogMikgbmV3U2l6ZSA9IHRoaXMuX2tleVZhbHVlcy5sZW5ndGggKiAyO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleVZhbHVlcy5sZW5ndGggPSBuZXdTaXplO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjg4bjg4rjga7lhYjpoK3opoHntKDjgpLov5TjgZlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYmVnaW4oKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMsIDApO1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44OG44OK44Gu57WC56uv6KaB57Sg44KS6L+U44GZXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGVuZCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgaXRlOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+ID0gbmV3IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4odGhpcywgdGhpcy5fc2l6ZSk7IC8vIOe1guS6hlxyXG4gICAgICAgICAgICByZXR1cm4gaXRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44OG44OK44GL44KJ6KaB57Sg44KS5YmK6Zmk44GZ44KLXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGl0ZSDliYrpmaTjgZnjgovopoHntKBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZXJhc2UoaXRlOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGluZGV4OiBudW1iZXIgPSBpdGUuX2luZGV4O1xyXG4gICAgICAgICAgICBpZihpbmRleCA8IDAgfHwgdGhpcy5fc2l6ZSA8PSBpbmRleClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZTsgLy8g5YmK6Zmk56+E5Zuy5aSWXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOWJiumZpFxyXG4gICAgICAgICAgICB0aGlzLl9rZXlWYWx1ZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgLS10aGlzLl9zaXplO1xyXG5cclxuICAgICAgICAgICAgbGV0IGl0ZTI6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4gPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPih0aGlzLCBpbmRleCk7IC8vIOe1guS6hlxyXG4gICAgICAgICAgICByZXR1cm4gaXRlMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+ODhuODiuOBruWApOOCkjMy44OT44OD44OI56ym5Y+35LuY44GN5pW05pWw5Z6L44Gn44OA44Oz44OX44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGR1bXBBc0ludCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Mb2dEZWJ1ZyhcInswfSAsXCIsIHRoaXMuX2tleVZhbHVlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Mb2dEZWJ1ZyhcIlxcblwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyByZWFkb25seSBEZWZhdWx0U2l6ZSA9IDEwOyAvLyDjgrPjg7Pjg4bjg4rjga7liJ3mnJ/ljJbjga7jg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrpcclxuICAgICAgICBwdWJsaWMgX2tleVZhbHVlczogY3NtUGFpcjxfS2V5VCwgX1ZhbFQ+W107Ly8ga2V5LXZhbHVl44Oa44Ki44Gu6YWN5YiXXHJcbiAgICAgICAgcHVibGljIF9kdW1teVZhbHVlOiBfVmFsVDsgIC8vIOepuuOBruWApOOCkui/lOOBmeeCuuOBruODgOODn+ODvFxyXG4gICAgICAgIHB1YmxpYyBfc2l6ZTogbnVtYmVyOyAgICAgICAvLyDjgrPjg7Pjg4bjg4rjga7opoHntKDmlbBcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjc21NYXA8VD7jga7jgqTjg4bjg6zjg7zjgr9cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIGl0ZXJhdG9yPF9LZXlULCBfVmFsVD5cclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3Rvcih2PzogY3NtTWFwPF9LZXlULCBfVmFsVD4sIGlkeD86IG51bWJlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcCA9ICh2ICE9IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgID8gdlxyXG4gICAgICAgICAgICAgICAgOiBuZXcgY3NtTWFwPF9LZXlULCBfVmFsVD4oKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gKGlkeCAhPSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICA/IGlkeFxyXG4gICAgICAgICAgICAgICAgOiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogPea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXQoaXRlOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5faW5kZXggPSBpdGUuX2luZGV4O1xyXG4gICAgICAgICAgICB0aGlzLl9tYXAgPSBpdGUuX21hcDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDliY3nva7jgY0rK+a8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBwcmVJbmNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgKyt0aGlzLl9pbmRleDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDliY3nva7jgY0tLea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBwcmVEZWNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLS10aGlzLl9pbmRleDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlvoznva7jgY0rK+a8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpbmNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMuX21hcCwgdGhpcy5faW5kZXgrKyk7ICAvLyDlj6TjgYTlgKTjgpLkv53lrZhcclxuICAgICAgICAgICAgdGhpcy5fbWFwID0gaXRlb2xkLl9tYXA7XHJcbiAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gaXRlb2xkLl9pbmRleDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlvoznva7jgY0tLea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBkZWNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMuX21hcCwgdGhpcy5faW5kZXgpOyAvLyDlj6TjgYTlgKTjgpLkv53lrZhcclxuICAgICAgICAgICAgdGhpcy5fbWFwID0gaXRlb2xkLl9tYXA7XHJcbiAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gaXRlb2xkLl9pbmRleDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAq5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHB0cigpOiBjc21QYWlyPF9LZXlULCBfVmFsVD5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXAuX2tleVZhbHVlc1t0aGlzLl9pbmRleF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAhPea8lOeul1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBub3RFcXVhbChpdGU6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4pOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX2luZGV4ICE9IGl0ZS5faW5kZXgpIHx8ICh0aGlzLl9tYXAgIT0gaXRlLl9tYXApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgX2luZGV4OiBudW1iZXI7ICAgICAgICAgICAgIC8vIOOCs+ODs+ODhuODiuOBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAgICAgIF9tYXA6IGNzbU1hcDxfS2V5VCwgX1ZhbFQ+OyAvLyDjgrPjg7Pjg4bjg4pcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwOi8vbGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmtcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiDnn6nlvaLlvaLnirbvvIjluqfmqJnjg7vplbfjgZXjga9mbG9hdOWApO+8ieOCkuWumue+qeOBmeOCi+OCr+ODqeOCuVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgY3NtUmVjdFxyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqIEBwYXJhbSB4IOW3puerr1jluqfmqJlcclxuICAgICAgICAgKiBAcGFyYW0geSDkuIrnq69Z5bqn5qiZXHJcbiAgICAgICAgICogQHBhcmFtIHcg5bmFXHJcbiAgICAgICAgICogQHBhcmFtIGgg6auY44GVXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKHg/OiBudW1iZXIsIHk/OiBudW1iZXIsIHc/OiBudW1iZXIsIGg/OiBudW1iZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdztcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog55+p5b2i5Lit5aSu44GuWOW6p+aomeOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRDZW50ZXJYKCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMueCArIDAuNSAqIHRoaXMud2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnn6nlvaLkuK3lpK7jga5Z5bqn5qiZ44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldENlbnRlclkoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy55ICsgMC41ICogdGhpcy5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlj7PlgbTjga5Y5bqn5qiZ44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFJpZ2h0KCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMueCArIHRoaXMud2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDkuIvnq6/jga5Z5bqn5qiZ44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldEJvdHRvbSgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnkgKyB0aGlzLmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOefqeW9ouOBq+WApOOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSByIOefqeW9ouOBruOCpOODs+OCueOCv+ODs+OCuVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRSZWN0KHI6IGNzbVJlY3QpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnggPSByLng7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IHIueTtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHIud2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gci5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnn6nlvaLkuK3lpK7jgpLou7jjgavjgZfjgabnuKbmqKrjgpLmi6HnuK7jgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gdyDluYXmlrnlkJHjgavmi6HnuK7jgZnjgovph49cclxuICAgICAgICAgKiBAcGFyYW0gaCDpq5jjgZXmlrnlkJHjgavmi6HnuK7jgZnjgovph49cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZXhwYW5kKHc6IG51bWJlciwgaDogbnVtYmVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy54IC09IHc7XHJcbiAgICAgICAgICAgIHRoaXMueSAtPSBoO1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoICs9IHcgKiAyLjA7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ICs9IGggKiAyLjA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgeDogbnVtYmVyOyAgICAgIC8vIOW3puerr1jluqfmqJlcclxuICAgICAgICBwdWJsaWMgeTogbnVtYmVyOyAgICAgIC8vIOS4iuerr1nluqfmqJlcclxuICAgICAgICBwdWJsaWMgd2lkdGg6IG51bWJlcjsgIC8vIOW5hVxyXG4gICAgICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjsgLy8g6auY44GVXHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL2xpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrXHJcbntcclxuICAgIC8qKlxyXG4gICAgICog5paH5a2X5YiX44Kv44Op44K544CCXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBjc21TdHJpbmdcclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmloflrZfliJfjgpLlvozmlrnjgavov73liqDjgZnjgotcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gYyDov73liqDjgZnjgovmloflrZfliJdcclxuICAgICAgICAgKiBAcmV0dXJuIOabtOaWsOOBleOCjOOBn+aWh+Wtl+WIl1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhcHBlbmQoYzogc3RyaW5nLCBsZW5ndGg/OiBudW1iZXIpOiBjc21TdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMucyArPSAobGVuZ3RoICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICA/IGMuc3Vic3RyKDAsIGxlbmd0aClcclxuICAgICAgICAgICAgICAgIDogYztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5paH5a2X44K144Kk44K644KS5ouh5by144GX44Gm5paH5a2X44KS5Z+L44KB44KLXHJcbiAgICAgICAgICogQHBhcmFtIGxlbmd0aCAgICDmi6HlvLXjgZnjgovmloflrZfmlbBcclxuICAgICAgICAgKiBAcGFyYW0gdiAgICAgICAgIOWfi+OCgeOCi+aWh+Wtl1xyXG4gICAgICAgICAqIEByZXR1cm4g5pu05paw44GV44KM44Gf5paH5a2X5YiXXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGV4cGFuc2lvbihsZW5ndGg6IG51bWJlciwgdjogc3RyaW5nKTogY3NtU3RyaW5nXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgcmV0OiBjc21TdHJpbmcgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXQuYXBwZW5kKHYpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5paH5a2X5YiX44Gu6ZW344GV44KS44OQ44Kk44OI5pWw44Gn5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldEJ5dGVzKCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnMpIC5yZXBsYWNlKC8lLi4vZywgXCJ4XCIpLmxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaWh+Wtl+WIl+OBrumVt+OBleOCkui/lOOBmVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRMZW5ndGgoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zLmxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaWh+Wtl+WIl+avlOi8g+OAgDxcclxuICAgICAgICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWU6ICAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OCiOOCiuWwj+OBleOBhFxyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2U6ICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5aSn44GN44GEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzTGVzcyhzOiBjc21TdHJpbmcpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zIDwgcy5zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5paH5a2X5YiX5q+U6LyDID5cclxuICAgICAgICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWU6ICAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OCiOOCiuWkp+OBjeOBhFxyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2U6ICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5bCP44GV44GEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzR3JlYXQoczogY3NtU3RyaW5nKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucyA+IHMucztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaWh+Wtl+WIl+avlOi8gyA9PVxyXG4gICAgICAgICAqIEBwYXJhbSBzIOavlOi8g+OBmeOCi+aWh+Wtl+WIl1xyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44Go562J44GX44GEXHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgajnlbDjgarjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNFcXVhbChzOiBzdHJpbmcpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zID09IHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmloflrZfliJfjgYznqbrjgYvjganjgYbjgYtcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWU6IOepuuOBruaWh+Wtl+WIl1xyXG4gICAgICAgICAqIEByZXR1cm4gZmFsc2U6IOWApOOBjOioreWumuOBleOCjOOBpuOBhOOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc0VtcHR5KCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnMubGVuZ3RoID09IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3Ioczogc3RyaW5nKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5zID0gcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHM6IHN0cmluZztcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwOi8vbGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmtcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiDjg5njgq/jgr/jg7zlnovvvIjlj6/lpInphY3liJflnovvvIlcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIGNzbVZlY3RvcjxUPlxyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqIEBwYXJhbSBpbmlpdGFsQ2FwYWNpdHkg5Yid5pyf5YyW5b6M44Gu44Kt44Oj44OR44K344OG44Kj44CC44OH44O844K/44K144Kk44K644GvX2NhcGFjaXR5ICogc2l6ZW9mKFQpXHJcbiAgICAgICAgICogQHBhcmFtIHplcm9DbGVhciB0cnVl44Gq44KJ5Yid5pyf5YyW5pmC44Gr56K65L+d44GX44Gf6aCY5Z+f44KSMOOBp+Wfi+OCgeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGluaXRpYWxDYXBhY2l0eTogbnVtYmVyID0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKGluaXRpYWxDYXBhY2l0eSA8IDEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3B0ciA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FwYWNpdHkgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wdHIgPSBuZXcgQXJyYXkoaW5pdGlhbENhcGFjaXR5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhcGFjaXR5ID0gaW5pdGlhbENhcGFjaXR5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCpOODs+ODh+ODg+OCr+OCueOBp+aMh+WumuOBl+OBn+imgee0oOOCkui/lOOBmVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhdChpbmRleDogbnVtYmVyKTogVFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3B0cltpbmRleF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDopoHntKDjgpLjgrvjg4Pjg4hcclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXgg6KaB57Sg44KS44K744OD44OI44GZ44KL44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIOOCu+ODg+ODiOOBmeOCi+imgee0oFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXQoaW5kZXg6IG51bWJlciwgdmFsdWU6IFQpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9wdHJbaW5kZXhdID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjg4bjg4rjgpLlj5blvpfjgZnjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0KG9mZnNldDogbnVtYmVyID0gMCk6IFRbXVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHJldDogVFtdID0gbmV3IEFycmF5PFQ+KCk7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IG9mZnNldDsgaSA8IHRoaXMuX3NpemU7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0LnB1c2godGhpcy5fcHRyW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogcHVzaEJhY2vlh6bnkIbjgIHjgrPjg7Pjg4bjg4rjgavmlrDjgZ/jgaropoHntKDjgpLov73liqDjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gdmFsdWUgUHVzaEJhY2vlh6bnkIbjgafov73liqDjgZnjgovlgKRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcHVzaEJhY2sodmFsdWU6IFQpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZih0aGlzLl9zaXplID49IHRoaXMuX2NhcGFjaXR5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByZXBhcmVDYXBhY2l0eSh0aGlzLl9jYXBhY2l0eSA9PSAwID8gY3NtVmVjdG9yLnNfZGVmYXVsdFNpemUgOiB0aGlzLl9jYXBhY2l0eSAqIDIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLl9wdHJbdGhpcy5fc2l6ZSsrXSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44OG44OK44Gu5YWo6KaB57Sg44KS6Kej5pS+44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNsZWFyKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3B0ci5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9zaXplID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+ODhuODiuOBruimgee0oOaVsOOCkui/lOOBmVxyXG4gICAgICAgICAqIEByZXR1cm4g44Kz44Oz44OG44OK44Gu6KaB57Sg5pWwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFNpemUoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+ODhuODiuOBruWFqOimgee0oOOBq+WvvuOBl+OBpuS7o+WFpeWHpueQhuOCkuihjOOBhlxyXG4gICAgICAgICAqIEBwYXJhbSBuZXdTaXplIOS7o+WFpeWHpueQhuW+jOOBruOCteOCpOOCulxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSDopoHntKDjgavku6PlhaXjgZnjgovlgKRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYXNzaWduKG5ld1NpemU6IG51bWJlciwgdmFsdWU6IFQpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgY3VyU2l6ZSA9IHRoaXMuX3NpemU7XHJcblxyXG4gICAgICAgICAgICBpZihjdXJTaXplIDwgbmV3U2l6ZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmVwYXJlQ2FwYWNpdHkobmV3U2l6ZSk7ICAvLyBjYXBhY2l0eeabtOaWsFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCBuZXdTaXplOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3B0cltpXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zaXplID0gbmV3U2l6ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCteOCpOOCuuWkieabtFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyByZXNpemUobmV3U2l6ZTogbnVtYmVyLCB2YWx1ZTogVCA9IG51bGwpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemUobmV3U2l6ZSwgdmFsdWUsIHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44K144Kk44K65aSJ5pu0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHVwZGF0ZVNpemUobmV3U2l6ZTogbnVtYmVyLCB2YWx1ZTogYW55ID0gbnVsbCwgY2FsbFBsYWNlbWVudE5ldzogYm9vbGVhbiA9IHRydWUpOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgY3VyU2l6ZTogbnVtYmVyID0gdGhpcy5fc2l6ZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKGN1clNpemUgPCBuZXdTaXplKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByZXBhcmVDYXBhY2l0eShuZXdTaXplKTsgIC8vIGNhcGFjaXR55pu05pawXHJcblxyXG4gICAgICAgICAgICAgICAgaWYoY2FsbFBsYWNlbWVudE5ldylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IHRoaXMuX3NpemU7IGkgPCBuZXdTaXplOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykgIC8vIG5ld1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wdHJbaV0gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG5ldyB2YWx1ZSgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSAvLyDjg5fjg6rjg5/jg4bjgqPjg5blnovjgarjga7jgaflgKTmuKHjgZdcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHRyW2ldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpOiBudW1iZXIgPSB0aGlzLl9zaXplOyBpIDwgbmV3U2l6ZTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHRyW2ldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gbmV3U2l6ZSA8PSB0aGlzLl9zaXplXHJcbiAgICAgICAgICAgICAgICAvLy0tLVxyXG4gICAgICAgICAgICAgICAgbGV0IHN1YiA9IHRoaXMuX3NpemUgLSBuZXdTaXplO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHRyLnNwbGljZSh0aGlzLl9zaXplIC0gc3ViLCBzdWIpOyAgICAvLyDkuI3opoHjgarjga7jgafnoLTmo4TjgZnjgotcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9zaXplID0gbmV3U2l6ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+ODhuODiuOBq+OCs+ODs+ODhuODiuimgee0oOOCkuaMv+WFpeOBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBwb3NpdGlvbiDmjL/lhaXjgZnjgovkvY3nva5cclxuICAgICAgICAgKiBAcGFyYW0gYmVnaW7jgIDmjL/lhaXjgZnjgovjgrPjg7Pjg4bjg4rjga7plovlp4vkvY3nva5cclxuICAgICAgICAgKiBAcGFyYW0gZW5kIOaMv+WFpeOBmeOCi+OCs+ODs+ODhuODiuOBrue1guerr+S9jee9rlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpbnNlcnQocG9zaXRpb246IGl0ZXJhdG9yPFQ+LCBiZWdpbjogaXRlcmF0b3I8VD4sIGVuZDogaXRlcmF0b3I8VD4pOiB2b2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgZHN0U2k6IG51bWJlciA9IHBvc2l0aW9uLl9pbmRleDtcclxuICAgICAgICAgICAgbGV0IHNyY1NpOiBudW1iZXIgPSBiZWdpbi5faW5kZXg7XHJcbiAgICAgICAgICAgIGxldCBzcmNFaTogbnVtYmVyID0gZW5kLl9pbmRleDtcclxuXHJcbiAgICAgICAgICAgIGxldCBhZGRDb3VudDogbnVtYmVyID0gc3JjRWkgLSBzcmNTaTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJlcGFyZUNhcGFjaXR5KHRoaXMuX3NpemUgKyBhZGRDb3VudCk7XHJcblxyXG4gICAgICAgICAgICAvLyDmjL/lhaXnlKjjga7ml6LlrZjjg4fjg7zjgr/jgpLjgrfjg5Xjg4jjgZfjgabpmpnplpPjgpLkvZzjgotcclxuICAgICAgICAgICAgbGV0IGFkZFNpemUgPSB0aGlzLl9zaXplIC0gZHN0U2k7XHJcbiAgICAgICAgICAgIGlmKGFkZFNpemUgPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCBhZGRTaXplOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHRyLnNwbGljZShkc3RTaSArIGksIDAsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IobGV0IGk6IG51bWJlciA9IHNyY1NpOyBpIDwgc3JjRWk7IGkrKywgZHN0U2krKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHRyW2RzdFNpXSA9IGJlZ2luLl92ZWN0b3IuX3B0cltpXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IHRoaXMuX3NpemUgKyBhZGRDb3VudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+ODhuODiuOBi+OCieOCpOODs+ODh+ODg+OCr+OCueOBp+aMh+WumuOBl+OBn+imgee0oOOCkuWJiumZpOOBmeOCi1xyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCDjgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWUg5YmK6Zmk5a6f6KGMXHJcbiAgICAgICAgICogQHJldHVybiBmYWxzZSDliYrpmaTnr4Tlm7LlpJZcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcmVtb3ZlKGluZGV4OiBudW1iZXIpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihpbmRleCA8IDAgfHwgdGhpcy5fc2l6ZSA8PSBpbmRleClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAgIC8vIOWJiumZpOevhOWbsuWkllxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wdHIuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgLS10aGlzLl9zaXplO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjg4bjg4rjgYvjgonopoHntKDjgpLliYrpmaTjgZfjgabku5bjga7opoHntKDjgpLjgrfjg5Xjg4jjgZnjgotcclxuICAgICAgICAgKiBAcGFyYW0gaXRlIOWJiumZpOOBmeOCi+imgee0oFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBlcmFzZShpdGU6IGl0ZXJhdG9yPFQ+KTogaXRlcmF0b3I8VD5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gaXRlLl9pbmRleDtcclxuICAgICAgICAgICAgaWYoaW5kZXggPCAwIHx8IHRoaXMuX3NpemUgPD0gaW5kZXgpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGU7IC8vIOWJiumZpOevhOWbsuWkllxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDliYrpmaRcclxuICAgICAgICAgICAgdGhpcy5fcHRyLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIC0tdGhpcy5fc2l6ZTtcclxuXHJcbiAgICAgICAgICAgIGxldCBpdGUyOiBpdGVyYXRvcjxUPiA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLCBpbmRleCk7ICAgLy8g57WC5LqGXHJcbiAgICAgICAgICAgIHJldHVybiBpdGUyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44OG44OK44Gu44Kt44Oj44OR44K344OG44Kj44KS56K65L+d44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIG5ld1NpemUg5paw44Gf44Gq44Kt44Oj44OR44K344OG44Kj44CC5byV5pWw44Gu5YCk44GM54++5Zyo44Gu44K144Kk44K65pyq5rqA44Gu5aC05ZCI44Gv5L2V44KC44GX44Gq44GELlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBwcmVwYXJlQ2FwYWNpdHkobmV3U2l6ZTogbnVtYmVyKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYobmV3U2l6ZSA+IHRoaXMuX2NhcGFjaXR5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9jYXBhY2l0eSA9PSAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3B0ciA9IG5ldyBBcnJheShuZXdTaXplKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYXBhY2l0eSA9IG5ld1NpemU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHRyLmxlbmd0aCA9IG5ld1NpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FwYWNpdHkgPSBuZXdTaXplO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjg4bjg4rjga7lhYjpoK3opoHntKDjgpLov5TjgZlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgYmVnaW4oKTogaXRlcmF0b3I8VD5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPFQ+ID0gKHRoaXMuX3NpemUgPT0gMCkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmVuZCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXcgaXRlcmF0b3I8VD4odGhpcywgMCk7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjg4bjg4rjga7ntYLnq6/opoHntKDjgpLov5TjgZlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZW5kKCk6IGl0ZXJhdG9yPFQ+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgaXRlOiBpdGVyYXRvcjxUPiA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLCB0aGlzLl9zaXplKTtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRPZmZzZXQob2Zmc2V0OiBudW1iZXIpOiBjc21WZWN0b3I8VD5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBuZXdWZWN0b3IgPSBuZXcgY3NtVmVjdG9yPFQ+KCk7XHJcbiAgICAgICAgICAgIG5ld1ZlY3Rvci5fcHRyID0gdGhpcy5nZXQob2Zmc2V0KTtcclxuICAgICAgICAgICAgbmV3VmVjdG9yLl9zaXplID0gdGhpcy5nZXQob2Zmc2V0KS5sZW5ndGg7XHJcbiAgICAgICAgICAgIG5ld1ZlY3Rvci5fY2FwYWNpdHkgPSB0aGlzLmdldChvZmZzZXQpLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBuZXdWZWN0b3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfcHRyOiBUW107ICAgIC8vIOOCs+ODs+ODhuODiuOBruWFiOmgreOCouODieODrOOCuVxyXG4gICAgICAgIF9zaXplOiBudW1iZXI7IC8vIOOCs+ODs+ODhuODiuOBruimgee0oOaVsFxyXG4gICAgICAgIF9jYXBhY2l0eTogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7jgq3jg6Pjg5Hjgrfjg4bjgqNcclxuXHJcbiAgICAgICAgc3RhdGljIHJlYWRvbmx5IHNfZGVmYXVsdFNpemUgPSAxMDsgLy8g44Kz44Oz44OG44OK5Yid5pyf5YyW44Gu44OH44OV44Kp44Or44OI44K144Kk44K6XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIGl0ZXJhdG9yPFQ+XHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKHY/OiBjc21WZWN0b3I8VD4sIGluZGV4PzogbnVtYmVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fdmVjdG9yID0gKHYgIT0gdW5kZWZpbmVkKSA/IHYgOiBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9pbmRleCA9IChpbmRleCAhPSB1bmRlZmluZWQpID8gaW5kZXggOiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5Luj5YWlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldChpdGU6IGl0ZXJhdG9yPFQ+KTogaXRlcmF0b3I8VD5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gaXRlLl9pbmRleDtcclxuICAgICAgICAgICAgdGhpcy5fdmVjdG9yID0gaXRlLl92ZWN0b3I7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5YmN572u44GNKyvmvJTnrpdcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcHJlSW5jcmVtZW50KCk6IGl0ZXJhdG9yPFQ+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICArK3RoaXMuX2luZGV4O1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5YmN572u44GNLS3mvJTnrpdcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcHJlRGVjcmVtZW50KCk6IGl0ZXJhdG9yPFQ+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAtLXRoaXMuX2luZGV4O1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW+jOe9ruOBjSsr5ryU566X5a2QXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGluY3JlbWVudCgpOiBpdGVyYXRvcjxUPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLl92ZWN0b3IsIHRoaXMuX2luZGV4KyspO1xyXG4gICAgICAgICAgICB0aGlzLl92ZWN0b3IgPSBpdGVvbGQuX3ZlY3RvcjtcclxuICAgICAgICAgICAgdGhpcy5faW5kZXggPSBpdGVvbGQuX2luZGV4O1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW+jOe9ruOBjS0t5ryU566X5a2QXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGRlY3JlbWVudCgpOiBpdGVyYXRvcjxUPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLl92ZWN0b3IsIHRoaXMuX2luZGV4LS0pOyAgLy8g5Y+k44GE5YCk44KS5L+d5a2YXHJcbiAgICAgICAgICAgIHRoaXMuX3ZlY3RvciA9IGl0ZW9sZC5fdmVjdG9yO1xyXG4gICAgICAgICAgICB0aGlzLl9pbmRleCA9IGl0ZW9sZC5faW5kZXg7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogcHRyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHB0cigpOiBUXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmVjdG9yLl9wdHJbdGhpcy5faW5kZXhdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogPea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdWJzdGl0dXRpb24oaXRlOiBpdGVyYXRvcjxUPik6IGl0ZXJhdG9yPFQ+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9pbmRleCA9IGl0ZS5faW5kZXg7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZlY3RvciA9IGl0ZS5fdmVjdG9yO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICE95ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIG5vdEVxdWFsKGl0ZTogaXRlcmF0b3I8VD4pOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX2luZGV4ICE9IGl0ZS5faW5kZXgpIHx8ICh0aGlzLl92ZWN0b3IgIT0gaXRlLl92ZWN0b3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgX2luZGV4OiBudW1iZXI7IC8vIOOCs+ODs+ODhuODiuOBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAgICAgIF92ZWN0b3I6IGNzbVZlY3RvcjxUPjsgIC8vIOOCs+ODs+ODhuODilxyXG4gICAgfVxyXG59IiwiLypcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQge0xpdmUyREN1YmlzbUZyYW1ld29yayBhcyBsaXZlMmRjdWJpc21mcmFtZXdvcmssIExvZ0xldmVsfSBmcm9tIFwiLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrXCI7XHJcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBsaXZlMmRjdWJpc21mcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xyXG5pbXBvcnQgeyBDU01fTE9HX0xFVkVMLCBDU01fTE9HX0xFVkVMX1ZFUkJPU0UsIENTTV9MT0dfTEVWRUxfREVCVUcsIENTTV9MT0dfTEVWRUxfSU5GTywgQ1NNX0xPR19MRVZFTF9XQVJOSU5HLCBDU01fTE9HX0xFVkVMX0VSUk9SIH0gZnJvbSBcIi4uL2N1YmlzbWZyYW1ld29ya2NvbmZpZ1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ1ByaW50ID0gKGxldmVsOiBMb2dMZXZlbCwgZm10OiBzdHJpbmcsIC4uLiBhcmdzOiBhbnlbXSkgPT4gXHJcbntcclxuICAgIExpdmUyREN1YmlzbUZyYW1ld29yay5DdWJpc21EZWJ1Zy5wcmludChsZXZlbCwgXCJbQ1NNXVwiICsgZm10LCBhcmdzKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ1ByaW50SW4gPSAobGV2ZWw6IExvZ0xldmVsLCBmbXQ6IHN0cmluZywgLi4uIGFyZ3M6IGFueVtdKSA9PlxyXG57XHJcbiAgICBDdWJpc21Mb2dQcmludChsZXZlbCwgZm10ICsgXCJcXG5cIiwgYXJncyk7XHJcbn1cclxuXHJcbmV4cG9ydCBsZXQgQ1NNX0FTU0VSVCA9IChleHByOiBhbnkpID0+XHJcbntcclxuICAgIGNvbnNvbGUuYXNzZXJ0KGV4cHIpO1xyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBsZXQgQ3ViaXNtTG9nVmVyYm9zZSA9IChmbXQ6IHN0cmluZywgLi4uIGFyZ3M6IGFueVtdKSA9PiB7fTtcclxuZXhwb3J0IGxldCBDdWJpc21Mb2dEZWJ1ZyA9IChmbXQ6IHN0cmluZywgLi4uIGFyZ3M6IGFueVtdKSA9PiB7fTtcclxuZXhwb3J0IGxldCBDdWJpc21Mb2dJbmZvID0gKGZtdDogc3RyaW5nLCAuLi4gYXJnczogYW55W10pID0+IHt9O1xyXG5leHBvcnQgbGV0IEN1YmlzbUxvZ1dhcm5pbmcgPSAoZm10OiBzdHJpbmcsIC4uLiBhcmdzOiBhbnlbXSkgPT4ge307XHJcbmV4cG9ydCBsZXQgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLiBhcmdzOiBhbnlbXSkgPT4ge307XHJcblxyXG5pZihDU01fTE9HX0xFVkVMIDw9IENTTV9MT0dfTEVWRUxfVkVSQk9TRSlcclxue1xyXG4gICAgQ3ViaXNtTG9nVmVyYm9zZSA9IChmbXQ6IHN0cmluZywgLi4uIGFyZ3M6IGFueVtdKSA9PlxyXG4gICAge1xyXG4gICAgICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfVmVyYm9zZSwgXCJbVl1cIiArIGZtdCwgYXJncyk7XHJcbiAgICB9O1xyXG5cclxuICAgIEN1YmlzbUxvZ0RlYnVnID0gKGZtdDogc3RyaW5nLCAuLi4gYXJnczogYW55W10pID0+XHJcbiAgICB7XHJcbiAgICAgICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9EZWJ1ZywgXCJbRF1cIiArIGZtdCwgYXJncyk7XHJcbiAgICB9O1xyXG5cclxuICAgIEN1YmlzbUxvZ0luZm8gPSAoZm10OiBzdHJpbmcsIC4uLiBhcmdzOiBhbnlbXSkgPT5cclxuICAgIHtcclxuICAgICAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0luZm8sIFwiW0ldXCIgKyBmbXQsIGFyZ3MpO1xyXG4gICAgfTtcclxuXHJcbiAgICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi4gYXJnczogYW55W10pID0+XHJcbiAgICB7XHJcbiAgICAgICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCBcIltXXVwiICsgZm10LCBhcmdzKTtcclxuICAgIH07XHJcblxyXG4gICAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLiBhcmdzOiBhbnlbXSkgPT5cclxuICAgIHtcclxuICAgICAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCBcIltFXVwiICsgZm10LCBhcmdzKTtcclxuICAgIH07XHJcbn1cclxuZWxzZSBpZihDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfREVCVUcpXHJcbntcclxuICAgIEN1YmlzbUxvZ0RlYnVnID0gKGZtdDogc3RyaW5nLCAuLi4gYXJnczogYW55W10pID0+XHJcbiAgICB7XHJcbiAgICAgICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9EZWJ1ZywgXCJbRF1cIiArIGZtdCwgYXJncyk7XHJcbiAgICB9O1xyXG5cclxuICAgIEN1YmlzbUxvZ0luZm8gPSAoZm10OiBzdHJpbmcsIC4uLiBhcmdzOiBhbnlbXSkgPT5cclxuICAgIHtcclxuICAgICAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0luZm8sIFwiW0ldXCIgKyBmbXQsIGFyZ3MpO1xyXG4gICAgfTtcclxuXHJcbiAgICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi4gYXJnczogYW55W10pID0+XHJcbiAgICB7XHJcbiAgICAgICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCBcIltXXVwiICsgZm10LCBhcmdzKTtcclxuICAgIH07XHJcblxyXG4gICAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLiBhcmdzOiBhbnlbXSkgPT5cclxuICAgIHtcclxuICAgICAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCBcIltFXVwiICsgZm10LCBhcmdzKTtcclxuICAgIH07XHJcbn1cclxuZWxzZSBpZihDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfSU5GTylcclxue1xyXG4gICAgQ3ViaXNtTG9nSW5mbyA9IChmbXQ6IHN0cmluZywgLi4uIGFyZ3M6IGFueVtdKSA9PlxyXG4gICAge1xyXG4gICAgICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfSW5mbywgXCJbSV1cIiArIGZtdCwgYXJncyk7XHJcbiAgICB9O1xyXG5cclxuICAgIEN1YmlzbUxvZ1dhcm5pbmcgPSAoZm10OiBzdHJpbmcsIC4uLiBhcmdzOiBhbnlbXSkgPT5cclxuICAgIHtcclxuICAgICAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX1dhcm5pbmcsIFwiW1ddXCIgKyBmbXQsIGFyZ3MpO1xyXG4gICAgfTtcclxuXHJcbiAgICBDdWJpc21Mb2dFcnJvciA9IChmbXQ6IHN0cmluZywgLi4uIGFyZ3M6IGFueVtdKSA9PlxyXG4gICAge1xyXG4gICAgICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRXJyb3IsIFwiW0VdXCIgKyBmbXQsIGFyZ3MpO1xyXG4gICAgfTtcclxufVxyXG5lbHNlIGlmKENTTV9MT0dfTEVWRUwgPT0gQ1NNX0xPR19MRVZFTF9XQVJOSU5HKVxyXG57XHJcbiAgICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi4gYXJnczogYW55W10pID0+XHJcbiAgICB7XHJcbiAgICAgICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9XYXJuaW5nLCBcIltXXVwiICsgZm10LCBhcmdzKTtcclxuICAgIH07XHJcblxyXG4gICAgQ3ViaXNtTG9nRXJyb3IgPSAoZm10OiBzdHJpbmcsIC4uLiBhcmdzOiBhbnlbXSkgPT5cclxuICAgIHtcclxuICAgICAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCBcIltFXVwiICsgZm10LCBhcmdzKTtcclxuICAgIH07XHJcbn1cclxuZWxzZSBpZihDU01fTE9HX0xFVkVMID09IENTTV9MT0dfTEVWRUxfRVJST1IpXHJcbntcclxuICAgIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi4gYXJnczogYW55W10pID0+XHJcbiAgICB7XHJcbiAgICAgICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9FcnJvciwgXCJbRV1cIiArIGZtdCwgYXJncyk7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vLy0tLS0tLS0tLS0tLSBMSVZFMkQgTkFNRVNQQUNFIC0tLS0tLS0tLS0tLVxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29ya1xyXG57XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg4fjg5Djg4PjgrDnlKjjga7jg6bjg7zjg4bjgqPjg6rjg4bjgqPjgq/jg6njgrnjgIJcclxuICAgICAqIOODreOCsOOBruWHuuWKm+OAgeODkOOCpOODiOOBruODgOODs+ODl+OBquOBqVxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgQ3ViaXNtRGVidWdcclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg63jgrDjgpLlh7rlipvjgZnjgovjgILnrKzkuIDlvJXmlbDjgavjg63jgrDjg6zjg5njg6vjgpLoqK3lrprjgZnjgovjgIJcclxuICAgICAgICAgKiBDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgp5pmC44Gr44Kq44OX44K344On44Oz44Gn6Kit5a6a44GV44KM44Gf44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5LiL5Zue44KL5aC05ZCI44Gv44Ot44Kw44Gr5Ye644GV44Gq44GE44CCXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGxvZ0xldmVsIOODreOCsOODrOODmeODq+OBruioreWumlxyXG4gICAgICAgICAqIEBwYXJhbSBmb3JtYXQg5pu45byP5LuY44GN5paH5a2X5YiXXHJcbiAgICAgICAgICogQHBhcmFtIC4uLiBhcmdzIOWPr+WkiemVt+W8leaVsFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgcHJpbnQobG9nTGV2ZWw6IExvZ0xldmVsLCBmb3JtYXQ6IHN0cmluZywgLi4uIGFyZ3M6IGFueVtdKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8g44Kq44OX44K344On44Oz44Gn6Kit5a6a44GV44KM44Gf44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5LiL5Zue44KL5aC05ZCI44Gv44Ot44Kw44Gr5Ye644GV44Gq44GEXHJcbiAgICAgICAgICAgIC8vIGlmKGxvZ0xldmVsIDwgQ3ViaXNtRnJhbWV3b3JrLmdldExvZ2dpbmdMZXZlbCgpKVxyXG4gICAgICAgICAgICAvLyB7XHJcbiAgICAgICAgICAgIC8vICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFRPRE9cclxuICAgICAgICAgICAgLy8gY29uc3QgQ29yZTo6Y3NtTG9nRnVuY3Rpb24gbG9nUHJpbnQgPSBDdWJpc21GcmFtZXdvcms6OkNvcmVMb2dGdW5jdGlvbjtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmICghbG9nUHJpbnQpXHJcbiAgICAgICAgICAgIC8vICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBsZXQgYnVmZmVyOiBzdHJpbmcgPSBmb3JtYXQ7XHJcbiAgICAgICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgL1xceyhcXGQrKVxcfS9nLFxyXG4gICAgICAgICAgICAgICAgKG0sIGspID0+ICAgLy8gbT1cInswfVwiLCBrPVwiMFwiXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3Nba107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGxvZ1ByaW50KGJ1ZmZlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg4fjg7zjgr/jgYvjgonmjIflrprjgZfjgZ/plbfjgZXjgaDjgZHjg4Djg7Pjg5flh7rlipvjgZnjgovjgIJcclxuICAgICAgICAgKiBDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgp5pmC44Gr44Kq44OX44K344On44Oz44Gn6Kit5a6a44GV44KM44Gf44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5LiL5Zue44KL5aC05ZCI44Gv44Ot44Kw44Gr5Ye644GV44Gq44GE44CCXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGxvZ0xldmVsIOODreOCsOODrOODmeODq+OBruioreWumlxyXG4gICAgICAgICAqIEBwYXJhbSBkYXRhIOODgOODs+ODl+OBmeOCi+ODh+ODvOOCv1xyXG4gICAgICAgICAqIEBwYXJhbSBsZW5ndGgg44OA44Oz44OX44GZ44KL6ZW344GVXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBkdW1wQnl0ZXMobG9nTGV2ZWw6IExvZ0xldmVsLCBkYXRhOiBVaW50OEFycmF5LCBsZW5ndGg6IG51bWJlcik6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgJSAxNiA9PSAwICYmIGkgPiAwKSB0aGlzLnByaW50KGxvZ0xldmVsLCBcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgJSA4ID09IDAgJiYgaSA+IDApIHRoaXMucHJpbnQobG9nTGV2ZWwsIFwiICBcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByaW50KGxvZ0xldmVsLCBcInswfSBcIiwgKGRhdGFbaV0gJiAweEZGKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5wcmludChsb2dMZXZlbCwgXCJcXG5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBwcml2YXRlIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByaXZhdGUgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLy0tLS0tLS0tLS0tLSBMSVZFMkQgTkFNRVNQQUNFIC0tLS0tLS0tLS0tLSIsIi8qXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwOi8vbGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3Ntc3RyaW5nfSBmcm9tIFwiLi4vdHlwZS9jc21zdHJpbmdcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtbWFwfSBmcm9tIFwiLi4vdHlwZS9jc21tYXBcIjtcclxuaW1wb3J0IHtMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yfSBmcm9tIFwiLi4vdHlwZS9jc212ZWN0b3JcIjtcclxuaW1wb3J0IHtDdWJpc21Mb2dJbmZvfSBmcm9tIFwiLi9jdWJpc21kZWJ1Z1wiO1xyXG5pbXBvcnQge3N0cnRvZH0gZnJvbSBcIi4uL2xpdmUyZGN1YmlzbWZyYW1ld29ya1wiO1xyXG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcclxuaW1wb3J0IGNzbVZlY3Rvcl9pdGVyYXRvciA9IGNzbXZlY3Rvci5pdGVyYXRvcjtcclxuaW1wb3J0IGNzbU1hcCA9IGNzbW1hcC5jc21NYXA7XHJcbmltcG9ydCBjc21NYXBfaXRlcmF0b3IgPSBjc21tYXAuaXRlcmF0b3I7XHJcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmtcclxue1xyXG4gICAgLy8gU3RhdGljSW5pdGlhbGl6ZU5vdEZvckNsaWVudENhbGwoKeOBp+WIneacn+WMluOBmeOCi1xyXG4gICAgY29uc3QgQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSDogc3RyaW5nID0gXCJFcnJvcjogdHlwZSBtaXNtYXRjaFwiO1xyXG4gICAgY29uc3QgQ1NNX0pTT05fRVJST1JfSU5ERVhfT0ZfQk9VTkRTOiBzdHJpbmcgPSBcIkVycm9yOiBpbmRleCBvdXQgb2YgYm91bmRzXCI7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OR44O844K544GX44GfSlNPTuOCqOODrOODoeODs+ODiOOBruimgee0oOOBruWfuuW6leOCr+ODqeOCueOAglxyXG4gICAgICovXHJcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgVmFsdWVcclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDopoHntKDjgpLmloflrZfliJflnovjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlPzogc3RyaW5nLCBpbmRlbnQ/OiBzdHJpbmcpOiBzdHJpbmc7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+Wei+OBp+i/lOOBmShzdHJpbmcpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFJhd1N0cmluZyhkZWZhdWx0VmFsdWU/OiBzdHJpbmcsIGluZGVudD86IHN0cmluZyk6IHN0cmluZ1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZSwgaW5kZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOimgee0oOOCkuaVsOWApOWei+OBp+i/lOOBmShudW1iZXIpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHRvSW50KGRlZmF1bHRWYWx1ZTogbnVtYmVyID0gMCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOimgee0oOOCkuaVsOWApOWei+OBp+i/lOOBmShudW1iZXIpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHRvRmxvYXQoZGVmYXVsdFZhbHVlOiBudW1iZXIgPSAwKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6KaB57Sg44KS55yf5YG95YCk44Gn6L+U44GZKGJvb2xlYW4pXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHRvQm9vbGVhbihkZWZhdWx0VmFsdWU6IGJvb2xlYW4gPSBmYWxzZSk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrXjgqTjgrrjgpLov5TjgZlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6KaB57Sg44KS6YWN5YiX44Gn6L+U44GZKFZhbHVlW10pXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldEFycmF5KGRlZmF1bHRWYWx1ZTogVmFsdWVbXSA9IG51bGwpOiBWYWx1ZVtdXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6KaB57Sg44KS44Kz44Oz44OG44OK44Gn6L+U44GZKGFycmF5KVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRWZWN0b3IoZGVmYXVsdFZhbHVlPzogY3NtVmVjdG9yPFZhbHVlPik6IGNzbVZlY3RvcjxWYWx1ZT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDopoHntKDjgpLjg57jg4Pjg5fjgafov5TjgZkoY3NtTWFwPGNzbVN0cmluZywgVmFsdWU+KVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRNYXAoZGVmYXVsdFZhbHVlPzogY3NtTWFwPHN0cmluZywgVmFsdWU+KTogY3NtTWFwPHN0cmluZywgVmFsdWU+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Oe44OD44OX44Gu44Kt44O85LiA6Kan44KS44Kz44Oz44OG44OK44Gn6L+U44GZXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHJldHVybiDjg57jg4Pjg5fjga7jgq3jg7zjga7kuIDopqdcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0S2V5cygpOiBjc21WZWN0b3I8c3RyaW5nPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIFZhbHVlLnNfZHVtbXlLZXlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVmFsdWXjga7nqK7poZ7jgYzjgqjjg6njg7zlgKTjgarjgol0cnVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzRXJyb3IoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVmFsdWXjga7nqK7poZ7jgYxudWxs44Gq44KJdHJ1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc051bGwoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVmFsdWXjga7nqK7poZ7jgYznnJ/lgb3lgKTjgarjgol0cnVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzQm9vbCgpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBWYWx1ZeOBrueorumhnuOBjOaVsOWApOWei+OBquOCiXRydWVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNGbG9hdCgpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBWYWx1ZeOBrueorumhnuOBjOaWh+Wtl+WIl+OBquOCiXRydWVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNTdHJpbmcoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVmFsdWXjga7nqK7poZ7jgYzphY3liJfjgarjgol0cnVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzQXJyYXkoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVmFsdWXjga7nqK7poZ7jgYzjg57jg4Pjg5flnovjgarjgol0cnVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzTWFwKCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW8leaVsOOBruWApOOBqOetieOBl+OBkeOCjOOBsHRydWVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBjc21TdHJpbmcpOiBib29sZWFuO1xyXG4gICAgICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IHN0cmluZyk6IGJvb2xlYW47XHJcbiAgICAgICAgcHVibGljIGVxdWFscyh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbjtcclxuICAgICAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBib29sZWFuKTogYm9vbGVhbjtcclxuICAgICAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBhbnkpOmJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFZhbHVl44Gu5YCk44GM6Z2Z55qE44Gq44KJdHJ1ZeOAgemdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc1N0YXRpYygpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBWYWx1ZeOBq+OCqOODqeODvOWApOOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRFcnJvck5vdEZvckNsaWVudENhbGwoZXJyb3JTdHI6IHN0cmluZyk6IFZhbHVlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gVmFsdWUuZXJyb3JWYWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIneacn+WMlueUqOODoeOCveODg+ODiVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RhdGljSW5pdGlhbGl6ZU5vdEZvckNsaWVudENhbGwoKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgSnNvbkJvb2xlYW4udHJ1ZVZhbHVlID0gbmV3IEpzb25Cb29sZWFuKHRydWUpO1xyXG4gICAgICAgICAgICBKc29uQm9vbGVhbi5mYWxzZVZhbHVlID0gbmV3IEpzb25Cb29sZWFuKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIEpzb25FcnJvci5lcnJvclZhbHVlID0gbmV3IEpzb25FcnJvcihcIkVSUk9SXCIsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLm51bGxWYWx1ZSA9IG5ldyBKc29uTnVsbHZhbHVlKCk7XHJcblxyXG4gICAgICAgICAgICBWYWx1ZS5zX2R1bW15S2V5cyA9IG5ldyBjc21WZWN0b3I8c3RyaW5nPigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg6rjg6rjg7zjgrnnlKjjg6Hjgr3jg4Pjg4lcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0YXRpY1JlbGVhc2VOb3RGb3JDbGllbnRDYWxsKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEpzb25Cb29sZWFuLnRydWVWYWx1ZSA9IHZvaWQgMDtcclxuICAgICAgICAgICAgSnNvbkJvb2xlYW4uZmFsc2VWYWx1ZSA9IHZvaWQgMDtcclxuICAgICAgICAgICAgSnNvbkVycm9yLmVycm9yVmFsdWUgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIFZhbHVlLm51bGxWYWx1ZSA9IHZvaWQgMDtcclxuICAgICAgICAgICAgVmFsdWUuc19kdW1teUtleXMgPSB2b2lkIDA7XHJcblxyXG4gICAgICAgICAgICBKc29uQm9vbGVhbi50cnVlVmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICBKc29uQm9vbGVhbi5mYWxzZVZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgSnNvbkVycm9yLmVycm9yVmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICBWYWx1ZS5udWxsVmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICBWYWx1ZS5zX2R1bW15S2V5cyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgX3N0cmluZ0J1ZmZlcjogc3RyaW5nOyAvLyDmloflrZfliJfjg5Djg4Pjg5XjgqFcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc19kdW1teUtleXM6IGNzbVZlY3RvcjxzdHJpbmc+OyAvLyDjg4Djg5/jg7zjgq3jg7xcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBlcnJvclZhbHVlOiBWYWx1ZTsgICAvLyDkuIDmmYLnmoTjgarov5TjgorlgKTjgajjgZfjgabov5TjgZnjgqjjg6njg7zjgIIgQ3ViaXNtRnJhbWV3b3JrOjpEaXNwb3Nl44GZ44KL44G+44Gn44GvZGVsZXRl44GX44Gq44GEXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBudWxsVmFsdWU6IFZhbHVlOyAgICAvLyDkuIDmmYLnmoTjgarov5TjgorlgKTjgajjgZfjgabov5TjgZlOVUxM44CCICAgQ3ViaXNtRnJhbWV3b3JrOjpEaXNwb3Nl44GZ44KL44G+44Gn44GvZGVsZXRl44GX44Gq44GEXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBc2NpaeaWh+Wtl+OBruOBv+WvvuW/nOOBl+OBn+acgOWwj+mZkOOBrui7vemHj0pTT07jg5Hjg7zjgrXjgIJcclxuICAgICAqIOS7leanmOOBr0pTT07jga7jgrXjg5bjgrvjg4Pjg4jjgajjgarjgovjgIJcclxuICAgICAqIOioreWumuODleOCoeOCpOODqyhtb2RlbDMuanNvbinjgarjganjga7jg63jg7zjg4nnlKhcclxuICAgICAqIFxyXG4gICAgICogW+acquWvvuW/nOmgheebrl1cclxuICAgICAqIOODu+aXpeacrOiqnuOBquOBqeOBrumdnkFTQ0lJ5paH5a2XXHJcbiAgICAgKiDjg7tl44Gr44KI44KL5oyH5pWw6KGo54++XHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBDdWJpc21Kc29uXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKGJ1ZmZlcj86IEFycmF5QnVmZmVyLCBsZW5ndGg/OiBudW1iZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYoYnVmZmVyICE9IHVuZGVmaW5lZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZUJ5dGVzKGJ1ZmZlciwgbGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OQ44Kk44OI44OH44O844K/44GL44KJ55u05o6l44Ot44O844OJ44GX44Gm44OR44O844K544GZ44KLXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGJ1ZmZlciDjg5Djg4Pjg5XjgqFcclxuICAgICAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjgrXjgqTjgrpcclxuICAgICAgICAgKiBAcmV0dXJuIEN1YmlzbUpzb27jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgILlpLHmlZfjgZfjgZ/jgolOVUxMXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGpzb24gPSBuZXcgQ3ViaXNtSnNvbigpO1xyXG4gICAgICAgICAgICBjb25zdCBzdWNjZWVkZWQ6IGJvb2xlYW4gPSBqc29uLnBhcnNlQnl0ZXMoYnVmZmVyLCBzaXplKTtcclxuXHJcbiAgICAgICAgICAgIGlmKCFzdWNjZWVkZWQpIFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Kc29uLmRlbGV0ZShqc29uKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicGFyc2VCeXRlcyBpcyBmYWlsZWRcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBqc29uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Kq44OW44K444Kn44Kv44OI44Gu6Kej5pS+5Yem55CGXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHBhcmFtIGluc3RhbmNlIEN1YmlzbUpzb27jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShpbnN0YW5jZTogQ3ViaXNtSnNvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlID0gdm9pZCAwO1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu44Or44O844OI6KaB57Sg44KS6L+U44GZXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFJvb3QoKTogVmFsdWVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yb290O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIFVuaWNvZGXjga7jg5DjgqTjg4rjg6rjgpJTdHJpbmfjgavlpInmj5tcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gYnVmZmVyIOWkieaPm+OBmeOCi+ODkOOCpOODiuODquODh+ODvOOCv1xyXG4gICAgICAgICAqIEByZXR1cm4g5aSJ5o+b5b6M44Gu5paH5a2X5YiXXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFycmF5QnVmZmVyVG9TdHJpbmcoYnVmZmVyOiBBcnJheUJ1ZmZlcik6IHN0cmluZ1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGVuY29kZWRTdHJpbmc6IHN0cmluZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSk7XHJcbiAgICAgICAgICAgIGxldCBkZWNvZGVkU3RyaW5nOiBzdHJpbmcgPSBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGVuY29kZWRTdHJpbmcpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRlY29kZWRTdHJpbmc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBKU09O44Gu44OR44O844K544KS5a6f6KGM44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIGJ1ZmZlciAgICDjg5Hjg7zjgrnlr77osaHjga7jg4fjg7zjgr/jg5DjgqTjg4hcclxuICAgICAgICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODh+ODvOOCv+ODkOOCpOODiOOBruOCteOCpOOCulxyXG4gICAgICAgICAqIHJldHVybiB0cnVlIDog5oiQ5YqfXHJcbiAgICAgICAgICogcmV0dXJuIGZhbHNlOiDlpLHmlZdcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcGFyc2VCeXRlcyhidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgZW5kUG9zOiBudW1iZXJbXSA9IG5ldyBBcnJheSgxKTsgLy8g5Y+C54Wn5rih44GX44Gr44GZ44KL44Gf44KB6YWN5YiXXHJcbiAgICAgICAgICAgIGxldCBkZWNvZGVCdWZmZXI6IHN0cmluZyA9IHRoaXMuYXJyYXlCdWZmZXJUb1N0cmluZyhidWZmZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl9yb290ID0gdGhpcy5wYXJzZVZhbHVlKGRlY29kZUJ1ZmZlciwgc2l6ZSwgMCwgZW5kUG9zKTtcclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX2Vycm9yKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLl9lcnJvcik7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3RyYnVmOiBzdHJpbmcgPSAnXFwwJztcclxuICAgICAgICAgICAgICAgIHN0cmJ1ZiA9IFwiSnNvbiBwYXJzZSBlcnJvciA6IEBsaW5lIFwiICsgKHRoaXMuX2xpbmVDb3VudCArIDEpICsgXCJcXG5cIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3QgPSBuZXcgSnNvblN0cmluZyhzdHJidWYpO1xyXG5cclxuICAgICAgICAgICAgICAgIEN1YmlzbUxvZ0luZm8oXCJ7MH1cIiwgdGhpcy5fcm9vdC5nZXRSYXdTdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZih0aGlzLl9yb290ID09IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3QgPSBuZXcgSnNvbkVycm9yKG5ldyBjc21TdHJpbmcodGhpcy5fZXJyb3IpLCBmYWxzZSk7IC8vIHJvb3Tjga/op6PmlL7jgZXjgozjgovjga7jgafjgqjjg6njg7zjgqrjg5bjgrjjgqfjgq/jg4jjgpLliKXpgJTkvZzmiJDjgZnjgotcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODkeODvOOCueaZguOBruOCqOODqeODvOWApOOCkui/lOOBmVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRQYXJzZUVycm9yKCk6IHN0cmluZyBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODq+ODvOODiOimgee0oOOBruasoeOBruimgee0oOOBjOODleOCoeOCpOODq+OBrue1guerr+OBoOOBo+OBn+OCiXRydWXjgpLov5TjgZlcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY2hlY2tFbmRPZkZpbGUoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jvb3QuZ2V0QXJyYXkoKVsxXS5lcXVhbHMoXCJFT0ZcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBKU09O44Ko44Os44Oh44Oz44OI44GL44KJVmFsdWUoZmxvYXQsU3RyaW5nLFZhbHVlKixBcnJheSxudWxsLHRydWUsZmFsc2Up44KS44OR44O844K544GZ44KLXHJcbiAgICAgICAgICog44Ko44Os44Oh44Oz44OI44Gu5pu45byP44Gr5b+c44GY44Gm5YaF6YOo44GnUGFyc2VTdHJpbmcoKSwgUGFyc2VPYmplY3QoKSwgUGFyc2VBcnJheSgp44KS5ZG844G2XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gICBidWZmZXIgICAgICBKU09O44Ko44Os44Oh44Oz44OI44Gu44OQ44OD44OV44KhXHJcbiAgICAgICAgICogQHBhcmFtICAgbGVuZ3RoICAgICAg44OR44O844K544GZ44KL6ZW344GVXHJcbiAgICAgICAgICogQHBhcmFtICAgYmVnaW4gICAgICAg44OR44O844K544KS6ZaL5aeL44GZ44KL5L2N572uXHJcbiAgICAgICAgICogQHBhcmFtICAgb3V0RW5kUG9zICAg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXHJcbiAgICAgICAgICogQHJldHVybiAgICAgIOODkeODvOOCueOBi+OCieWPluW+l+OBl+OBn1ZhbHVl44Kq44OW44K444Kn44Kv44OIXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJvdGVjdGVkIHBhcnNlVmFsdWUoYnVmZmVyOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyLCBiZWdpbjogbnVtYmVyLCBvdXRFbmRQb3M6IG51bWJlcltdKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBvOiBWYWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBpOiBudW1iZXIgPSBiZWdpbjtcclxuICAgICAgICAgICAgbGV0IGY6IG51bWJlcjtcclxuXHJcbiAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCBjOiBzdHJpbmcgPSBidWZmZXJbaV07XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2goYylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJy0nOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnLic6XHJcbiAgICAgICAgICAgICAgICBjYXNlICcwJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJzEnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnMic6XHJcbiAgICAgICAgICAgICAgICBjYXNlICczJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJzQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnNSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICc2JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJzcnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnOCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICc5JzpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhZnRlclN0cmluZzogc3RyaW5nW10gPSBuZXcgQXJyYXkoMSk7IC8vIOWPgueFp+a4oeOBl+OBq+OBmeOCi+OBn+OCgVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmID0gc3RydG9kKGJ1ZmZlci5zbGljZShpKSwgYWZ0ZXJTdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBidWZmZXIuaW5kZXhPZihhZnRlclN0cmluZ1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSnNvbkZsb2F0KGYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ1xcXCInOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSnNvblN0cmluZyh0aGlzLnBhcnNlU3RyaW5nKGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgb3V0RW5kUG9zKSk7IC8vIFxcXCLjga7mrKHjga7mloflrZfjgYvjgolcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1snOlxyXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0aGlzLnBhcnNlQXJyYXkoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBvdXRFbmRQb3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAneyc6XHJcbiAgICAgICAgICAgICAgICAgICAgbyA9IHRoaXMucGFyc2VPYmplY3QoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBvdXRFbmRQb3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbic6IC8vIG51bGzku6XlpJbjgavjgarjgYRcclxuICAgICAgICAgICAgICAgICAgICBpZihpICsgMyA8IGxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBuZXcgSnNvbk51bGx2YWx1ZSgpOyAgICAvLyDop6PmlL7jgafjgY3jgovjgojjgYbjgavjgZnjgotcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJwYXJzZSBudWxsXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndCc6IC8vIHRydWXku6XlpJbjgavjgarjgYRcclxuICAgICAgICAgICAgICAgICAgICBpZihpICsgMyA8IGxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBKc29uQm9vbGVhbi50cnVlVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyA0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IFwicGFyc2UgdHJ1ZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2YnOiAvLyBmYWxzZeS7peWkluOBq+OBquOBhFxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGkgKyA0IDwgbGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IEpzb25Cb29sZWFuLmZhbHNlVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyA1O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiaWxsZWdhbCAnLCcgcG9zaXRpb25cIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG87XHJcbiAgICAgICAgICAgICAgICBjYXNlICcsJzogLy8gQXJyYXkgc2VwYXJhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcImlsbGVnYWwgJywnIHBvc2l0aW9uXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICBjYXNlICddJzogLy8g5LiN5q2j44Gq772d44Gg44GM44K544Kt44OD44OX44GZ44KL44CC6YWN5YiX44Gu5pyA5b6M44Gr5LiN6KaB44GqICwg44GM44GC44KL44Go5oCd44KP44KM44KLXHJcbiAgICAgICAgICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaTsgIC8vIOWQjOOBmOaWh+Wtl+OCkuWGjeWHpueQhlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnXFxuJzogXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcgJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1xcdCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdcXHInOlxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogLy8g44K544Kt44OD44OXXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJpbGxlZ2FsIGVuZCBvZiB2YWx1ZVwiO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOasoeOBruOAjFwi44CN44G+44Gn44Gu5paH5a2X5YiX44KS44OR44O844K544GZ44KL44CCXHJcbiAgICAgICAgICogICAgICBcclxuICAgICAgICAgKiBAcGFyYW0gICBzdHJpbmcgIC0+ICDjg5Hjg7zjgrnlr77osaHjga7mloflrZfliJdcclxuICAgICAgICAgKiBAcGFyYW0gICBsZW5ndGggIC0+ICDjg5Hjg7zjgrnjgZnjgovplbfjgZVcclxuICAgICAgICAgKiBAcGFyYW0gICBiZWdpbiAgIC0+ICDjg5Hjg7zjgrnjgpLplovlp4vjgZnjgovkvY3nva5cclxuICAgICAgICAgKiBAcGFyYW0gIG91dEVuZFBvcyAgIC0+ICDjg5Hjg7zjgrnntYLkuobmmYLjga7kvY3nva5cclxuICAgICAgICAgKiBAcmV0dXJuICAgICAg44OR44O844K544GX44Gf5paHRuWtl+WIl+imgee0oFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByb3RlY3RlZCBwYXJzZVN0cmluZyhzdHJpbmc6IHN0cmluZywgbGVuZ3RoOiBudW1iZXIsIGJlZ2luOiBudW1iZXIsIG91dEVuZFBvczogbnVtYmVyW10pOiBzdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgICAgICBsZXQgaSA9IGJlZ2luO1xyXG4gICAgICAgICAgICBsZXQgYzogc3RyaW5nLCBjMjogc3RyaW5nO1xyXG4gICAgICAgICAgICBsZXQgcmV0OiBjc21TdHJpbmcgPSBuZXcgY3NtU3RyaW5nKFwiXCIpO1xyXG4gICAgICAgICAgICBsZXQgYnVmU3RhcnQ6IG51bWJlciA9IGJlZ2luOyAvLyBzYnVm44Gr55m76Yyy44GV44KM44Gm44GE44Gq44GE5paH5a2X44Gu6ZaL5aeL5L2N572uXHJcblxyXG4gICAgICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjID0gc3RyaW5nW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaChjKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnXFxcIic644CALy8g57WC56uv44Gu4oCd44CB44Ko44K544Kx44O844OX5paH5a2X44Gv5Yil44Gr5Yem55CG44GV44KM44KL44Gu44Gn44GT44GT44Gr5p2l44Gq44GEXHJcbiAgICAgICAgICAgICAgICAgICAgeyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDE7ICAvLyDigJ3jga7mrKHjga7mloflrZdcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0LmFwcGVuZChzdHJpbmcuc2xpY2UoYnVmU3RhcnQpLCAoaSAtIGJ1ZlN0YXJ0KSk7IC8vIOWJjeOBruaWh+Wtl+OBvuOBp+OCkueZu+mMsuOBmeOCi1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0LnM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnLy8nOiAgLy8g44Ko44K544Kx44O844OX44Gu5aC05ZCIXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7IC8vIO+8kuaWh+Wtl+OCkuOCu+ODg+ODiOOBp+aJseOBhlxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGkgLSAxID4gYnVmU3RhcnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5hcHBlbmQoc3RyaW5nLnNsaWNlKGJ1ZlN0YXJ0KSwgKGkgLSBidWZTdGFydCkpOyAvLyDliY3jga7mloflrZfjgb7jgafjgpLnmbvpjLLjgZnjgotcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZTdGFydCA9IGkgKyAxOyAvLyDjgqjjgrnjgrHjg7zjg5fvvIjvvJLmloflrZcp44Gu5qyh44Gu5paH5a2X44GL44KJXHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCBsZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyID0gc3RyaW5nW2ldO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYzIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdcXFxcJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXFxcJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdcXFwiJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXFwiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcvJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICcvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdiJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXGInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2YnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xcZicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXHInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xcdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcInBhcnNlIHN0cmluZy91bmljb3JkIGVzY2FwZSBub3Qgc3VwcG9ydGVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcInBhcnNlIHN0cmluZy9lc2NhcGUgZXJyb3JcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJwYXJzZSBzdHJpbmcvaWxsZWdhbCBlbmRcIjtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBKU09O44Gu44Kq44OW44K444Kn44Kv44OI44Ko44Os44Oh44Oz44OI44KS44OR44O844K544GX44GmVmFsdWXjgqrjg5bjgrjjgqfjgq/jg4jjgpLov5TjgZlcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gYnVmZmVyICAgIEpTT07jgqjjg6zjg6Hjg7Pjg4jjga7jg5Djg4Pjg5XjgqFcclxuICAgICAgICAgKiBAcGFyYW0gbGVuZ3RoICAgIOODkeODvOOCueOBmeOCi+mVt+OBlVxyXG4gICAgICAgICAqIEBwYXJhbSBiZWdpbiAgICAg44OR44O844K544KS6ZaL5aeL44GZ44KL5L2N572uXHJcbiAgICAgICAgICogQHBhcmFtIG91dEVuZFBvcyDjg5Hjg7zjgrnntYLkuobmmYLjga7kvY3nva5cclxuICAgICAgICAgKiBAcmV0dXJuIOODkeODvOOCueOBi+OCieWPluW+l+OBl+OBn1ZhbHVl44Kq44OW44K444Kn44Kv44OIXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJvdGVjdGVkIHBhcnNlT2JqZWN0KGJ1ZmZlcjogc3RyaW5nLCBsZW5ndGg6IG51bWJlciwgYmVnaW46IG51bWJlciwgb3V0RW5kUG9zOiBudW1iZXJbXSk6IFZhbHVlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZih0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIGxldCByZXQ6IEpzb25NYXAgPSBuZXcgSnNvbk1hcCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gS2V5OiBWYWx1ZVxyXG4gICAgICAgICAgICBsZXQga2V5OiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgICAgICBsZXQgaTogbnVtYmVyID0gYmVnaW47XHJcbiAgICAgICAgICAgIGxldCBjOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgICAgICBsZXQgbG9jYWxSZXRFbmRQb3MyOiBudW1iZXJbXSA9IEFycmF5KDEpO1xyXG4gICAgICAgICAgICBsZXQgb2s6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vICwg44GM57aa44GP6ZmQ44KK44Or44O844OXXHJcbiAgICAgICAgICAgIGZvcig7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgRk9SX0xPT1A6IGZvcig7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjID0gYnVmZmVyW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnXFxcIic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBsb2NhbFJldEVuZFBvczIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLl9lcnJvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBsb2NhbFJldEVuZFBvczJbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9rID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgRk9SX0xPT1A7IC8vLS0gbG9vcOOBi+OCieWHuuOCi1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ30nOiAvLyDplonjgZjjgqvjg4PjgrNcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7IC8vIOepulxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzonOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiaWxsZWdhbCAnOicgcG9zaXRpb25cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnXFxuJzogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOyAgLy8g44K544Kt44OD44OX44GZ44KL5paH5a2XXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoIW9rKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJrZXkgbm90IGZvdW5kXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgb2sgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyA6IOOCkuODgeOCp+ODg+OCr1xyXG4gICAgICAgICAgICAgICAgRk9SX0xPT1AyOiBmb3IoOyBpIDwgbGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYyA9IGJ1ZmZlcltpXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGMpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzonOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgRk9SX0xPT1AyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ30nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiaWxsZWdhbCAnfScgcG9zaXRpb25cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnXFxuJzogdGhpcy5fbGluZUNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgJyAnOiBjYXNlICdcXHQnIDogY2FzZSAnXFxyJzpcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgIC8vIOOCueOCreODg+ODl+OBmeOCi+aWh+Wtl1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZighb2spXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcIic6JyBub3QgZm91bmRcIjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyDlgKTjgpLjg4Hjgqfjg4Pjgq9cclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZTogVmFsdWUgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBsZW5ndGgsIGksIGxvY2FsUmV0RW5kUG9zMik7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9lcnJvcilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH0gXHJcblxyXG4gICAgICAgICAgICAgICAgaSA9IGxvY2FsUmV0RW5kUG9zMlswXTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZXQucHV0KGtleSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0LnB1dChrZXksIHZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBGT1JfTE9PUDM6IGZvcig7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjID0gYnVmZmVyW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2goYylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnLCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIEZPUl9MT09QMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd9JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7IC8vIOato+W4uOe1guS6hlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1xcbic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOyAgLy8g44K544Kt44OD44OXXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiaWxsZWdhbCBlbmQgb2YgcGVyc2VPYmplY3RcIjtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDmrKHjga7jgIxcIuOAjeOBvuOBp+OBruaWh+Wtl+WIl+OCkuODkeODvOOCueOBmeOCi+OAglxyXG4gICAgICAgICAqIEBwYXJhbSBidWZmZXIgICAgSlNPTuOCqOODrOODoeODs+ODiOOBruODkOODg+ODleOCoVxyXG4gICAgICAgICAqIEBwYXJhbSBsZW5ndGggICAg44OR44O844K544GZ44KL6ZW344GVXHJcbiAgICAgICAgICogQHBhcmFtIGJlZ2luICAgICDjg5Hjg7zjgrnjgpLplovlp4vjgZnjgovkvY3nva5cclxuICAgICAgICAgKiBAcGFyYW0gb3V0RW5kUG9zIOODkeODvOOCuee1guS6huaZguOBruS9jee9rlxyXG4gICAgICAgICAqIEByZXR1cm4g44OR44O844K544GL44KJ5Y+W5b6X44GX44GfVmFsdWXjgqrjg5bjgrjjgqfjgq/jg4hcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcm90ZWN0ZWQgcGFyc2VBcnJheShidWZmZXI6IHN0cmluZywgbGVuZ3RoOiBudW1iZXIsIGJlZ2luOiBudW1iZXIsIG91dEVuZFBvczogbnVtYmVyW10pOiBWYWx1ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYodGhpcy5fZXJyb3IpICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgbGV0IHJldDpKc29uQXJyYXkgPSBuZXcgSnNvbkFycmF5KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBrZXkgOiB2YWx1ZVxyXG4gICAgICAgICAgICBsZXQgaTogbnVtYmVyID0gYmVnaW47XHJcbiAgICAgICAgICAgIGxldCBjOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIGxldCBsb2NhbFJldEVuZHBvczI6IG51bWJlcltdID0gbmV3IEFycmF5KDEpO1xyXG5cclxuICAgICAgICAgICAgLy8gLCDjgYzntprjgY/pmZDjgorjg6vjg7zjg5dcclxuICAgICAgICAgICAgZm9yKDsgaSA8IGxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyA6IOOCkuODgeOCp+ODg+OCr1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlOiBWYWx1ZSA9IHRoaXMucGFyc2VWYWx1ZShidWZmZXIsIGxlbmd0aCwgaSwgbG9jYWxSZXRFbmRwb3MyKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9lcnJvcilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkgPSBsb2NhbFJldEVuZHBvczJbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodmFsdWUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0LmFkZCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRk9SX0xPT1AzOlxyXG4gICAgICAgICAgICAgICAgLy8gYm9vbGVhbiBicmVha2ZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIEZPUl9MT09QOiBmb3IoOyBpIDwgbGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYyA9IGJ1ZmZlcltpXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGMpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcsJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJyZWFrZmxhZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBicmVhazsgLy8g5qyh44GuS0VZLCBWQWxVReOBuFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgRk9SX0xPT1A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ10nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0OyAvLyDntYLkuoZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnXFxuJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrdGhpcy5fbGluZUNvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jYXNlICcgJzogY2FzZSAnXFx0JzogY2FzZSAnXFxyJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8g44K544Kt44OD44OXXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXQgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJpbGxlZ2FsIGVuZCBvZiBwYXJzZU9iamVjdFwiO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF9lcnJvcjogc3RyaW5nOyAgICAgLy8g44OR44O844K55pmC44Gu44Ko44Op44O8XHJcbiAgICAgICAgX2xpbmVDb3VudDogbnVtYmVyOyAvLyDjgqjjg6njg7zloLHlkYrjgavnlKjjgYTjgovooYzmlbDjgqvjgqbjg7Pjg4hcclxuICAgICAgICBfcm9vdDogVmFsdWU7ICAgICAgIC8vIOODkeODvOOCueOBleOCjOOBn+ODq+ODvOODiOimgee0oFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkmZsb2F05YCk44Go44GX44Gm5omx44GGXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBKc29uRmxvYXQgZXh0ZW5kcyBWYWx1ZVxyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHY6IG51bWJlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBWYWx1ZeOBrueorumhnuOBjOaVsOWApOWei+OBquOCiXRydWVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNGbG9hdCgpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBzdHJidWY6IHN0cmluZyA9ICdcXDAnO1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHBhcnNlRmxvYXQoc3RyYnVmKTtcclxuICAgICAgICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gc3RyYnVmO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOimgee0oOOCkuaVsOWApOWei+OBp+i/lOOBmShudW1iZXIpXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHRvSW50KGRlZmF1bHRWYWx1ZTogbnVtYmVyID0gMCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuX3ZhbHVlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgdG9GbG9hdChkZWZhdWx0VmFsdWU6IG51bWJlciA9IDAuMCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5byV5pWw44Gu5YCk44Go562J44GX44GR44KM44GwdHJ1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IGNzbVN0cmluZyk6IGJvb2xlYW47XHJcbiAgICAgICAgcHVibGljIGVxdWFscyh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcclxuICAgICAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xyXG4gICAgICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IGJvb2xlYW4pOiBib29sZWFuO1xyXG4gICAgICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IGFueSk6Ym9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKCdudW1iZXInID09PSB0eXBlb2YodmFsdWUpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBpbnRcclxuICAgICAgICAgICAgICAgIGlmIChNYXRoLnJvdW5kKHZhbHVlKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBmbG9hdFxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PSB0aGlzLl92YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIF92YWx1ZTogbnVtYmVyOyAvLyBKU09O6KaB57Sg44Gu5YCkXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS55yf5YG95YCk44Go44GX44Gm5omx44GGXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjbGFzcyBKc29uQm9vbGVhbiBleHRlbmRzIFZhbHVlXHJcbiAgICB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFZhbHVl44Gu56iu6aGe44GM55yf5YG95YCk44Gq44KJdHJ1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc0Jvb2woKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDopoHntKDjgpLnnJ/lgb3lgKTjgafov5TjgZkoYm9vbGVhbilcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgdG9Cb29sZWFuKGRlZmF1bHRWYWx1ZTogYm9vbGVhbiA9IGZhbHNlKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jvb2xWYWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHRoaXMuX2Jvb2xWYWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgID8gXCJ0cnVlXCJcclxuICAgICAgICAgICAgICAgICAgICA6IFwiZmFsc2VcIjtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlvJXmlbDjga7lgKTjgajnrYnjgZfjgZHjgozjgbB0cnVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGVxdWFscyh2YWx1ZTogY3NtU3RyaW5nKTogYm9vbGVhbjtcclxuICAgICAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuO1xyXG4gICAgICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IG51bWJlcik6IGJvb2xlYW47XHJcbiAgICAgICAgcHVibGljIGVxdWFscyh2YWx1ZTogYm9vbGVhbik6IGJvb2xlYW47XHJcbiAgICAgICAgcHVibGljIGVxdWFscyh2YWx1ZTogYW55KTpib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoJ2Jvb2xlYW4nID09PSB0eXBlb2YodmFsdWUpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT0gdGhpcy5fYm9vbFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFZhbHVl44Gu5YCk44GM6Z2Z55qE44Gq44KJdHJ1ZSwg6Z2Z55qE44Gq44KJ6Kej5pS+44GX44Gq44GEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzU3RhdGljKCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKHY6IGJvb2xlYW4pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYm9vbFZhbHVlID0gdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyB0cnVlVmFsdWU6IEpzb25Cb29sZWFuOyAgLy8gdHJ1ZVxyXG4gICAgICAgIHN0YXRpYyBmYWxzZVZhbHVlOiBKc29uQm9vbGVhbjsgLy8gZmFsc2VcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfYm9vbFZhbHVlOiBib29sZWFuOyAvLyBKU09O6KaB57Sg44Gu5YCkXHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkuaWh+Wtl+WIl+OBqOOBl+OBpuaJseOBhlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgSnNvblN0cmluZyBleHRlbmRzIFZhbHVlXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKHM6IHN0cmluZyk7XHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKHM6IGNzbVN0cmluZylcclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoczogYW55KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgICAgIGlmKCdzdHJpbmcnID09PSB0eXBlb2YocykpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHMgaW5zdGFuY2VvZiBjc21TdHJpbmcpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHMucztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVmFsdWXjga7nqK7poZ7jgYzmloflrZfliJfjgarjgol0cnVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGlzU3RyaW5nKCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6KaB57Sg44KS5paH5a2X5YiX44Gn6L+U44GZKGNzbVN0cmluZ+WeiylcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZ1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOW8leaVsOOBruWApOOBqOetieOBl+OBkeOCjOOBsHRydWVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBjc21TdHJpbmcpOiBib29sZWFuO1xyXG4gICAgICAgIHB1YmxpYyBlcXVhbHModmFsdWU6IHN0cmluZyk6IGJvb2xlYW47XHJcbiAgICAgICAgcHVibGljIGVxdWFscyh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbjtcclxuICAgICAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBib29sZWFuKTogYm9vbGVhbjtcclxuICAgICAgICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBhbnkpOmJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mKHZhbHVlKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlciA9PSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgY3NtU3RyaW5nKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuX3N0cmluZ0J1ZmZlciA9PSB2YWx1ZS5zKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEpTT07jg5Hjg7zjgrnmmYLjga7jgqjjg6njg7zntZDmnpzjgILmloflrZfliJflnovjga7jgojjgYbjgavjgbXjgovjgb7jgYZcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEpzb25FcnJvciBleHRlbmRzIEpzb25TdHJpbmdcclxuICAgIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWXjgIHpnZnnmoTjgarjgonop6PmlL7jgZfjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNTdGF0aWMoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzU3RhdGljO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Ko44Op44O85oOF5aCx44KS44K744OD44OI44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChzOiBzdHJpbmcpOiBWYWx1ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gcztcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoczogY3NtU3RyaW5nfHN0cmluZywgaXNTdGF0aWM6IGJvb2xlYW4pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihcInN0cmluZ1wiID09PSB0eXBlb2YocykpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIocyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5faXNTdGF0aWMgPSBpc1N0YXRpYztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFZhbHVl44Gu56iu6aGe44GM44Ko44Op44O85YCk44Gq44KJdHJ1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc0Vycm9yKCk6IGJvb2xlYW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBfaXNTdGF0aWM6IGJvb2xlYW47IC8vIOmdmeeahOOBqlZhbHVl44GL44Gp44GG44GLXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KSTlVMTOWApOOBqOOBl+OBpuaMgeOBpFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY2xhc3MgSnNvbk51bGx2YWx1ZSBleHRlbmRzIFZhbHVlXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVmFsdWXjga7nqK7poZ7jgYxOVUxM5YCk44Gq44KJdHJ1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc051bGwoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlOiBzdHJpbmcsIGluZGVudDogc3RyaW5nKTogc3RyaW5nXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVmFsdWXjga7lgKTjgYzpnZnnmoTjgarjgol0cnVlLCDpnZnnmoTjgarjgonop6PmlL7jgZfjgarjgYRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNTdGF0aWMoKTogYm9vbGVhblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IFwiTnVsbFZhbHVlXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpLphY3liJfjgajjgZfjgabmjIHjgaRcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEpzb25BcnJheSBleHRlbmRzIFZhbHVlXHJcbiAgICB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGNvbnN0cnVjdG9yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FycmF5ID0gbmV3IGNzbVZlY3RvcjxWYWx1ZT4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgaXRlOiBjc21WZWN0b3JfaXRlcmF0b3I8VmFsdWU+ID0gdGhpcy5fYXJyYXkuYmVnaW4oKTsgaXRlLm5vdEVxdWFsKHRoaXMuX2FycmF5LmVuZCgpKTsgaXRlLnByZUluY3JlbWVudCgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdjogVmFsdWUgPSBpdGUucHRyKCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmKHYgJiYgIXYuaXNTdGF0aWMoKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2ID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHYgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBWYWx1ZeOBrueorumhnuOBjOmFjeWIl+OBquOCiXRydWVcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgaXNBcnJheSgpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBzdHJpbmdCdWZmZXI6IHN0cmluZyA9IGluZGVudCArIFwiW1xcblwiO1xyXG5cclxuICAgICAgICAgICAgZm9yKGxldCBpdGU6IGNzbVZlY3Rvcl9pdGVyYXRvcjxWYWx1ZT4gPSB0aGlzLl9hcnJheS5iZWdpbigpOyBpdGUubm90RXF1YWwodGhpcy5fYXJyYXkuZW5kKCkpOyBpdGUuaW5jcmVtZW50KCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCB2OiBWYWx1ZSA9IGl0ZS5wdHIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciArPSBpbmRlbnQgKyBcIlwiICsgdi5nZXRTdHJpbmcoaW5kZW50ICsgXCIgXCIpICsgXCJcXG5cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gc3RyaW5nQnVmZmVyICsgaW5kZW50ICsgXCJdXFxuXCI7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6YWN5YiX6KaB57Sg44KS6L+95Yqg44GZ44KLXHJcbiAgICAgICAgICogQHBhcmFtIHYg6L+95Yqg44GZ44KL6KaB57SgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGFkZCh2OiBWYWx1ZSk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FycmF5LnB1c2hCYWNrKHYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6KaB57Sg44KS44Kz44Oz44OG44OK44Gn6L+U44GZKGNzbVZlY3RvcjxWYWx1ZT4pXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFZlY3RvcihkZWZhdWx0VmFsdWU6IGNzbVZlY3RvcjxWYWx1ZT4gPSBudWxsKTogY3NtVmVjdG9yPFZhbHVlPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6KaB57Sg44Gu5pWw44KS6L+U44GZXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFNpemUoKTogbnVtYmVyXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXJyYXkuZ2V0U2l6ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfYXJyYXk6IGNzbVZlY3RvcjxWYWx1ZT47IC8vIEpTT07opoHntKDjga7lgKRcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpLjg57jg4Pjg5fjgajjgZfjgabmjIHjgaRcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNsYXNzIEpzb25NYXAgZXh0ZW5kcyBWYWx1ZVxyXG4gICAge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICAvL3RoaXMuX2tleXMgPSBuZXcgY3NtVmVjdG9yPHN0cmluZz4oKTtcclxuICAgICAgICAgICAgdGhpcy5fbWFwID0gbmV3IGNzbU1hcDxzdHJpbmcsIFZhbHVlPigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIHJlbGVhc2UoKTogdm9pZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlOiBjc21NYXBfaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9tYXAuYmVnaW4oKTtcclxuXHJcbiAgICAgICAgICAgIHdoaWxlKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdjogVmFsdWUgPSBpdGUucHRyKCkuc2Vjb25kO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZih2ICYmICF2LmlzU3RhdGljKCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdiA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgICAgICB2ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpdGUucHJlSW5jcmVtZW50KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFZhbHVl44Gu5YCk44GMTWFw5Z6L44Gq44KJdHJ1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpc01hcCgpOiBib29sZWFuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBpbmRlbnQgKyBcIntcXG5cIjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZTogY3NtTWFwX2l0ZXJhdG9yPHN0cmluZywgVmFsdWU+ID0gdGhpcy5fbWFwLmJlZ2luKCk7XHJcbiAgICAgICAgICAgIHdoaWxlKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBpdGUucHRyKCkuZmlyc3Q7XHJcbiAgICAgICAgICAgICAgICBsZXQgdjogVmFsdWUgPSBpdGUucHRyKCkuc2Vjb25kO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciArPSBpbmRlbnQgKyBcIiBcIiArIGtleSArIFwiIDogXCIgKyB2LmdldFN0cmluZyhpbmRlbnQgKyBcIiAgIFwiKSArIFwiIFxcblwiO1xyXG4gICAgICAgICAgICAgICAgaXRlLnByZUluY3JlbWVudCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgKz0gaW5kZW50ICsgXCJ9XFxuXCI7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6KaB57Sg44KSTWFw5Z6L44Gn6L+U44GZXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldE1hcChkZWZhdWx0VmFsdWU/OiBjc21NYXA8c3RyaW5nLCBWYWx1ZT4pOiBjc21NYXA8c3RyaW5nLCBWYWx1ZT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYXDjgavopoHntKDjgpLov73liqDjgZnjgotcclxuICAgICAgICAgKi9cclxuICAgICAgICBwdWJsaWMgcHV0KGtleTogc3RyaW5nLCB2OiBWYWx1ZSk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcC5zZXRWYWx1ZShrZXksIHYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWFw44GL44KJ44Kt44O844Gu44Oq44K544OI44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHVibGljIGdldEtleXMoKTogY3NtVmVjdG9yPHN0cmluZz5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fa2V5cylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IG5ldyBjc21WZWN0b3I8c3RyaW5nPigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZTogY3NtTWFwX2l0ZXJhdG9yPHN0cmluZywgVmFsdWU+ID0gdGhpcy5fbWFwLmJlZ2luKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUoaXRlLm5vdEVxdWFsKHRoaXMuX21hcC5lbmQoKSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5OiBzdHJpbmcgPSBpdGUucHRyKCkuZmlyc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cy5wdXNoQmFjayhrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fa2V5cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1hcOOBruimgee0oOaVsOOCkuWPluW+l+OBmeOCi1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBnZXRTaXplKCk6IG51bWJlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2tleXMuZ2V0U2l6ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfbWFwOiBjc21NYXA8c3RyaW5nLCBWYWx1ZT47ICAgLy8gSlNPTuimgee0oOOBruWApFxyXG4gICAgICAgIHByaXZhdGUgX2tleXM6IGNzbVZlY3RvcjxzdHJpbmc+OyAgICAgICAgICAgICAgIC8vIEpTT07opoHntKDjga7lgKRcclxuICAgIH1cclxufSIsImltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc211c2VybW9kZWx9IGZyb20gJy4uLy4uLy4uLy4uL0ZyYW1ld29yay9tb2RlbC9jdWJpc211c2VybW9kZWwnO1xyXG5pbXBvcnQgQ3ViaXNtVXNlck1vZGVsID0gY3ViaXNtdXNlcm1vZGVsLkN1YmlzbVVzZXJNb2RlbDtcclxuXHJcbi8vIG1vdGlvblxyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW90aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vRnJhbWV3b3JrL21vdGlvbi9jdWJpc21tb3Rpb24nO1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uID0gY3ViaXNtbW90aW9uLkN1YmlzbU1vdGlvbjtcclxuXHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21leHByZXNzaW9ubW90aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vRnJhbWV3b3JrL21vdGlvbi9jdWJpc21leHByZXNzaW9ubW90aW9uJztcclxuaW1wb3J0IEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24gPSBjdWJpc21leHByZXNzaW9ubW90aW9uLkN1YmlzbUV4cHJlc3Npb25Nb3Rpb247XHJcblxyXG4vLyBpZFxyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuLi8uLi8uLi8uLi9GcmFtZXdvcmsvaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcclxuXHJcbi8vIHR5cGVcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uLy4uLy4uLy4uL0ZyYW1ld29yay90eXBlL2NzbXZlY3Rvcic7XHJcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xyXG5cclxuaW1wb3J0IElNb3Rpb25SZXNvdXJjZSBmcm9tICcuLi9pbnRlcmZhY2UvSU1vdGlvblJlc291cmNlJztcclxuaW1wb3J0IHsgSUV4cHJlc3Npb25SZXNvdXJjZSB9IGZyb20gJy4uL2ludGVyZmFjZS9JU2FtcGxlUmVzb3VyY2UnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcEN1YmlzbVVzZXJNb2RlbCBleHRlbmRzIEN1YmlzbVVzZXJNb2RlbCB7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBtb3Rpb25zOiBNYXA8c3RyaW5nLCBDdWJpc21Nb3Rpb24+O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBleHByZXNzaW9uczogTWFwPHN0cmluZywgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbj47XHJcblxyXG4gICAgcHJpdmF0ZSBsYXN0VXBkYXRlVGltZTogbnVtYmVyO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLm1vdGlvbnMgPSBuZXcgTWFwPHN0cmluZywgQ3ViaXNtTW90aW9uPigpO1xyXG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbnMgPSBuZXcgTWFwPHN0cmluZywgQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbj4oKTtcclxuICAgICAgICB0aGlzLmxhc3RVcGRhdGVUaW1lID0gMDtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBhZGRNb3Rpb24obW90aW9uUmVzb3VyY2U6IElNb3Rpb25SZXNvdXJjZSkge1xyXG5cclxuICAgICAgICBjb25zdCBtb3Rpb246IEN1YmlzbU1vdGlvbiA9IHRoaXMubG9hZE1vdGlvbihcclxuICAgICAgICAgICAgbW90aW9uUmVzb3VyY2UuYnVmZmVyLCBcclxuICAgICAgICAgICAgbW90aW9uUmVzb3VyY2UuYnVmZmVyLmJ5dGVMZW5ndGgsIFxyXG4gICAgICAgICAgICBtb3Rpb25SZXNvdXJjZS5tb3Rpb25OYW1lKSBhcyBDdWJpc21Nb3Rpb247XHJcblxyXG4gICAgICAgIGlmICghIW1vdGlvblJlc291cmNlLmZhZGVJblRpbWUpXHJcbiAgICAgICAgICAgIG1vdGlvbi5zZXRGYWRlSW5UaW1lKG1vdGlvblJlc291cmNlLmZhZGVJblRpbWUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghIW1vdGlvblJlc291cmNlLmZhZGVPdXRUaW1lKVxyXG4gICAgICAgICAgICBtb3Rpb24uc2V0RmFkZU91dFRpbWUobW90aW9uUmVzb3VyY2UuZmFkZU91dFRpbWUpO1xyXG5cclxuICAgICAgICBtb3Rpb24uX2V5ZUJsaW5rUGFyYW1ldGVySWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcclxuICAgICAgICBtb3Rpb24uX2xpcFN5bmNQYXJhbWV0ZXJJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xyXG5cclxuICAgICAgICAvLyDph43opIfjgYzjgYLjgaPjgZ/jgonliYrpmaRcclxuICAgICAgICBpZiAodGhpcy5tb3Rpb25zLmhhcyhtb3Rpb25SZXNvdXJjZS5tb3Rpb25OYW1lKSkge1xyXG4gICAgICAgICAgICB0aGlzLm1vdGlvbnMuZGVsZXRlKG1vdGlvblJlc291cmNlLm1vdGlvbk5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLm1vdGlvbnMuc2V0KG1vdGlvblJlc291cmNlLm1vdGlvbk5hbWUsIG1vdGlvbik7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgYWRkRXhwcmVzc2lvbihleHByZXNzaW9uUmVzb3VyY2U6IElFeHByZXNzaW9uUmVzb3VyY2UpIHtcclxuXHJcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbjogQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbiA9IHRoaXMubG9hZEV4cHJlc3Npb24oXHJcbiAgICAgICAgICAgIGV4cHJlc3Npb25SZXNvdXJjZS5idWZmZXIsXHJcbiAgICAgICAgICAgIGV4cHJlc3Npb25SZXNvdXJjZS5idWZmZXIuYnl0ZUxlbmd0aCxcclxuICAgICAgICAgICAgZXhwcmVzc2lvblJlc291cmNlLmV4cHJlc3Npb25OYW1lKSBhcyBDdWJpc21FeHByZXNzaW9uTW90aW9uO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5leHByZXNzaW9ucy5oYXMoZXhwcmVzc2lvblJlc291cmNlLmV4cHJlc3Npb25OYW1lKSkge1xyXG4gICAgICAgICAgICB0aGlzLmV4cHJlc3Npb25zLmRlbGV0ZShleHByZXNzaW9uUmVzb3VyY2UuZXhwcmVzc2lvbk5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5leHByZXNzaW9ucy5zZXQoZXhwcmVzc2lvblJlc291cmNlLmV4cHJlc3Npb25OYW1lLCBleHByZXNzaW9uKTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIHN0YXJ0TW90aW9uKG1vdGlvbk5hbWU6IHN0cmluZykge1xyXG5cclxuICAgICAgICBjb25zdCBtb3Rpb24gPSB0aGlzLm1vdGlvbnMuZ2V0KG1vdGlvbk5hbWUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChtb3Rpb24gPT09IG51bGwgfHwgbW90aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIuc3RvcEFsbE1vdGlvbnMoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1vdGlvbi5zZXRJc0xvb3AodHJ1ZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fbW90aW9uTWFuYWdlci5zdGFydE1vdGlvblByaW9yaXR5KG1vdGlvbiwgZmFsc2UsIDIpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIHVwZGF0ZU1vdGlvbihkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX21vdGlvbk1hbmFnZXIuaXNGaW5pc2hlZCgpKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIudXBkYXRlTW90aW9uKHRoaXMuZ2V0TW9kZWwoKSwgZGVsdGFUaW1lU2Vjb25kcyk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgc3RhcnRFeHByZXNzaW9uKGV4cHJlc3Npb25OYW1lOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IHRoaXMuZXhwcmVzc2lvbnMuZ2V0KGV4cHJlc3Npb25OYW1lKTtcclxuXHJcbiAgICAgICAgaWYgKGV4cHJlc3Npb24gPT09IG51bGwgfHwgZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlci5zdG9wQWxsTW90aW9ucygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIuc3RhcnRNb3Rpb25Qcmlvcml0eShleHByZXNzaW9uLCBmYWxzZSwgMik7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlRXhwcmVzc2lvbihkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyLmlzRmluaXNoZWQoKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlci51cGRhdGVNb3Rpb24odGhpcy5nZXRNb2RlbCgpLCBkZWx0YVRpbWVTZWNvbmRzKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUoKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCBkZWx0YVRpbWUgPSAoY3VycmVudFRpbWUgLSB0aGlzLmxhc3RVcGRhdGVUaW1lKSAvIDEwMDA7XHJcbiAgICAgICAgdGhpcy5sYXN0VXBkYXRlVGltZSA9IGN1cnJlbnRUaW1lO1xyXG5cclxuICAgICAgICAvLyDjg6Ljg7zjgrfjg6fjg7NcclxuICAgICAgICB0aGlzLnVwZGF0ZU1vdGlvbihkZWx0YVRpbWUpO1xyXG5cclxuICAgICAgICAvLyDooajmg4VcclxuICAgICAgICB0aGlzLnVwZGF0ZUV4cHJlc3Npb24oZGVsdGFUaW1lKTtcclxuXHJcbiAgICAgICAgLy8g44Od44O844K6XHJcbiAgICAgICAgaWYgKHRoaXMuX3Bvc2UgIT09IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMuX3Bvc2UudXBkYXRlUGFyYW1ldGVycyh0aGlzLl9tb2RlbCwgZGVsdGFUaW1lKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fbW9kZWwudXBkYXRlKCk7XHJcblxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCBBcHBDdWJpc21Vc2VyTW9kZWwgZnJvbSAnLi9BcHBDdWJpc21Vc2VyTW9kZWwnO1xyXG5pbXBvcnQgSVNhbXBsZVJlc291cmNlLCB7IElFeHByZXNzaW9uUmVzb3VyY2UgfSBmcm9tICcuLi9pbnRlcmZhY2UvSVNhbXBsZVJlc291cmNlJztcclxuaW1wb3J0IElNb3Rpb25SZXNvdXJjZSBmcm9tICcuLi9pbnRlcmZhY2UvSU1vdGlvblJlc291cmNlJztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHBDdWJpc21Vc2VyTW9kZWxCdWlsZGVyIHtcclxuXHJcbiAgICBwcml2YXRlIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICB0aGlzLmdsID0gbnVsbDtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBzZXRHbENvbnRleHQoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IEFwcEN1YmlzbVVzZXJNb2RlbEJ1aWxkZXIge1xyXG5cclxuICAgICAgICB0aGlzLmdsID0gZ2w7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJU2FtcGxlUmVzb3VyY2XjgpLjgoLjgajjgatBcHBDdWJpc21Vc2VyTW9kZWzjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgotcclxuICAgICAqIEBwYXJhbSByZXNvdXJjZSBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIGZyb21TYW1wbGVSZXNvdXJjZUFzeW5jKHJlc291cmNlOiBJU2FtcGxlUmVzb3VyY2UpOiBQcm9taXNlPEFwcEN1YmlzbVVzZXJNb2RlbD4ge1xyXG5cclxuICAgICAgICBjb25zdCBtb2RlbCA9IG5ldyBBcHBDdWJpc21Vc2VyTW9kZWwoKTtcclxuXHJcbiAgICAgICAgLy8g44Oi44OH44Or44OH44O844K/44KS44Ot44O844OJXHJcbiAgICAgICAgbW9kZWwubG9hZE1vZGVsKHJlc291cmNlLm1vYzNBcnJheUJ1ZmZlcik7XHJcblxyXG4gICAgICAgIC8vIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OCkuODreODvOODiVxyXG4gICAgICAgIHJlc291cmNlLm1vdGlvbnMuZm9yRWFjaCgobW90aW9uUmVzb3VyY2U6IElNb3Rpb25SZXNvdXJjZSkgPT5cclxuICAgICAgICAgICAgbW9kZWwuYWRkTW90aW9uKG1vdGlvblJlc291cmNlKSk7XHJcblxyXG4gICAgICAgIC8vIOihqOaDheOBruODh+ODvOOCv+OCkuODreODvOODiVxyXG4gICAgICAgIGlmICghIXJlc291cmNlLmV4cHJlc3Npb25zKVxyXG4gICAgICAgICAgICByZXNvdXJjZS5leHByZXNzaW9ucy5mb3JFYWNoKChleHByZXNzaW9uUmVzb3VyY2U6IElFeHByZXNzaW9uUmVzb3VyY2UpID0+XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5hZGRFeHByZXNzaW9uKGV4cHJlc3Npb25SZXNvdXJjZSkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAvLyDniannkIbmvJTnrpfjga7jg4fjg7zjgr/jgpLjg63jg7zjg4lcclxuICAgICAgICBpZiAoISFyZXNvdXJjZS5waHlzaWNzM0FycmF5QnVmZmVyKVxyXG4gICAgICAgICAgICBtb2RlbC5sb2FkUGh5c2ljcyhyZXNvdXJjZS5waHlzaWNzM0FycmF5QnVmZmVyLCByZXNvdXJjZS5waHlzaWNzM0FycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG5cclxuICAgICAgICAvLyDjg53jg7zjgrrjg4fjg7zjgr/jgpLjg63jg7zjg4lcclxuICAgICAgICBpZiAocmVzb3VyY2UucG9zZTNBcnJheUJ1ZmZlciAhPT0gbnVsbClcclxuICAgICAgICAgICAgbW9kZWwubG9hZFBvc2UocmVzb3VyY2UucG9zZTNBcnJheUJ1ZmZlciwgcmVzb3VyY2UucG9zZTNBcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcclxuXHJcbiAgICAgICAgLy8g44OG44Kv44K544OB44Oj44KS6Kit5a6aXHJcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRVcFRleHR1cmVBc3luYyhtb2RlbCwgcmVzb3VyY2UudGV4dHVyZVBhdGhzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1vZGVsO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg4bjgq/jgrnjg4Hjg6PjgpLkvZzmiJDjgZfjgabjgIHjg6zjg7Pjg4Djg6njgavoqK3lrprjgZnjgotcclxuICAgICAqIEBwYXJhbSBtb2RlbCBcclxuICAgICAqIEBwYXJhbSBwYXRocyBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBzZXRVcFRleHR1cmVBc3luYyhtb2RlbDogQXBwQ3ViaXNtVXNlck1vZGVsLCBwYXRoczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+IHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZ2wgPT09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8g44OG44Kv44K544OB44OjXHJcbiAgICAgICAgY29uc3QgdGV4dHVyZXM6IFdlYkdMVGV4dHVyZVtdID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIHBhdGhzKSB7XHJcblxyXG4gICAgICAgICAgICB0ZXh0dXJlcy5wdXNoKGF3YWl0IHRoaXMuY3JlYXRlQW5kQmluZFRleHR1cmUocGF0aCwgdGhpcy5nbCkpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOODrOODs+ODgOODqeOBruS9nOaIkO+8iGJpbmRUZXh0dXJl44KI44KK5YWI44Gr44KE44Gj44Gm44GK44GP77yJXHJcbiAgICAgICAgbW9kZWwuY3JlYXRlUmVuZGVyZXIoKTtcclxuXHJcbiAgICAgICAgLy8g44OG44Kv44K544OB44Oj44KS44Os44Oz44OA44Op44Gr6Kit5a6aXHJcbiAgICAgICAgdGV4dHVyZXMuZm9yRWFjaCgodGV4dHVyZTogV2ViR0xUZXh0dXJlLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgIG1vZGVsLmdldFJlbmRlcmVyKClcclxuICAgICAgICAgICAgICAgIC5iaW5kVGV4dHVyZShpbmRleCwgdGV4dHVyZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIOOBneOBruOBu+OBi+ODrOODs+ODgOODqeOBruioreWumlxyXG4gICAgICAgIG1vZGVsLmdldFJlbmRlcmVyKCkuc2V0SXNQcmVtdWx0aXBsaWVkQWxwaGEoZmFsc2UpO1xyXG4gICAgICAgIG1vZGVsLmdldFJlbmRlcmVyKCkuc3RhcnRVcCh0aGlzLmdsKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2ViR0xUZXh0dXJl44KS5L2c5oiQ44GX44Gm44CB44OQ44Kk44Oz44OJ44GZ44KLXHJcbiAgICAgKiBAcGFyYW0gcGF0aCBcclxuICAgICAqIEBwYXJhbSBnbCBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVBbmRCaW5kVGV4dHVyZShwYXRoOiBzdHJpbmcsIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiBQcm9taXNlPFdlYkdMVGV4dHVyZT4ge1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6ICh0ZXh0dXJlOiBXZWJHTFRleHR1cmUpID0+IHZvaWQsIHJlamVjdDogKGU6IHN0cmluZykgPT4gdm9pZCkgPT4ge1xyXG4gICAgXHJcbiAgICAgICAgICAgIC8vIOODh+ODvOOCv+OBruOCquODs+ODreODvOODieOCkuODiOODquOCrOODvOOBq+OBmeOCi1xyXG4gICAgICAgICAgICBjb25zdCBpbWc6IEhUTUxJbWFnZUVsZW1lbnQgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgLy8g44OG44Kv44K544OB44Oj44Kq44OW44K444Kn44Kv44OI44Gu5L2c5oiQXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXg6IFdlYkdMVGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgLy8g44OG44Kv44K544OB44Oj44KS6YG45oqeXHJcbiAgICAgICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXgpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSX01JUE1BUF9MSU5FQVIpO1xyXG4gICAgICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XHJcbiAgICAgICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcclxuICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAvLyDkuZfnrpfmuIjjgb/jgqLjg6vjg5XjgqHmlrnlvI/jgpLkvb/nlKjjgZnjgotcclxuICAgICAgICAgICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g44OG44Kv44K544OB44Oj44Gr44OU44Kv44K744Or44KS5pu444GN6L6844KAXHJcbiAgICAgICAgICAgICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGltZyk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIC8vIOODn+ODg+ODl+ODnuODg+ODl+OCkueUn+aIkFxyXG4gICAgICAgICAgICAgICAgZ2wuZ2VuZXJhdGVNaXBtYXAoZ2wuVEVYVFVSRV8yRCk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRleCk7XHJcbiAgICBcclxuICAgICAgICAgICAgfTtcclxuICAgIFxyXG4gICAgICAgICAgICBpbWcub25lcnJvciA9IGVycm9yID0+IGNvbnNvbGUubG9nKGAke2Vycm9yfWApO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGltZy5zcmMgPSBwYXRoO1xyXG4gICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuICAgIH1cclxuXHJcbn0iLCIvLyBGcmFtZXdvcmtcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vLi4vLi4vLi4vRnJhbWV3b3JrL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XHJcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBMaXZlMkRDdWJpc21GcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xyXG5cclxuLy8gbWF0aFxyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0cml4NDQgfSBmcm9tICcuLi8uLi8uLi8uLi9GcmFtZXdvcmsvbWF0aC9jdWJpc21tYXRyaXg0NCc7XHJcbmltcG9ydCBDdWJpc21NYXRyaXg0NCA9IGN1YmlzbW1hdHJpeDQ0LkN1YmlzbU1hdHJpeDQ0O1xyXG5cclxuaW1wb3J0IEFwcEN1YmlzbVVzZXJNb2RlbCBmcm9tIFwiLi9BcHBDdWJpc21Vc2VyTW9kZWxcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTYW1wbGVBcHBsaWNhdGlvbiB7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdmlld3BvcnQ6IG51bWJlcltdO1xyXG4gICAgcHJpdmF0ZSBfZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuICAgIHByaXZhdGUgZnJhbWVCdWZmZXI6IFdlYkdMRnJhbWVidWZmZXI7XHJcbiAgICBwcml2YXRlIG1vZGVsOiBBcHBDdWJpc21Vc2VyTW9kZWw7XHJcbiAgICBwcml2YXRlIHJlcXVlc3RJZDogbnVtYmVyO1xyXG4gICAgXHJcblxyXG4gICAgY29uc3RydWN0b3IoY2FudmFzPzogSFRNTENhbnZhc0VsZW1lbnQpIHtcclxuXHJcbiAgICAgICAgaWYgKGNhbnZhcyA9PT0gbnVsbCkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLl9jYW52YXMgPSBjYW52YXM7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy52aWV3cG9ydCA9IFtcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgY2FudmFzLndpZHRoLFxyXG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgdGhpcy5tb2RlbCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fZ2wgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZnJhbWVCdWZmZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucmVxdWVzdElkID0gMDtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuaW5pdEdsQ29udGV4dCgpO1xyXG4gICAgICAgIHRoaXMuaW5pdEN1YmlzbUZyYW1ld29yaygpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0IGNhbnZhcygpOiBIVE1MQ2FudmFzRWxlbWVudCB7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXQgZ2woKTogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dsO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGFzeW5jIHNldE1vZGVsQXN5bmMobW9kZWw6IEFwcEN1YmlzbVVzZXJNb2RlbCk6IFByb21pc2U8U2FtcGxlQXBwbGljYXRpb24+IHtcclxuXHJcbiAgICAgICAgLy8gTk9URTogbW9kZWxNYXRyaXjjga/jgIHjg6Ljg4fjg6vjga7jg6bjg4vjg4Pjg4jljZjkvY3jgafjga7luYXjgajpq5jjgZXjgYwxw5cx44Gr5Y+O44G+44KL44KI44GG44Gr57iu44KB44KI44GG44Go44GX44Gm44GE44KL77yfXHJcbiAgICAgICAgY29uc3QgbW9kZWxNYXRyaXggPSBtb2RlbC5nZXRNb2RlbE1hdHJpeCgpO1xyXG4gICAgICAgIGNvbnN0IHByb2plY3Rpb25NYXRyaXggPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcclxuICAgICAgICBjb25zdCBzY2FsZSA9IDQ7XHJcbiAgICAgICAgLy8gTk9URTpcclxuICAgICAgICAvLyAxw5cx44Gr44GX44Gf44Oi44OH44Or44KS44CB44Kt44Oj44Oz44OQ44K544Gu57im5qiq5q+U44Gr44Gq44KL44KI44GG44Gr5byV44GN5bu244Gw44Gd44GG44Go44GZ44KLXHJcbiAgICAgICAgLy8g6auY44GV44KS6Kq/5pW044GX44Gm44Oi44OH44Or44KS5q2j44GX44GP6KGo56S644GZ44KL44Gr44Gv44CB6auY44GV44KSIGNhbnZhcy53aWR0aC9jYW52YXMuaGVpZ2h0IOWAjeOBmeOCi1xyXG4gICAgICAgIC8vIOW5heOCkuiqv+aVtOOBl+OBpuODouODh+ODq+OCkuato+OBl+OBj+ihqOekuuOBmeOCi+OBq+OBr+OAgeW5heOCkiBjYW52YXMuaGVpZ2h0IC8gY2FudmFzLndpZHRoIOWAjeOBmeOCi1xyXG4gICAgICAgIHByb2plY3Rpb25NYXRyaXguc2NhbGUoMSwgdGhpcy5jYW52YXMud2lkdGggLyB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgICAgICAvLyDjg6Ljg4fjg6vjgYzoia/jgYTmhJ/jgZjjga7lpKfjgY3jgZXjgavjgarjgovjgojjgYbjgavmi6HlpKfjg7vnuK7lsI9cclxuICAgICAgICBwcm9qZWN0aW9uTWF0cml4LnNjYWxlUmVsYXRpdmUoc2NhbGUsIHNjYWxlKTtcclxuXHJcbiAgICAgICAgcHJvamVjdGlvbk1hdHJpeC5tdWx0aXBseUJ5TWF0cml4KG1vZGVsTWF0cml4KTtcclxuICAgICAgICBtb2RlbC5nZXRSZW5kZXJlcigpLnNldE12cE1hdHJpeChwcm9qZWN0aW9uTWF0cml4KTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBydW4oKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGRyYXcgPSAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5tb2RlbCA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLy8gIOmggueCueOBruabtOaWsFxyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8g44OV44Os44O844Og44OQ44OD44OV44Kh44Go44OT44Ol44O844Od44O844OI44KS44CB44OV44Os44O844Og44Ov44O844Kv6Kit5a6aXHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwuZ2V0UmVuZGVyZXIoKS5zZXRSZW5kZXJTdGF0ZSh0aGlzLmZyYW1lQnVmZmVyLCB0aGlzLnZpZXdwb3J0KTtcclxuXHJcbiAgICAgICAgICAgIC8vIOODouODh+ODq+OBruaPj+eUu1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmdldFJlbmRlcmVyKCkuZHJhd01vZGVsKCk7XHJcbiAgIFxyXG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KTtcclxuICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVxdWVzdElkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXcpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHTOOCs+ODs+ODhuOCreOCueODiOOBruWIneacn+WMllxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGluaXRHbENvbnRleHQoKSB7XHJcblxyXG4gICAgICAgIC8vIFdlYkdM44Kz44Oz44OG44Kt44K544OI44Gu5Yid5pyf5YyWXHJcbiAgICAgICAgdGhpcy5fZ2wgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcpIHx8XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLmdldENvbnRleHQoXCJleHBlcmltZW50YWwtd2ViZ2xcIik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9nbCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhbGVydChcIldlYkdM5pyq5a++5b+c44Gu44OW44Op44Km44K244Gn44GZ44CCXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9nbC5lbmFibGUodGhpcy5fZ2wuQkxFTkQpO1xyXG4gICAgICAgIHRoaXMuX2dsLmJsZW5kRnVuYyh0aGlzLl9nbC5TUkNfQUxQSEEsIHRoaXMuX2dsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xyXG4gICAgICAgIHRoaXMuX2dsLmNsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMC4wKTtcclxuICAgICAgICB0aGlzLl9nbC5lbmFibGUodGhpcy5fZ2wuREVQVEhfVEVTVCk7XHJcbiAgICAgICAgdGhpcy5fZ2wuZGVwdGhGdW5jKHRoaXMuX2dsLkxFUVVBTCk7XHJcblxyXG4gICAgICAgIHRoaXMuZnJhbWVCdWZmZXIgPSB0aGlzLl9nbC5nZXRQYXJhbWV0ZXIodGhpcy5fZ2wuRlJBTUVCVUZGRVJfQklORElORyk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEN1YmlzbUZyYW1ld29ya1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGluaXRDdWJpc21GcmFtZXdvcmsoKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgQ3ViaXNtRnJhbWV3b3JrLnN0YXJ0VXAoKTtcclxuICAgICAgICBDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgpO1xyXG5cclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgaWN1YmlzbW1vZGVsc2V0dGluZyB9IGZyb20gJy4uLy4uLy4uLy4uL0ZyYW1ld29yay9pY3ViaXNtbW9kZWxzZXR0aW5nJztcclxuaW1wb3J0IElDdWJpc21Nb2RlbFNldHRpbmcgPSBpY3ViaXNtbW9kZWxzZXR0aW5nLklDdWJpc21Nb2RlbFNldHRpbmc7XHJcblxyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWxzZXR0aW5nanNvbiB9IGZyb20gJy4uLy4uLy4uLy4uL0ZyYW1ld29yay9jdWJpc21tb2RlbHNldHRpbmdqc29uJztcclxuaW1wb3J0IEN1YmlzbU1vZGVsU2V0dGluZ0pzb24gPSBjdWJpc21tb2RlbHNldHRpbmdqc29uLkN1YmlzbU1vZGVsU2V0dGluZ0pzb247XHJcblxyXG5pbXBvcnQgSVNhbXBsZVJlc291cmNlLCB7IElNb3Rpb25SZXNvdXJjZSwgSUV4cHJlc3Npb25SZXNvdXJjZSB9IGZyb20gXCIuLi9pbnRlcmZhY2UvSVNhbXBsZVJlc291cmNlXCI7XHJcbi8vIGltcG9ydCBJTW90aW9uUmVzb3VyY2UgZnJvbSAnLi4vaW50ZXJmYWNlL0lNb3Rpb25SZXNvdXJjZSc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2FtcGxlUmVzb3VyY2VMb2FkZXIge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgbG9hZEZyb21Nb2RlbDNKc29uQXN5bmMocGF0aDogc3RyaW5nKTogUHJvbWlzZTxJU2FtcGxlUmVzb3VyY2U+IHtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzb3VyY2U6IElTYW1wbGVSZXNvdXJjZSA9IHtcclxuICAgICAgICAgICAgbW9jM0FycmF5QnVmZmVyOiBudWxsLFxyXG4gICAgICAgICAgICB0ZXh0dXJlUGF0aHM6IFtdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8g44OH44Kj44Os44Kv44OI44Oq44Gu44OR44K5XHJcbiAgICAgICAgY29uc3QgZGlyID0gcGF0aC5zcGxpdCgvW1xcd10qLm1vZGVsMy5qc29uJC8pWzBdO1xyXG5cclxuICAgICAgICAvLyDjg6Ljg4fjg6voqK3lrppcclxuICAgICAgICBjb25zdCBtb2RlbFNldHRpbmcgPSBhd2FpdCB0aGlzLmNyZWF0ZUN1YmlzbU1vZGVsU2V0dGluZ0pzb25Bc3luYyhwYXRoKTtcclxuICAgICAgICBpZiAobW9kZWxTZXR0aW5nID09PSBudWxsKSByZXR1cm4gbnVsbDtcclxuICAgICAgICByZXNvdXJjZS5jdWJpc21Nb2RlbFNldHRpbmcgPSBtb2RlbFNldHRpbmc7XHJcblxyXG4gICAgICAgIC8vIOODouODh+ODq1xyXG4gICAgICAgIGNvbnN0IG1vYzNBcnJheUJ1ZmZlciA9IGF3YWl0IHRoaXMubG9hZE1vYzNBcnJheUJ1ZmZlckZyb21Nb2RlbFNldHRpbmdBc3luYyhtb2RlbFNldHRpbmcsIGRpcik7XHJcbiAgICAgICAgaWYgKG1vYzNBcnJheUJ1ZmZlciA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgcmVzb3VyY2UubW9jM0FycmF5QnVmZmVyID0gbW9jM0FycmF5QnVmZmVyO1xyXG5cclxuICAgICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjga7jg5HjgrlcclxuICAgICAgICBjb25zdCB0ZXh0dXJlUGF0aHMgPSB0aGlzLmdldFRleHR1cmVQYXRoc0Zyb21Nb2RlbFNldHRpbmcobW9kZWxTZXR0aW5nLCBkaXIpO1xyXG4gICAgICAgIGlmICh0ZXh0dXJlUGF0aHMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcclxuICAgICAgICByZXNvdXJjZS50ZXh0dXJlUGF0aHMgPSB0ZXh0dXJlUGF0aHM7XHJcblxyXG4gICAgICAgIC8vIOODouODvOOCt+ODp+ODs1xyXG4gICAgICAgIGNvbnN0IG1vdGlvbnMgPSBhd2FpdCB0aGlzLmxvYWRNb3Rpb25zRnJvbU1vZGVsU2V0dGluZ0FzeW5jKG1vZGVsU2V0dGluZywgZGlyKTtcclxuICAgICAgICByZXNvdXJjZS5tb3Rpb25zID0gbW90aW9ucztcclxuXHJcbiAgICAgICAgLy8g6KGo5oOFXHJcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbnMgPSBhd2FpdCB0aGlzLmxvYWRFeHByZXNzaW9uc0Zyb21Nb2RlbFNldHRpbmdBc3luYyhtb2RlbFNldHRpbmcsIGRpcik7XHJcbiAgICAgICAgcmVzb3VyY2UuZXhwcmVzc2lvbnMgPSBleHByZXNzaW9ucztcclxuXHJcbiAgICAgICAgLy8g54mp55CG5ryU566XXHJcbiAgICAgICAgY29uc3QgcGh5c2ljczNBcnJheUJ1ZmZlciA9IGF3YWl0IHRoaXMubG9hZFBoeXNpY3MzQXJyYXlCdWZmZXJGcm9tTW9kZWxTZXR0aW5nQXN5bmMobW9kZWxTZXR0aW5nLCBkaXIpO1xyXG4gICAgICAgIHJlc291cmNlLnBoeXNpY3MzQXJyYXlCdWZmZXIgPSBwaHlzaWNzM0FycmF5QnVmZmVyO1xyXG5cclxuICAgICAgICAvLyDjg53jg7zjgrpcclxuICAgICAgICBjb25zdCBwb3NlM0FycmF5QnVmZmVyID0gYXdhaXQgdGhpcy5sb2FkUG9zZTNBcnJheUJ1ZmZlckZyb21Nb2RlbFNldHRpbmdBc3luYyhtb2RlbFNldHRpbmcsIGRpcik7XHJcbiAgICAgICAgcmVzb3VyY2UucG9zZTNBcnJheUJ1ZmZlciA9IHBvc2UzQXJyYXlCdWZmZXI7XHJcblxyXG4gICAgICAgIHJldHVybiByZXNvdXJjZTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDdWJpc21Nb2RlbFNldHRpbmdKc29u44Kq44OW44K444Kn44Kv44OI44KS5L2c5oiQXHJcbiAgICAgKiBAcGFyYW0gcGF0aCBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgY3JlYXRlQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbkFzeW5jKHBhdGg6IHN0cmluZyk6IFByb21pc2U8SUN1YmlzbU1vZGVsU2V0dGluZz4ge1xyXG5cclxuICAgICAgICBjb25zdCBtb2RlbDNKc29uQXJyYXlCdWZmZXIgPSBhd2FpdCB0aGlzLmxvYWRBc0FycmF5QnVmZmVyQXN5bmMocGF0aClcclxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9KSBhcyBBcnJheUJ1ZmZlcjtcclxuXHJcbiAgICAgICAgaWYgKG1vZGVsM0pzb25BcnJheUJ1ZmZlciA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBtb2RlbFNldHRpbmcgPSBuZXcgQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbihtb2RlbDNKc29uQXJyYXlCdWZmZXIsIG1vZGVsM0pzb25BcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKSBhcyBJQ3ViaXNtTW9kZWxTZXR0aW5nO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBtb2RlbFNldHRpbmc7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODouODh+ODq+ODh+ODvOOCv+OCkkFycmF5QnVmZmVy44Go44GX44Gm6L+U44GZXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZyBcclxuICAgICAqIEBwYXJhbSBkaXIgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIGxvYWRNb2MzQXJyYXlCdWZmZXJGcm9tTW9kZWxTZXR0aW5nQXN5bmMoc2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZywgZGlyOiBzdHJpbmcgPSBcIi4vXCIpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XHJcblxyXG4gICAgICAgIGlmIChzZXR0aW5nLmdldE1vZGVsRmlsZU5hbWUoKSA9PT0gJycpIHJldHVybiBudWxsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IG1vYzNGaWxlUGF0aCA9IGAke2Rpcn0ke3NldHRpbmcuZ2V0TW9kZWxGaWxlTmFtZSgpfWA7XHJcbiAgICAgICAgY29uc3QgbW9jM0FycmF5QnVmZmVyID0gYXdhaXQgdGhpcy5sb2FkQXNBcnJheUJ1ZmZlckFzeW5jKGAke21vYzNGaWxlUGF0aH1gKVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0pIGFzIEFycmF5QnVmZmVyO1xyXG4gICAgXHJcbiAgICAgICAgaWYgKG1vYzNBcnJheUJ1ZmZlciA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICByZXR1cm4gbW9jM0FycmF5QnVmZmVyO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7jg5HjgrnjgpLphY3liJfjgavjgZfjgabov5TjgZlcclxuICAgICAqIEBwYXJhbSBzZXR0aW5nIFxyXG4gICAgICogQHBhcmFtIGRpciBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0VGV4dHVyZVBhdGhzRnJvbU1vZGVsU2V0dGluZyhzZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nLCBkaXI6IHN0cmluZyA9IFwiLi9cIik6IHN0cmluZ1tdIHtcclxuXHJcbiAgICAgICAgY29uc3QgdGV4dHVyZVBhdGhzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICBjb25zdCB0ZXh0dXJlQ291bnQgPSBzZXR0aW5nLmdldFRleHR1cmVDb3VudCgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dHVyZUNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRleHR1cmVQYXRocy5wdXNoKGAke2Rpcn0ke3NldHRpbmcuZ2V0VGV4dHVyZUZpbGVOYW1lKGkpfWApO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0ZXh0dXJlUGF0aHM7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODouODvOOCt+ODp+ODs+OBruODh+ODvOOCv+OCkklNb3Rpb25SZXNvdXJjZeOBrumFjeWIl+OBq+OBl+OBpui/lOOBmVxyXG4gICAgICogQHBhcmFtIHNldHRpbmdcclxuICAgICAqIEBwYXJhbSBkaXIgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIGxvYWRNb3Rpb25zRnJvbU1vZGVsU2V0dGluZ0FzeW5jKHNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmcsIGRpcjogc3RyaW5nID0gXCIuL1wiKTogUHJvbWlzZTxJTW90aW9uUmVzb3VyY2VbXT4ge1xyXG5cclxuICAgICAgICBjb25zdCBtb3Rpb25SZXNvdXJjZXM6IElNb3Rpb25SZXNvdXJjZVtdID0gW107XHJcblxyXG4gICAgICAgIGNvbnN0IG1vdGlvbkdyb3VwQ291bnQgPSBzZXR0aW5nLmdldE1vdGlvbkdyb3VwQ291bnQoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vdGlvbkdyb3VwQ291bnQ7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZ3JvdXBOYW1lID0gc2V0dGluZy5nZXRNb3Rpb25Hcm91cE5hbWUoaSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vdGlvbkNvdW50ID0gc2V0dGluZy5nZXRNb3Rpb25Db3VudChncm91cE5hbWUpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBtb3Rpb25Db3VudDsgaisrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmcuZ2V0TW90aW9uRmlsZU5hbWUoZ3JvdXBOYW1lLCBqKSA9PT0gJycpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vdGlvbkZpbGVQYXRoID0gYCR7ZGlyfSR7c2V0dGluZy5nZXRNb3Rpb25GaWxlTmFtZShncm91cE5hbWUsIGopfWA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCB0aGlzLmxvYWRBc0FycmF5QnVmZmVyQXN5bmMobW90aW9uRmlsZVBhdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9KSBhcyBBcnJheUJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZhZGVJblRpbWUgPSBzZXR0aW5nLmdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZShncm91cE5hbWUsIGopO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmFkZU91dFRpbWUgPSBzZXR0aW5nLmdldE1vdGlvbkZhZGVPdXRUaW1lVmFsdWUoZ3JvdXBOYW1lLCBqKTtcclxuXHJcbiAgICAgICAgICAgICAgICBtb3Rpb25SZXNvdXJjZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbW90aW9uTmFtZTogbW90aW9uRmlsZVBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBidWZmZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgZmFkZUluVGltZTogZmFkZUluVGltZSxcclxuICAgICAgICAgICAgICAgICAgICBmYWRlT3V0VGltZTogZmFkZU91dFRpbWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtb3Rpb25SZXNvdXJjZXM7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOihqOaDheOBruODh+ODvOOCv+OCkklFeHByZXNzaW9uUmVzb3VyY2Xjga7phY3liJfjgavjgZfjgabov5TjgZlcclxuICAgICAqIEBwYXJhbSBzZXR0aW5nIFxyXG4gICAgICogQHBhcmFtIGRpciBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgbG9hZEV4cHJlc3Npb25zRnJvbU1vZGVsU2V0dGluZ0FzeW5jKHNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmcsIGRpcjogc3RyaW5nID0gXCIuL1wiKTogUHJvbWlzZTxJRXhwcmVzc2lvblJlc291cmNlW10+IHtcclxuXHJcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvblJlc291cmNlczogSUV4cHJlc3Npb25SZXNvdXJjZVtdID0gW107XHJcblxyXG4gICAgICAgIGNvbnN0IGV4cENvdW50ID0gc2V0dGluZy5nZXRFeHByZXNzaW9uQ291bnQoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4cENvdW50OyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZXR0aW5nLmdldEV4cHJlc3Npb25GaWxlTmFtZShpKSA9PT0gJycpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvblBhdGggPSBgJHtkaXJ9JHtzZXR0aW5nLmdldEV4cHJlc3Npb25GaWxlTmFtZShpKX1gO1xyXG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCB0aGlzLmxvYWRBc0FycmF5QnVmZmVyQXN5bmMoZXhwcmVzc2lvblBhdGgpXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfSkgYXMgQXJyYXlCdWZmZXI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBleHByZXNzaW9uUmVzb3VyY2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbk5hbWU6IHNldHRpbmcuZ2V0RXhwcmVzc2lvbk5hbWUoaSksXHJcbiAgICAgICAgICAgICAgICBidWZmZXI6IGJ1ZmZlclxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZXhwcmVzc2lvblJlc291cmNlcztcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIGxvYWRQaHlzaWNzM0FycmF5QnVmZmVyRnJvbU1vZGVsU2V0dGluZ0FzeW5jKHNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmcsIGRpcjogc3RyaW5nID0gXCIuL1wiKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xyXG5cclxuICAgICAgICBpZiAoc2V0dGluZy5nZXRQaHlzaWNzRmlsZU5hbWUoKSA9PT0gJycpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICBjb25zdCBwaHlzaWNzM0ZpbGVQYXRoID0gYCR7ZGlyfSR7c2V0dGluZy5nZXRQaHlzaWNzRmlsZU5hbWUoKX1gO1xyXG4gICAgICAgIGNvbnN0IHBoeXNpY3MzQXJyYXlCdWZmZXIgPSBhd2FpdCB0aGlzLmxvYWRBc0FycmF5QnVmZmVyQXN5bmMoYCR7cGh5c2ljczNGaWxlUGF0aH1gKVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0pIGFzIEFycmF5QnVmZmVyO1xyXG4gICAgXHJcbiAgICAgICAgaWYgKHBoeXNpY3MzQXJyYXlCdWZmZXIgPT09IG51bGwpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICByZXR1cm4gcGh5c2ljczNBcnJheUJ1ZmZlcjtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Od44O844K644OH44O844K/44KSQXJyYXlCdWZmZXLjgajjgZfjgabov5TjgZlcclxuICAgICAqIEBwYXJhbSBzZXR0aW5nIFxyXG4gICAgICogQHBhcmFtIGRpciBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgbG9hZFBvc2UzQXJyYXlCdWZmZXJGcm9tTW9kZWxTZXR0aW5nQXN5bmMoc2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZywgZGlyOiBzdHJpbmcgPSBcIi4vXCIpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XHJcblxyXG4gICAgICAgIGNvbnN0IHBvc2UzRmlsZVBhdGggPSBgJHtkaXJ9JHtzZXR0aW5nLmdldFBvc2VGaWxlTmFtZSgpfWA7XHJcbiAgICAgICAgY29uc3QgcG9zZTNBcnJheUJ1ZmZlciA9IGF3YWl0IHRoaXMubG9hZEFzQXJyYXlCdWZmZXJBc3luYyhgJHtwb3NlM0ZpbGVQYXRofWApXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfSkgYXMgQXJyYXlCdWZmZXI7XHJcblxyXG4gICAgICAgIHJldHVybiBwb3NlM0FycmF5QnVmZmVyO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg5XjgqHjgqTjg6vjgpLoqq3jgb/ovrzjgpPjgafjgIFBcnJheUJ1ZmZlcuOBqOOBl+OBpui/lOOBmVxyXG4gICAgICogQHBhcmFtIHBhdGggXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIGxvYWRBc0FycmF5QnVmZmVyQXN5bmMocGF0aDogc3RyaW5nKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xyXG5cclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHBhdGgpXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTmV0d29yayBlcnJvcjogJHtlcnJvcn1gKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGdldCBcIiR7cGF0aH1cIi5gKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpXHJcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIFwiJHtwYXRofVwiIGFzIEFycmF5QnVmZmVyLmApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiBidWZmZXI7XHJcbiAgICBcclxuICAgIH1cclxuXHJcbn0iLCIvLyBGcmFtZXdvcmtcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vLi4vLi4vRnJhbWV3b3JrL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XHJcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBMaXZlMkRDdWJpc21GcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xyXG5cclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGljdWJpc21tb2RlbHNldHRpbmcgfSBmcm9tICcuLi8uLi8uLi9GcmFtZXdvcmsvaWN1YmlzbW1vZGVsc2V0dGluZyc7XHJcbmltcG9ydCBJQ3ViaXNtTW9kZWxTZXR0aW5nID0gaWN1YmlzbW1vZGVsc2V0dGluZy5JQ3ViaXNtTW9kZWxTZXR0aW5nO1xyXG5cclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsc2V0dGluZ2pzb24gfSBmcm9tICcuLi8uLi8uLi9GcmFtZXdvcmsvY3ViaXNtbW9kZWxzZXR0aW5nanNvbic7XHJcbmltcG9ydCBDdWJpc21Nb2RlbFNldHRpbmdKc29uID0gY3ViaXNtbW9kZWxzZXR0aW5nanNvbi5DdWJpc21Nb2RlbFNldHRpbmdKc29uO1xyXG5cclxuLy8gbWF0aFxyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0cml4NDQgfSBmcm9tICcuLi8uLi8uLi9GcmFtZXdvcmsvbWF0aC9jdWJpc21tYXRyaXg0NCc7XHJcbmltcG9ydCBDdWJpc21NYXRyaXg0NCA9IGN1YmlzbW1hdHJpeDQ0LkN1YmlzbU1hdHJpeDQ0O1xyXG5cclxuLy8gQ3ViaXNtVXNlck1vZGVsXHJcbmltcG9ydCBBcHBDdWJpc21Vc2VyTW9kZWwgZnJvbSAnLi9jbGFzcy9BcHBDdWJpc21Vc2VyTW9kZWwnO1xyXG5cclxuaW1wb3J0IElTYW1wbGVSZXNvdXJjZSwgeyBJTW90aW9uUmVzb3VyY2UsIElFeHByZXNzaW9uUmVzb3VyY2UgfSBmcm9tICcuL2ludGVyZmFjZS9JU2FtcGxlUmVzb3VyY2UnO1xyXG5pbXBvcnQgU2FtcGxlUmVzb3VyY2VMb2FkZXIgZnJvbSAnLi9jbGFzcy9TYW1wbGVSZXNvdXJjZUxvYWRlcic7XHJcbmltcG9ydCBTYW1wbGVBcHBsaWNhdGlvbiBmcm9tICcuL2NsYXNzL1NhbXBsZUFwcGxpY2F0aW9uJztcclxuaW1wb3J0IEFwcEN1YmlzbVVzZXJNb2RlbEJ1aWxkZXIgZnJvbSAnLi9jbGFzcy9BcHBDdWJpc21Vc2VyTW9kZWxCdWlsZGVyJztcclxuXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgYXN5bmMgKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IHJlc291cmNlc0RpciA9ICcuLi8uLi9SZXNvdXJjZXMvSGFydS8nO1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbnZhc+OBruWIneacn+WMllxyXG4gICAgICovXHJcblxyXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIExpdmUyROOCkuihqOekulxyXG4gICAgICovXHJcbiAgICBcclxuICAgIGNvbnN0IHJlc291cmNlOiBJU2FtcGxlUmVzb3VyY2UgPSBhd2FpdCBTYW1wbGVSZXNvdXJjZUxvYWRlclxyXG4gICAgICAgIC5sb2FkRnJvbU1vZGVsM0pzb25Bc3luYyhgJHtyZXNvdXJjZXNEaXJ9SGFydS5tb2RlbDMuanNvbmApO1xyXG5cclxuICAgIGNvbnN0IHNhbXBsZUFwcDogU2FtcGxlQXBwbGljYXRpb24gPSBuZXcgU2FtcGxlQXBwbGljYXRpb24oY2FudmFzKTtcclxuXHJcbiAgICBjb25zdCBtb2RlbDogQXBwQ3ViaXNtVXNlck1vZGVsID0gYXdhaXQgbmV3IEFwcEN1YmlzbVVzZXJNb2RlbEJ1aWxkZXIoKVxyXG4gICAgICAgIC5zZXRHbENvbnRleHQoc2FtcGxlQXBwLmdsKVxyXG4gICAgICAgIC5mcm9tU2FtcGxlUmVzb3VyY2VBc3luYyhyZXNvdXJjZSk7XHJcblxyXG4gICAgYXdhaXQgc2FtcGxlQXBwLnNldE1vZGVsQXN5bmMobW9kZWwpO1xyXG5cclxuICAgIHNhbXBsZUFwcC5ydW4oKTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIVE1M6KaB57Sg44Gu5Yid5pyf5YyWXHJcbiAgICAgKi9cclxuXHJcbiAgICAgLy8g44Oi44O844K344On44Oz6YG45oqeXHJcbiAgICBjb25zdCBtb3Rpb25TZWxlY3RvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3Rpb25TZWxlY3RvcicpIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xyXG4gICAgaWYgKCEhbW90aW9uU2VsZWN0b3IpIHtcclxuXHJcbiAgICAgICAgbW90aW9uU2VsZWN0b3IuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uTm9Nb3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICBvcHRpb25Ob01vdGlvbi52YWx1ZSA9ICcnO1xyXG4gICAgICAgIG9wdGlvbk5vTW90aW9uLnRleHQgPSAnLS0nO1xyXG4gICAgICAgIG1vdGlvblNlbGVjdG9yLmFwcGVuZENoaWxkKG9wdGlvbk5vTW90aW9uKTtcclxuXHJcbiAgICAgICAgcmVzb3VyY2UubW90aW9ucy5mb3JFYWNoKChtb3Rpb25SZXNvdXJjZTogSU1vdGlvblJlc291cmNlKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0gbW90aW9uUmVzb3VyY2UubW90aW9uTmFtZTtcclxuICAgICAgICAgICAgb3B0aW9uLnRleHQgPSBtb3Rpb25SZXNvdXJjZS5tb3Rpb25OYW1lO1xyXG5cclxuICAgICAgICAgICAgbW90aW9uU2VsZWN0b3IuYXBwZW5kQ2hpbGQob3B0aW9uKTtcclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG1vdGlvblNlbGVjdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcclxuXHJcbiAgICAgICAgICAgIG1vZGVsLnN0YXJ0TW90aW9uKG1vdGlvblNlbGVjdG9yLnZhbHVlKTtcclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyDooajmg4Xjga7pgbjmip5cclxuICAgIGNvbnN0IGV4cHJlc3Npb25TZWxlY3RvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleHByZXNzaW9uU2VsZWN0b3InKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcclxuICAgIGlmICghIWV4cHJlc3Npb25TZWxlY3Rvcikge1xyXG5cclxuICAgICAgICBleHByZXNzaW9uU2VsZWN0b3IuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uTm9FeHByZXNzaW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgb3B0aW9uTm9FeHByZXNzaW9uLnZhbHVlID0gJyc7XHJcbiAgICAgICAgb3B0aW9uTm9FeHByZXNzaW9uLnRleHQgPSAnLS0nO1xyXG4gICAgICAgIGV4cHJlc3Npb25TZWxlY3Rvci5hcHBlbmRDaGlsZChvcHRpb25Ob0V4cHJlc3Npb24pO1xyXG5cclxuICAgICAgICByZXNvdXJjZS5leHByZXNzaW9ucy5mb3JFYWNoKChleHByZXNzaW9uUmVzb3VyY2U6IElFeHByZXNzaW9uUmVzb3VyY2UpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgICAgICBvcHRpb24udmFsdWUgPSBleHByZXNzaW9uUmVzb3VyY2UuZXhwcmVzc2lvbk5hbWU7XHJcbiAgICAgICAgICAgIG9wdGlvbi50ZXh0ID0gZXhwcmVzc2lvblJlc291cmNlLmV4cHJlc3Npb25OYW1lO1xyXG5cclxuICAgICAgICAgICAgZXhwcmVzc2lvblNlbGVjdG9yLmFwcGVuZENoaWxkKG9wdGlvbik7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBleHByZXNzaW9uU2VsZWN0b3IuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgbW9kZWwuc3RhcnRFeHByZXNzaW9uKGV4cHJlc3Npb25TZWxlY3Rvci52YWx1ZSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbn0pOyJdLCJzb3VyY2VSb290IjoiIn0=